<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="yen.20210612081822.1"><vh>@settings</vh>
<v t="yen.20210612081822.2"><vh>@string theme-name = DefaultTheme</vh></v>
<v t="yen.20210612081822.3"><vh> Color definitions</vh>
<v t="yen.20210612081822.4"><vh>@color LeoGreen = #00AA00</vh></v>
<v t="yen.20210612081822.5"><vh>@color LeoYellow = #ffffec</vh></v>
<v t="yen.20210612081822.6"><vh>Logical colors</vh>
<v t="yen.20210612081822.7"><vh>@color log-black-color = black</vh></v>
<v t="yen.20210612081822.8"><vh>@color log-blue-color = blue</vh></v>
<v t="yen.20210612081822.9"><vh>@color log-cyan-color = cyan</vh></v>
<v t="yen.20210612081822.10"><vh>@color log-error-color = red</vh></v>
<v t="yen.20210612081822.11"><vh>@color log-green-color = green</vh></v>
<v t="yen.20210612081822.12"><vh>@color log-info-color = blue</vh></v>
<v t="yen.20210612081822.13"><vh>@color log-magenta-color = magenta</vh></v>
<v t="yen.20210612081822.14"><vh>@color log-note-color = blue</vh></v>
<v t="yen.20210612081822.15"><vh>@color log-orange-color = orange</vh></v>
<v t="yen.20210612081822.16"><vh>@color log-red-color = red</vh></v>
<v t="yen.20210612081822.17"><vh>@color log-violet-color = violet</vh></v>
<v t="yen.20210612081822.18"><vh>@color log-warning-color = red</vh></v>
<v t="yen.20210612081822.19"><vh>@color log-white-color = white</vh></v>
<v t="yen.20210612081822.20"><vh>@color log-yellow-color = yellow</vh></v>
</v>
<v t="yen.20210612081822.21"><vh>Solarized color definitions</vh>
<v t="yen.20210612081822.22"><vh>@color solarized-base0 = #839496</vh></v>
<v t="yen.20210612081822.23"><vh>@color solarized-base00 = #657b83</vh></v>
<v t="yen.20210612081822.24"><vh>@color solarized-base01 = #586e75</vh></v>
<v t="yen.20210612081822.25"><vh>@color solarized-base02 = #073642</vh></v>
<v t="yen.20210612081822.26"><vh>@color solarized-base03 = #002b36</vh></v>
<v t="yen.20210612081822.27"><vh>@color solarized-base1 = #93a1a1</vh></v>
<v t="yen.20210612081822.28"><vh>@color solarized-base2 = #eee8d5</vh></v>
<v t="yen.20210612081822.29"><vh>@color solarized-base3 = #fdf6e3</vh></v>
<v t="yen.20210612081822.30"><vh>@color solarized-black = #000005</vh></v>
<v t="yen.20210612081822.31"><vh>@color solarized-blue = #268bd2</vh></v>
<v t="yen.20210612081822.32"><vh>@color solarized-cyan = #2aa198</vh></v>
<v t="yen.20210612081822.33"><vh>@color solarized-green = #859900</vh></v>
<v t="yen.20210612081822.34"><vh>@color solarized-magenta = #d33682</vh></v>
<v t="yen.20210612081822.35"><vh>@color solarized-orange = #cb4b16</vh></v>
<v t="yen.20210612081822.36"><vh>@color solarized-red = #dc322f</vh></v>
<v t="yen.20210612081822.37"><vh>@color solarized-violet = #6c71c4</vh></v>
<v t="yen.20210612081822.38"><vh>@color solarized-white = #fdf6e3 </vh></v>
<v t="yen.20210612081822.39"><vh>@color solarized-yellow = #b58900</vh></v>
</v>
<v t="yen.20210612081822.40"><vh>Solarized color reference</vh></v>
</v>
<v t="yen.20210612081822.41"><vh>Abbreviations</vh>
<v t="yen.20210612081822.42"><vh>@bool enable-abbreviations = True</vh></v>
<v t="yen.20210612081822.43"><vh>@bool scripting-abbreviations = False</vh></v>
<v t="yen.20210612081822.44"><vh>@data abbreviations</vh></v>
<v t="yen.20210612081822.45"><vh>@data abbreviations-subst-env</vh>
<v t="yen.20210612081822.46"><vh>ask</vh></v>
<v t="yen.20210612081822.47"><vh>close_xml</vh></v>
<v t="yen.20210612081822.48"><vh>django_tag</vh></v>
<v t="yen.20210612081822.49"><vh>do</vh></v>
<v t="yen.20210612081822.50"><vh>file_name</vh></v>
<v t="yen.20210612081822.51"><vh>get</vh></v>
<v t="yen.20210612081822.52"><vh>get_language</vh></v>
<v t="yen.20210612081822.53"><vh>html_tag</vh></v>
<v t="yen.20210612081822.54"><vh>in_class</vh></v>
<v t="yen.20210612081822.55"><vh>insert</vh></v>
<v t="yen.20210612081822.56"><vh>long_word</vh></v>
<v t="yen.20210612081822.57"><vh>param_doc</vh></v>
<v t="yen.20210612081822.58"><vh>user_name</vh></v>
</v>
<v t="yen.20210612081822.59"><vh>@data global-abbreviations</vh></v>
<v t="yen.20210612081822.60"><vh>@outline-data tree-abbreviations</vh>
<v t="yen.20210612081822.61"><vh>importer;;</vh>
<v t="yen.20210612081822.62"><vh>@@file importers/{|{x=name}|}.py</vh>
<v t="yen.20210612081822.63"><vh>class {|{x=cap_name}|}_Importer</vh>
<v t="yen.20210612081822.64"><vh>{|{x=name}|}.Overrides</vh>
<v t="yen.20210612081822.65"><vh>{|{x=name}|}.clean_headline</vh></v>
<v t="yen.20210612081822.66"><vh>{|{x=name}|}.clean_nodes</vh></v>
</v>
</v>
<v t="yen.20210612081822.67"><vh>class class {|{x=cap_name}|}_ScanState</vh>
<v t="yen.20210612081822.68"><vh>{|{x=name}|}_state.level</vh></v>
<v t="yen.20210612081822.69"><vh>{|{x=name}|}_state.update</vh></v>
</v>
</v>
</v>
<v t="yen.20210612081822.70"><vh>per-commander-plugin;;</vh>
<v t="yen.20210612081822.71"><vh>@@file pluginname.py</vh>
<v t="yen.20210612081822.72"><vh>&lt;&lt; docstring &gt;&gt;</vh></v>
<v t="yen.20210612081822.73"><vh>&lt;&lt; version history &gt;&gt;</vh></v>
<v t="yen.20210612081822.74"><vh>&lt;&lt; imports &gt;&gt;</vh></v>
<v t="yen.20210612081822.75"><vh>init</vh></v>
<v t="yen.20210612081822.76"><vh>onCreate</vh></v>
<v t="yen.20210612081822.77"><vh>class pluginController</vh>
<v t="yen.20210612081822.78"><vh>__init__</vh></v>
</v>
</v>
</v>
<v t="yen.20210612081822.79"><vh>demo;;</vh>
<v t="yen.20210612081822.80"><vh>@@button MyDemo @key=Ctrl-9</vh>
<v t="yen.20210612081822.81"><vh>&lt;&lt; imports &gt;&gt;</vh></v>
<v t="yen.20210612081822.82"><vh>script_string</vh></v>
<v t="yen.20210612081822.83"><vh>class myDemo</vh></v>
<v t="yen.20210612081822.84"><vh>wrappers</vh></v>
</v>
</v>
</v>
<v t="yen.20210612081822.85"><vh>@string abbreviations-place-end = |&gt;</vh></v>
<v t="yen.20210612081822.86"><vh>@string abbreviations-place-start = &lt;|</vh></v>
<v t="yen.20210612081822.87"><vh>@string abbreviations-subst-end = }|}</vh></v>
<v t="yen.20210612081822.88"><vh>@string abbreviations-subst-start = {|{</vh></v>
<v t="yen.20210612081822.89"><vh>@string abbreviations-next-placeholder = ,,</vh></v>
</v>
<v t="yen.20210612081822.90"><vh>Appearance (change these first)</vh>
<v t="yen.20210612081822.91"><vh>Qt Gui settings</vh>
<v t="yen.20210612081822.92"><vh>@string qt-style-name = None</vh></v>
<v t="yen.20210612081822.93"><vh>Colors</vh>
<v t="yen.20210612081822.94"><vh>Body pane colors</vh>
<v t="yen.20210612081822.95"><vh>@color body-bg = white</vh></v>
<v t="yen.20210612081822.96"><vh>@color body-fg = black</vh></v>
<v t="yen.20210612081822.97"><vh>@color body-sel-fg = white</vh></v>
<v t="yen.20210612081822.98"><vh>@color body-sel-bg = lightgray</vh></v>
</v>
<v t="yen.20210612081822.99"><vh>Border colors</vh>
<v t="yen.20210612081822.100"><vh>@color focused-border-focus-color = blue</vh></v>
<v t="yen.20210612081822.101"><vh>@color focused-border-unfocus-color = white</vh></v>
</v>
<v t="yen.20210612081822.102"><vh>Button colors</vh>
<v t="yen.20210612081822.103"><vh>@color run-script-btn-bg = @MistyRose1</vh></v>
<v t="yen.20210612081822.104"><vh>@color debug-script-btn-bg = @MistyRose1</vh></v>
<v t="yen.20210612081822.105"><vh>@color script-button-button-btn-bg = #ffffcc</vh></v>
<v t="yen.20210612081822.106"><vh>@color script-button-btn-bg = @MistyRose1</vh></v>
<v t="yen.20210612081822.107"><vh>@color generic-button-btn-bg = @LightSteelBlue1</vh></v>
<v t="yen.20210612081822.108"><vh>@color quick-move-btn-bg = @LightSteelBlue1</vh></v>
<v t="yen.20210612081822.109"><vh>@color interact-btn-bg = @LightBlue</vh></v>
<v t="yen.20210612081822.110"><vh>@color at-button-btn-bg = @LightSteelBlue1</vh></v>
</v>
<v t="yen.20210612081822.111"><vh>Find tab colors</vh>
<v t="yen.20210612081822.112"><vh>@color find-tab-bg = white</vh></v>
</v>
<v t="yen.20210612081822.113"><vh>Gutter colors</vh>
<v t="yen.20210612081822.114"><vh>@color gutter-bg = @LightSteelBlue1</vh></v>
<v t="yen.20210612081822.115"><vh>@color gutter-fg = black</vh></v>
</v>
<v t="yen.20210612081822.116"><vh>Log pane colors</vh>
<v t="yen.20210612081822.117"><vh>@color log-fg = black</vh></v>
<v t="yen.20210612081822.118"><vh>@color log-bg = white</vh></v>
</v>
<v t="yen.20210612081822.119"><vh>Minibuffer colors</vh>
<v t="yen.20210612081822.120"><vh>@color minibuffer-fg = black</vh></v>
<v t="yen.20210612081822.121"><vh>@color minibuffer-bg = @LightSteelBlue1</vh></v>
<v t="yen.20210612081822.122"><vh>@color minibuffer-sel-fg = white</vh></v>
<v t="yen.20210612081822.123"><vh>@color minibuffer-sel-bg = lightgray</vh></v>
</v>
<v t="yen.20210612081822.124"><vh>Outline colors</vh>
<v t="yen.20210612081822.125"><vh>Basic outline colors</vh>
<v t="yen.20210612081822.126"><vh>@color tree-fg = black</vh></v>
<v t="yen.20210612081822.127"><vh>@color tree-bg = @LeoYellow</vh></v>
</v>
<v t="yen.20210612081822.128"><vh>Colors for headlines that *are* being edited</vh>
<v t="yen.20210612081822.129"><vh>@color head-fg = black</vh></v>
<v t="yen.20210612081822.130"><vh>@color head-bg = white</vh></v>
<v t="yen.20210612081822.131"><vh>@color head-sel-fg = white</vh></v>
<v t="yen.20210612081822.132"><vh>@color head-sel-bg = blue</vh></v>
</v>
<v t="yen.20210612081822.133"><vh>Colors for headlines that are *not* being edited</vh>
<v t="yen.20210612081822.134"><vh>@@string edit-label-border = 2px</vh></v>
<v t="yen.20210612081822.135"><vh>@@string edit-label-margin = 2px</vh></v>
<v t="yen.20210612081822.136"><vh>@color edit-label-bg = @LightSteelBlue1</vh></v>
<v t="yen.20210612081822.137"><vh>@color edit-label-fg = black</vh></v>
</v>
</v>
<v t="yen.20210612081822.138"><vh>Plugin colors (deprecated)</vh>
<v t="yen.20210612081822.139"><vh>@color text-foreground = black</vh></v>
<v t="yen.20210612081822.140"><vh>@color text-foreground-body = @text-foreground</vh></v>
<v t="yen.20210612081822.141"><vh>@color text-foreground-tree = @text-foreground</vh></v>
<v t="yen.20210612081822.142"><vh>@color text-foreground-log = @text-foreground</vh></v>
</v>
<v t="yen.20210612081822.143"><vh>Render pane colors</vh>
<v t="yen.20210612081822.144"><vh>@color render-bg = white</vh></v>
<v t="yen.20210612081822.145"><vh>@color render-fg = black</vh></v>
</v>
<v t="yen.20210612081822.146"><vh>Scroll area colors</vh>
<v t="yen.20210612081822.147"><vh>@color scroll-area-bg = white</vh></v>
</v>
<v t="yen.20210612081822.148"><vh>Splitter colors</vh>
<v t="yen.20210612081822.149"><vh>@color splitter-bg = white</vh></v>
<v t="yen.20210612081822.150"><vh>@color splitter-handle-bg = @LightSteelBlue1</vh></v>
<v t="yen.20210612081822.151"><vh>@color splitter-border-fg = white</vh></v>
<v t="yen.20210612081822.152"><vh>@color splitter-border-style = solid</vh></v>
<v t="yen.20210612081822.153"><vh>@color splitter-hover-bg = @LightSteelBlue1</vh></v>
</v>
<v t="yen.20210612081822.154"><vh>Status area colors</vh>
<v t="yen.20210612081822.155"><vh>@color status-bg = lightgrey</vh></v>
<v t="yen.20210612081822.156"><vh>@color status-fg = black</vh></v>
<v t="yen.20210612081822.157"><vh>@color status-border-style = solid</vh></v>
<v t="yen.20210612081822.158"><vh>@color status-border-color = darkgrey</vh></v>
</v>
<v t="yen.20210612081822.159"><vh>Status area colors for searches</vh>
<v t="yen.20210612081822.160"><vh>@color find-found-bg = blue</vh></v>
<v t="yen.20210612081822.161"><vh>@color find-found-fg = white</vh></v>
<v t="yen.20210612081822.162"><vh>@color find-not-found-bg = red</vh></v>
<v t="yen.20210612081822.163"><vh>@color find-not-found-fg = white</vh></v>
</v>
<v t="yen.20210612081822.164"><vh>Widget colors (simple widgets)</vh>
<v t="yen.20210612081822.165"><vh>@color frame-bg = white</vh></v>
<v t="yen.20210612081822.166"><vh>@color stacked-widget-border-color = white</vh></v>
<v t="yen.20210612081822.167"><vh>@color stacked-widget-bg = white</vh></v>
<v t="yen.20210612081822.168"><vh>@color tabbed-widget-bg = white</vh></v>
</v>
</v>
<v t="yen.20210612081822.169"><vh>Fonts</vh>
<v t="yen.20210612081822.170"><vh>Basic Fonts (change these first)</vh>
<v t="yen.20210612081822.171"><vh>@string font-family = Droid Sans Mono, DejaVu Sans Mono</vh></v>
<v t="yen.20210612081822.172"><vh>@string font-size = 18pt </vh></v>
<v t="yen.20210612081822.173"><vh>@string medium-font-size = 14pt</vh></v>
<v t="yen.20210612081822.174"><vh>@string small-font-size = 14pt</vh></v>
<v t="yen.20210612081822.175"><vh>@string font-style = normal</vh></v>
<v t="yen.20210612081822.176"><vh>@string font-weight = normal</vh></v>
</v>
<v t="yen.20210612081822.177"><vh>Body Fonts</vh>
<v t="yen.20210612081822.178"><vh>@string body-font-family = @font-family</vh></v>
<v t="yen.20210612081822.179"><vh>@string body-font-size = @font-size</vh></v>
<v t="yen.20210612081822.180"><vh>@string body-font-style = @font-style</vh></v>
<v t="yen.20210612081822.181"><vh>@string body-font-weight = @font-weight</vh></v>
<v t="yen.20210612081822.182"><vh>@string font-size-body = @body-font-size</vh></v>
</v>
<v t="yen.20210612081822.183"><vh>Dialog fonts</vh>
<v t="yen.20210612081822.184"><vh>@string dialog-font-family = @font-family</vh></v>
<v t="yen.20210612081822.185"><vh>@string dialog-font-size = @font-size</vh></v>
<v t="yen.20210612081822.186"><vh>@string dialog-font-weight = @font-weight </vh></v>
<v t="yen.20210612081822.187"><vh>@string dialog-font-style = @font-style</vh></v>
</v>
<v t="yen.20210612081822.188"><vh>Find Panel Fonts</vh>
<v t="yen.20210612081822.189"><vh>@string checkbox-font-family = @font-family</vh></v>
<v t="yen.20210612081822.190"><vh>@string checkbox-font-size = @medium-font-size</vh></v>
<v t="yen.20210612081822.191"><vh>@string find-font-family = @font-family</vh></v>
<v t="yen.20210612081822.192"><vh>@string find-font-size = @medium-font-size</vh></v>
<v t="yen.20210612081822.193"><vh>@string find-font-style = @font-style</vh></v>
<v t="yen.20210612081822.194"><vh>@string find-font-weight = @font-weight</vh></v>
<v t="yen.20210612081822.195"><vh>@string find-pattern-font-family = @font-family</vh></v>
</v>
<v t="yen.20210612081822.196"><vh>Gutter Fonts</vh>
<v t="yen.20210612081822.197"><vh>@string gutter-font-family = @font-family</vh></v>
<v t="yen.20210612081822.198"><vh>@string gutter-font-size = @small-font-size</vh></v>
<v t="yen.20210612081822.199"><vh>@string gutter-font-style = @font-style</vh></v>
<v t="yen.20210612081822.200"><vh>@string gutter-font-weight = @font-weight</vh></v>
</v>
<v t="yen.20210612081822.201"><vh>Log pane fonts</vh>
<v t="yen.20210612081822.202"><vh>@string log-sel-fg = white</vh></v>
<v t="yen.20210612081822.203"><vh>@string log-sel-bg = blue</vh></v>
<v t="yen.20210612081822.204"><vh>@string log-font-family = @font-family</vh></v>
<v t="yen.20210612081822.205"><vh>@string log-font-size = @font-size</vh></v>
<v t="yen.20210612081822.206"><vh>@string log-font-weight = @font-weight</vh></v>
<v t="yen.20210612081822.207"><vh>@string log-font-style = @font-style</vh></v>
</v>
<v t="yen.20210612081822.208"><vh>Minibuffer fonts</vh>
<v t="yen.20210612081822.209"><vh>@string minibuffer-font-family = @font-family</vh></v>
<v t="yen.20210612081822.210"><vh>@string minibuffer-font-size = @font-size</vh></v>
<v t="yen.20210612081822.211"><vh>@string minibuffer-font-weight = @font-weight</vh></v>
<v t="yen.20210612081822.212"><vh>@string minibuffer-font-style = @font-style</vh></v>
</v>
<v t="yen.20210612081822.213"><vh>Outline pane fonts</vh>
<v t="yen.20210612081822.214"><vh>Basic outline fonts</vh>
<v t="yen.20210612081822.215"><vh>@string tree-font-family = @font-family</vh></v>
<v t="yen.20210612081822.216"><vh>@string tree-font-size = @font-size</vh></v>
<v t="yen.20210612081822.217"><vh>@string tree-font-weight = @font-weight</vh></v>
<v t="yen.20210612081822.218"><vh>@string tree-font-style = @font-style</vh></v>
</v>
<v t="yen.20210612081822.219"><vh>Fonts for headlines that *are* being edited</vh>
<v t="yen.20210612081822.220"><vh>@string head-font-family = @font-family</vh></v>
<v t="yen.20210612081822.221"><vh>@string head-font-size = @font-size</vh></v>
<v t="yen.20210612081822.222"><vh>@string head-font-weight = @font-weight</vh></v>
<v t="yen.20210612081822.223"><vh>@string head-font-style = @font-style</vh></v>
</v>
<v t="yen.20210612081822.224"><vh>Fonts for headlines that are *not* being edited</vh>
<v t="yen.20210612081822.225"><vh>@string edit-label-font-family = @font-family</vh></v>
<v t="yen.20210612081822.226"><vh>@string edit-label-font-size = @font-size</vh></v>
<v t="yen.20210612081822.227"><vh>@string edit-label-font-weight = @font-weight</vh></v>
<v t="yen.20210612081822.228"><vh>@string edit-label-font-style = @font-style</vh></v>
</v>
</v>
<v t="yen.20210612081822.229"><vh>Status area fonts</vh>
<v t="yen.20210612081822.230"><vh>@string status-font-family = @font-family</vh></v>
<v t="yen.20210612081822.231"><vh>@string status-font-size = @small-font-size</vh></v>
<v t="yen.20210612081822.232"><vh>@string status-font-weight = @font-weight</vh></v>
<v t="yen.20210612081822.233"><vh>@string status-font-style = @font-style</vh></v>
</v>
</v>
<v t="yen.20210612081822.234"><vh>Margins &amp; borders</vh>
<v t="yen.20210612081822.235"><vh>Dialogs styles</vh>
<v t="yen.20210612081822.236"><vh>@string dialog-border = 2px</vh></v>
<v t="yen.20210612081822.237"><vh>@string dialog-margin = 2px</vh></v>
</v>
<v t="yen.20210612081822.238"><vh>Focus border styles</vh>
<v t="yen.20210612081822.239"><vh>@string focused-border-style = solid</vh></v>
<v t="yen.20210612081822.240"><vh>@string focused-border-width = 3px</vh></v>
</v>
<v t="yen.20210612081822.241"><vh>Gutter</vh>
<v t="yen.20210612081822.242"><vh>@bool use-gutter = True</vh></v>
<v t="yen.20210612081822.243"><vh>@int gutter-w-adjust = 12</vh></v>
<v t="yen.20210612081822.244"><vh>@int gutter-y-adjust = 10</vh></v>
</v>
<v t="yen.20210612081822.245"><vh>Minibuffer styles</vh>
<v t="yen.20210612081822.246"><vh>@string minibuffer-border = 2px</vh></v>
<v t="yen.20210612081822.247"><vh>@string minibuffer-margin = 2px</vh></v>
</v>
<v t="yen.20210612081822.248"><vh>Stacked widgets styles</vh>
<v t="yen.20210612081822.249"><vh>@string stacked-widget-padding = 0px</vh></v>
</v>
<v t="yen.20210612081822.250"><vh>Status area styles</vh>
<v t="yen.20210612081822.251"><vh>@string status-border-width = 1px</vh></v>
</v>
<v t="yen.20210612081822.252"><vh>Vim mode borders/colors</vh>
<v t="yen.20210612081822.253"><vh>@string vim-mode-normal-border = border: 3px solid white</vh></v>
<v t="yen.20210612081822.254"><vh>@string vim-mode-insert-border = border: 3px solid red</vh></v>
<v t="yen.20210612081822.255"><vh>@string vim-mode-visual-border = border: 3px solid gray</vh></v>
<v t="yen.20210612081822.256"><vh>@string vim-mode-unfocused-border = border: 3px dashed white</vh></v>
</v>
</v>
<v t="yen.20210612081822.257"><vh>Outline indicators</vh>
<v t="yen.20210612081822.258"><vh>@string tree-image-closed = None</vh></v>
<v t="yen.20210612081822.259"><vh>@string tree-image-open = None</vh></v>
<v t="yen.20210612081822.260"><vh>@int tree-icon-separation = 1</vh></v>
</v>
<v t="yen.20210612081822.261"><vh>Plugins</vh>
<v t="yen.20210612081822.262"><vh>bookmarks.py plugin</vh>
<v t="yen.20210612081822.263"><vh>bookmarks base</vh>
<v t="yen.20210612081822.264"><vh>@color bookmarks-base-color = @text-foreground</vh></v>
<v t="yen.20210612081822.265"><vh>@string bookmarks-base-border = "none"</vh></v>
<v t="yen.20210612081822.266"><vh>@string bookmarks-base-decoration = "none"</vh></v>
<v t="yen.20210612081822.267"><vh>@string bookmarks-base-family = @font-family</vh></v>
<v t="yen.20210612081822.268"><vh>@string bookmarks-base-margin = 0</vh></v>
<v t="yen.20210612081822.269"><vh>@string bookmarks-base-padding = 1</vh></v>
<v t="yen.20210612081822.270"><vh>@string bookmarks-base-size = @bookmarks-font-size</vh></v>
<v t="yen.20210612081822.271"><vh>@string bookmarks-base-style = normal</vh></v>
<v t="yen.20210612081822.272"><vh>@string bookmarks-base-weight = regular</vh></v>
</v>
<v t="yen.20210612081822.273"><vh>bookmarks children</vh>
<v t="yen.20210612081822.274"><vh>@color bookmarks-children-color = @text-foreground</vh></v>
<v t="yen.20210612081822.275"><vh>@string bookmarks-children-decoration = underline</vh></v>
<v t="yen.20210612081822.276"><vh>@string bookmarks-children-family = @font-family</vh></v>
<v t="yen.20210612081822.277"><vh>@string bookmarks-children-size = ignore</vh></v>
<v t="yen.20210612081822.278"><vh>@string bookmarks-children-style = ignore</vh></v>
<v t="yen.20210612081822.279"><vh>@string bookmarks-children-weight = ignore</vh></v>
</v>
<v t="yen.20210612081822.280"><vh>bookmarks current</vh>
<v t="yen.20210612081822.281"><vh>@color bookmarks-current-color = blue</vh></v>
<v t="yen.20210612081822.282"><vh>@string bookmarks-current-decoration = "none"</vh></v>
<v t="yen.20210612081822.283"><vh>@string bookmarks-current-size = @bookmarks-font-size</vh></v>
<v t="yen.20210612081822.284"><vh>@string bookmarks-current-style = "none"</vh></v>
<v t="yen.20210612081822.285"><vh>@string bookmarks-current-weight = bold</vh></v>
</v>
<v t="yen.20210612081822.286"><vh>bookmarks expanded</vh>
<v t="yen.20210612081822.287"><vh>@color bookmarks-expanded-color = @text-foreground</vh></v>
<v t="yen.20210612081822.288"><vh>@string bookmarks-expanded-decoration = underline</vh></v>
<v t="yen.20210612081822.289"><vh>@string bookmarks-expanded-size = ignore</vh></v>
<v t="yen.20210612081822.290"><vh>@string bookmarks-expanded-style = ignore</vh></v>
<v t="yen.20210612081822.291"><vh>@string bookmarks-expanded-weight = bold</vh></v>
<v t="yen.20210612081822.292"><vh>@string bookmarks-font-size = 11pt</vh></v>
</v>
</v>
<v t="yen.20210612081822.293"><vh>screencast.py plugin</vh>
<v t="yen.20210612081822.294"><vh>@string screencast-bg = yellow</vh></v>
<v t="yen.20210612081822.295"><vh>@string screencast-font-family = Times New Roman</vh></v>
<v t="yen.20210612081822.296"><vh>@string screencaset-font-size = 18pt</vh></v>
<v t="yen.20210612081822.297"><vh>@string screencast-font-weight = normal</vh></v>
<v t="yen.20210612081822.298"><vh>@string screencaset-font-style = normal</vh></v>
</v>
</v>
</v>
<v t="yen.20210612081822.299"><vh>Qt Gui style sheet</vh>
<v t="yen.20210612081822.300"><vh>@data qt-gui-plugin-style-sheet</vh>
<v t="yen.20210612081822.301"><vh>Body pane</vh></v>
<v t="yen.20210612081822.302"><vh>Buttons</vh></v>
<v t="yen.20210612081822.303"><vh>Dialogs (QLabel)</vh></v>
<v t="yen.20210612081822.304"><vh>Find Tab</vh></v>
<v t="yen.20210612081822.305"><vh>Gutter</vh></v>
<v t="yen.20210612081822.306"><vh>Log panes</vh></v>
<v t="yen.20210612081822.307"><vh>Minibuffer</vh></v>
<v t="yen.20210612081822.308"><vh>Outline pane (change default path)</vh></v>
<v t="yen.20210612081822.309"><vh>Plugins</vh>
<v t="yen.20210612081822.310"><vh>Bookmarks plugin (stylesheet)</vh></v>
<v t="yen.20210612081822.311"><vh>Screencast plugin</vh></v>
<v t="yen.20210612081822.312"><vh>Interact plugin</vh></v>
<v t="yen.20210612081822.313"><vh>Quickmove plugin</vh></v>
</v>
<v t="yen.20210612081822.314"><vh>Rendering pane</vh></v>
<v t="yen.20210612081822.315"><vh>Splitter</vh></v>
<v t="yen.20210612081822.316"><vh>Status areas</vh></v>
<v t="yen.20210612081822.317"><vh>Widgets</vh></v>
<v t="yen.20210612081822.318"><vh>zz Must be last</vh></v>
</v>
</v>
<v t="yen.20210612081822.319"><vh>User Qt Gui style sheet</vh>
<v t="yen.20210612081822.320"><vh>@ignore @data qt-gui-user-style-sheet</vh></v>
</v>
</v>
<v t="yen.20210612081822.321"><vh>Autocompleter</vh>
<v t="yen.20210612081822.322"><vh>@int auto-justify = 0</vh></v>
<v t="yen.20210612081822.323"><vh>@bool auto-tab-complete = True</vh></v>
<v t="yen.20210612081822.324"><vh>@bool autocomplete-brackets = False</vh></v>
<v t="yen.20210612081822.325"><vh>@bool enable-calltips-initially = False</vh></v>
<v t="yen.20210612081822.326"><vh>@bool forbid-invalid-completions = False</vh></v>
<v t="yen.20210612081822.327"><vh>@bool use-jedi = False</vh></v>
<v t="yen.20210612081822.328"><vh>@bool use-qcompleter = True</vh></v>
</v>
<v t="yen.20210612081822.329"><vh>Bracket matching</vh>
<v t="yen.20210612081822.330"><vh>@bool flash-matching-brackets = True</vh></v>
<v t="yen.20210612081822.331"><vh>@color flash-brackets-background-color = DodgerBlue1</vh></v>
<v t="yen.20210612081822.332"><vh>@color flash-brackets-foreground-color = white</vh></v>
<v t="yen.20210612081822.333"><vh>@int flash-brackets-count = 2</vh></v>
<v t="yen.20210612081822.334"><vh>@int flash-brackets-delay = 75</vh></v>
</v>
<v t="yen.20210612081822.335"><vh>Chapters</vh>
<v t="yen.20210612081822.336"><vh>@bool use-chapter-tabs = True</vh></v>
<v t="yen.20210612081822.337"><vh>@bool use-chapters = True</vh></v>
</v>
<v t="yen.20210612081822.338"><vh>Command options</vh>
<v t="yen.20210612081822.339"><vh>@bool find-def-creates-clones = False</vh></v>
<v t="yen.20210612081822.340"><vh>@bool force-execute-entire-body = False</vh></v>
<v t="yen.20210612081822.341"><vh>@bool indent-added-comments = True</vh></v>
<v t="yen.20210612081822.342"><vh>@bool make-node-conflicts-node = True</vh></v>
<v t="yen.20210612081822.343"><vh>@bool show-tips = True</vh></v>
<v t="yen.20210612081822.344"><vh>@bool warn-about-missing-settings = False</vh></v>
<v t="yen.20210612081822.345"><vh>@data history-list</vh></v>
<v t="yen.20210612081822.346"><vh>@int max-find-long-lines-length = 110</vh></v>
<v t="yen.20210612081822.347"><vh>@int print-settings-at-data-limit = 20</vh></v>
<v t="yen.20210612081822.348"><vh>@string remove-sentinels-extension = .txt</vh></v>
<v t="yen.20210612081822.349"><vh>Beautify command settings</vh>
<v t="yen.20210612081822.350"><vh>@bool beautify-allow-joined-strings = False</vh></v>
<v t="yen.20210612081822.351"><vh>@int beautify-max-join-line-length = 80</vh></v>
<v t="yen.20210612081822.352"><vh>@int beautify-max-split-line-length = 88</vh></v>
</v>
<v t="yen.20210612081822.353"><vh>Bracket matching settings</vh>
<v t="yen.20210612081822.354"><vh>@string close-flash-brackets = )]}</vh></v>
<v t="yen.20210612081822.355"><vh>@string open-flash-brackets = ([{</vh></v>
</v>
<v t="yen.20210612081822.356"><vh>c-to-python settings</vh>
<v t="yen.20210612081822.357"><vh>@data c-to-python-class-list</vh></v>
<v t="yen.20210612081822.358"><vh>@data c-to-python-type-list</vh></v>
<v t="yen.20210612081822.359"><vh>@data c-to-python-ivars-dict</vh></v>
</v>
<v t="yen.20210612081822.360"><vh>Emacs-like commands settings</vh>
<v t="yen.20210612081822.361"><vh>@bool add-ws-to-kill-ring = False</vh></v>
<v t="yen.20210612081822.362"><vh>@bool globalDynamicAbbrevs = True</vh></v>
</v>
<v t="yen.20210612081822.363"><vh>Headline commands settings</vh>
<v t="yen.20210612081822.364"><vh>@bool headline-gmt-time = False</vh></v>
<v t="yen.20210612081822.365"><vh>@string headline-time-format-string = %m/%d</vh></v>
</v>
<v t="yen.20210612081822.366"><vh>make-stub-files settings</vh>
<v t="yen.20210612081822.367"><vh>@bool stub-overwrite = False</vh></v>
<v t="yen.20210612081822.368"><vh>@bool stub-trace-matches = False</vh></v>
<v t="yen.20210612081822.369"><vh>@bool stub-trace-patterns = False</vh></v>
<v t="yen.20210612081822.370"><vh>@bool stub-trace-reduce = False</vh></v>
<v t="yen.20210612081822.371"><vh>@bool stub-trace-visitors = False</vh></v>
<v t="yen.20210612081822.372"><vh>@bool stub-update = False</vh></v>
<v t="yen.20210612081822.373"><vh>@bool stub-verbose = False</vh></v>
<v t="yen.20210612081822.374"><vh>@bool stub-warn = False</vh></v>
<v t="yen.20210612081822.375"><vh>@data stub-def-name-patterns</vh></v>
<v t="yen.20210612081822.376"><vh>@data stub-general-patterns</vh></v>
<v t="yen.20210612081822.377"><vh>@data stub-prefix-lines</vh></v>
<v t="yen.20210612081822.378"><vh>@data stub-regex-patterns</vh></v>
<v t="yen.20210612081822.379"><vh>@string stub-output-directory = ~/stubs</vh></v>
</v>
<v t="yen.20210612081822.380"><vh>python-to-coffeescript settings</vh>
<v t="yen.20210612081822.381"><vh>@bool py2cs-overwrite = True</vh></v>
<v t="yen.20210612081822.382"><vh>@string py2cs-output-directory = ~/py2cs</vh></v>
</v>
<v t="yen.20210612081822.383"><vh>rst3 command settings</vh>
<v t="yen.20210612081822.384"><vh>rst3 http options</vh>
<v t="yen.20210612081822.385"><vh>@bool rst3-clear-http-attributes = False</vh></v>
<v t="yen.20210612081822.386"><vh>@bool rst3-http-server-support = False</vh></v>
<v t="yen.20210612081822.387"><vh>@string rst3-http-attributename = rst-http-attribute</vh></v>
<v t="yen.20210612081822.388"><vh>@string rst3-node-begin-marker = http-node-marker-</vh></v>
</v>
<v t="yen.20210612081822.389"><vh>rst3 path options</vh>
<v t="yen.20210612081822.390"><vh>@string rst3-write-intermediate-extension = .txt</vh></v>
<v t="yen.20210612081822.391"><vh>@string rst3-default-path = None</vh></v>
<v t="yen.20210612081822.392"><vh>@string rst3-stylesheet-name = default.css</vh></v>
<v t="yen.20210612081822.393"><vh>@string rst3-stylesheet-path = None</vh></v>
<v t="yen.20210612081822.394"><vh>@string rst3-publish-argv-for-missing-stylesheets = None</vh></v>
</v>
<v t="yen.20210612081822.395"><vh>rst3 global options</vh>
<v t="yen.20210612081822.396"><vh>@bool rst3-call-docutils = True</vh></v>
<v t="yen.20210612081822.397"><vh>@bool rst3-number-code-lines = True</vh></v>
<v t="yen.20210612081822.398"><vh>@string rst3-underline-characters = #=+*^~`-:&gt;&lt;-</vh></v>
<v t="yen.20210612081822.399"><vh>@bool rst3-verbose = True</vh></v>
<v t="yen.20210612081822.400"><vh>@bool rst3-write-intermediate-file = True</vh></v>
</v>
<v t="yen.20210612081822.401"><vh>rst3 mode options</vh>
<v t="yen.20210612081822.402"><vh>@bool rst3-code-mode = False</vh></v>
<v t="yen.20210612081822.403"><vh>@bool rst3-doc-only-mode = False</vh></v>
<v t="yen.20210612081822.404"><vh>@bool rst3-generate-rst = True</vh></v>
<v t="yen.20210612081822.405"><vh>@bool rst3-generate-rst-header-comment = True</vh></v>
</v>
<v t="yen.20210612081822.406"><vh>rst3 formatting options</vh>
<v t="yen.20210612081822.407"><vh>@bool rst3-show-headlines = True</vh></v>
<v t="yen.20210612081822.408"><vh>@bool rst3-show-organizer-nodes = True</vh></v>
<v t="yen.20210612081822.409"><vh>@bool rst3-show-options-nodes = False</vh></v>
<v t="yen.20210612081822.410"><vh>@bool rst3-strip-at-file-prefixes = True</vh></v>
</v>
<v t="yen.20210612081822.411"><vh>rst3 formatting options (code mode only)</vh>
<v t="yen.20210612081822.412"><vh>@bool rst3-show-doc-parts-as-paragraphs = False</vh></v>
<v t="yen.20210612081822.413"><vh>@bool rst3-show-leo-directives = True</vh></v>
<v t="yen.20210612081822.414"><vh>@bool rst3-show-markup-doc-parts = False</vh></v>
<v t="yen.20210612081822.415"><vh>@bool rst3-show-options-doc-parts = False</vh></v>
<v t="yen.20210612081822.416"><vh>@@string rst3_code_block_string = \n.. class:: code\n..\n\n::\n</vh></v>
</v>
</v>
<v t="yen.20210612081822.417"><vh>Undo settings</vh>
<v t="yen.20210612081822.418"><vh>@bool save-clears-undo-buffer = False</vh></v>
<v t="yen.20210612081822.419"><vh>@int max-undo-stack-size = 0</vh></v>
<v t="yen.20210612081822.420"><vh>@string undo-granularity = None</vh></v>
</v>
</v>
<v t="yen.20210612081822.421"><vh>Common @button nodes</vh>
<v t="yen.20210612081822.422"><vh>@buttons</vh></v>
</v>
<v t="yen.20210612081822.423"><vh>Common @command nodes</vh>
<v t="yen.20210612081822.424"><vh>@commands</vh></v>
</v>
<v t="yen.20210612081822.425"><vh>Debugger</vh>
<v t="yen.20210612081822.426"><vh>@bool write-script-file = True</vh></v>
<v t="yen.20210612081822.427"><vh>@@string script_file_path = ../test/scriptFile.py</vh></v>
<v t="yen.20210612081822.428"><vh>@string debugger-kind = winpdb</vh></v>
<v t="yen.20210612081822.429"><vh>@string debugger-path = None</vh></v>
</v>
<v t="yen.20210612081822.430"><vh>Declutter</vh>
<v t="yen.20210612081822.431"><vh>@bool tree-declutter = False</vh></v>
<v t="yen.20210612081822.432"><vh>@data tree-declutter-patterns</vh>
<v t="yen.20210612081822.433"><vh> About Decluttering</vh>
<v t="yen.20210612081822.434"><vh>Rule &amp; replacement lines</vh></v>
<v t="yen.20210612081822.435"><vh>Style lines</vh></v>
</v>
<v t="yen.20210612081822.436"><vh>declutter: add icon to folders and remove...</vh></v>
<v t="yen.20210612081822.437"><vh>declutter: demo pattern</vh></v>
<v t="yen.20210612081822.438"><vh>declutter: hide org-mode tags</vh></v>
<v t="yen.20210612081822.439"><vh>declutter: replace @&lt;file&gt; with an icon</vh></v>
<v t="yen.20210612081822.440"><vh>declutter: show last part of long filenames</vh></v>
</v>
</v>
<v t="yen.20210612081822.441"><vh>Editing</vh>
<v t="yen.20210612081822.442"><vh>@int autojustify = 78</vh></v>
<v t="yen.20210612081822.443"><vh>@bool autojustify-on-at-start = False</vh></v>
<v t="yen.20210612081822.444"><vh>@string external-editor</vh></v>
</v>
<v t="yen.20210612081822.445"><vh>Files &amp; directories</vh>
<v t="yen.20210612081822.446"><vh>@bool chdir-to-relative-path = False</vh></v>
<v t="yen.20210612081822.447"><vh>@bool create-at-persistence-nodes-automatically = False</vh></v>
<v t="yen.20210612081822.448"><vh>@bool create-nonexistent-directories = False</vh></v>
<v t="yen.20210612081822.449"><vh>@bool log-show-save-time = False</vh></v>
<v t="yen.20210612081822.450"><vh>@bool report-unchanged-files = True</vh></v>
<v t="yen.20210612081822.451"><vh>@string initial-chooser-directory = None</vh></v>
<v t="yen.20210612081822.452"><vh>@string log-timestamp-format = %H:%M:%S</vh></v>
<v t="yen.20210612081822.453"><vh>@string relative-path-base-directory = .</vh></v>
<v t="yen.20210612081822.454"><vh>@string script-file-path = None</vh></v>
<v t="yen.20210612081822.455"><vh>Checking files</vh>
<v t="yen.20210612081822.456"><vh>@bool at-auto-warns-about-leading-whitespace = True</vh></v>
<v t="yen.20210612081822.457"><vh>@bool check-for-changed-external-files = True</vh></v>
<v t="yen.20210612081822.458"><vh>@bool check-python-code-on-write = True</vh></v>
<v t="yen.20210612081822.459"><vh>@bool run-pyflakes-on-write = False</vh></v>
<v t="yen.20210612081822.460"><vh>@bool verbose-check-outline = False</vh></v>
<v t="yen.20210612081822.461"><vh>@bool syntax-error-popup = False</vh></v>
</v>
<v t="yen.20210612081822.462"><vh>External files</vh>
<v t="yen.20210612081822.463"><vh>@bool at-root-bodies-start-in-doc-mode = True</vh></v>
<v t="yen.20210612081822.464"><vh>@bool force-newlines-in-at-nosent-bodies = True</vh></v>
<v t="yen.20210612081822.465"><vh>@string output-newline = nl</vh></v>
<v t="yen.20210612081822.466"><vh>@string underindent-escape-string = \\-</vh></v>
</v>
<v t="yen.20210612081822.467"><vh>Leo files</vh>
<v t="yen.20210612081822.468"><vh>@string output-initial-comment = None</vh></v>
<v t="yen.20210612081822.469"><vh>@string stylesheet = </vh></v>
<v t="yen.20210612081822.470"><vh>@string default-leo-file = ~/.leo/workbook.leo</vh></v>
<v t="yen.20210612081822.471"><vh>@string default-leo-extension = .leo</vh></v>
</v>
<v t="yen.20210612081822.472"><vh>Recent files</vh>
<v t="yen.20210612081822.473"><vh>@bool recent-files-group = False</vh></v>
<v t="yen.20210612081822.474"><vh>@bool recent-files-group-always = False</vh></v>
<v t="yen.20210612081822.475"><vh>@data path-demangle</vh></v>
</v>
<v t="yen.20210612081822.476"><vh>Shadow files</vh>
<v t="yen.20210612081822.477"><vh>@bool shadow-in-home-dir = False</vh></v>
<v t="yen.20210612081822.478"><vh>@string shadow-prefix = x</vh></v>
<v t="yen.20210612081822.479"><vh>@string shadow-subdir = .leo_shadow</vh></v>
</v>
</v>
<v t="yen.20210612081822.480"><vh>Find/replace options</vh>
<v t="yen.20210612081822.481"><vh>@bool auto-scroll-find-tab = True</vh></v>
<v t="yen.20210612081822.482"><vh>@bool find-ignore-duplicates = False</vh></v>
<v t="yen.20210612081822.483"><vh>@bool minibuffer-find-mode = False</vh></v>
<v t="yen.20210612081822.484"><vh>@bool show-find-result-in-status = True</vh></v>
<v t="yen.20210612081822.485"><vh>@bool preload-find-pattern = False</vh></v>
<v t="yen.20210612081822.486"><vh>@bool use-find-dialog = False</vh></v>
<v t="yen.20210612081822.487"><vh>@string change-text = None</vh></v>
<v t="yen.20210612081822.488"><vh>@string find-text = None</vh></v>
<v t="yen.20210612081822.489"><vh>Find panel defaults</vh>
<v t="yen.20210612081822.490"><vh>Checkboxes in the Find panel</vh>
<v t="yen.20210612081822.491"><vh>@bool batch = False</vh></v>
<v t="yen.20210612081822.492"><vh>@bool ignore-case = True</vh></v>
<v t="yen.20210612081822.493"><vh>@bool mark-changes = False</vh></v>
<v t="yen.20210612081822.494"><vh>@bool mark-finds = False</vh></v>
<v t="yen.20210612081822.495"><vh>@bool reverse = False</vh></v>
<v t="yen.20210612081822.496"><vh>@bool pattern-match = False</vh></v>
<v t="yen.20210612081822.497"><vh>@bool search-body = True</vh></v>
<v t="yen.20210612081822.498"><vh>@bool search-headline = True</vh></v>
<v t="yen.20210612081822.499"><vh>@bool whole-word = False</vh></v>
<v t="yen.20210612081822.500"><vh>@bool wrap = False</vh></v>
</v>
<v t="yen.20210612081822.501"><vh>Radio buttons in the Find panel</vh>
<v t="yen.20210612081822.502"><vh>@bool node-only = False</vh></v>
<v t="yen.20210612081822.503"><vh>@bool suboutline-only = False</vh></v>
</v>
</v>
</v>
<v t="yen.20210612081822.504"><vh>Import options</vh>
<v t="yen.20210612081822.505"><vh>@bool add-context-to-headlines = True</vh></v>
<v t="yen.20210612081822.506"><vh>@bool add-file-context-to-headlines = True</vh></v>
<v t="yen.20210612081822.507"><vh>@bool put-cython-decorators-in-imported-headlines = False</vh></v>
<v t="yen.20210612081822.508"><vh>@bool put-python-decorators-in-imported-headlines = False</vh></v>
<v t="yen.20210612081822.509"><vh>@bool suppress-import-parsing = False</vh></v>
<v t="yen.20210612081822.510"><vh>@data c-import-typedefs</vh></v>
<v t="yen.20210612081822.511"><vh>@data import-html-tags</vh></v>
<v t="yen.20210612081822.512"><vh>@data import-xml-tags</vh></v>
<v t="yen.20210612081822.513"><vh>zim importer options</vh>
<v t="yen.20210612081822.514"><vh>@int zim-rst-level = 0</vh></v>
<v t="yen.20210612081822.515"><vh>@string path-to-zim = None</vh></v>
<v t="yen.20210612081822.516"><vh>@string zim-node-name = Imported Zim Tree</vh></v>
<v t="yen.20210612081822.517"><vh>@string zim-rst-type = rst</vh></v>
</v>
</v>
<v t="yen.20210612081822.518"><vh>Keyboard and minibuffer options</vh>
<v t="yen.20210612081822.519"><vh>@bool enable-alt-ctrl-bindings = True</vh></v>
<v t="yen.20210612081822.520"><vh>@bool ignore-unbound-non-ascii-keys = False</vh></v>
<v t="yen.20210612081822.521"><vh>@bool plain-key-outline-search = True</vh></v>
<v t="yen.20210612081822.522"><vh>@bool replace-meta-with-alt = False</vh></v>
<v t="yen.20210612081822.523"><vh>@bool showHelpWhenEnteringModes = False</vh></v>
<v t="yen.20210612081822.524"><vh>@bool smart-quotes = False</vh></v>
<v t="yen.20210612081822.525"><vh>@bool use-german-keyboard = False</vh></v>
<v t="yen.20210612081822.526"><vh>@bool vim-mode = False</vh></v>
<v t="yen.20210612081822.527"><vh>@bool warn-about-redefined-shortcuts = True</vh></v>
<v t="yen.20210612081822.528"><vh>@string default-editing-state = insert</vh></v>
<v t="yen.20210612081822.529"><vh>@string top-level-unbound-key-action = insert</vh></v>
<v t="yen.20210612081822.530"><vh>@strings  [command,insert, overwrite] top_level_unbound_key_action = insert</vh></v>
</v>
<v t="yen.20210612081822.531"><vh>Keyboard shortcuts</vh>
<v t="yen.20210612081822.532"><vh>About keyboard shortcuts</vh>
<v t="yen.20210612081822.533"><vh>About shortcut specifiers</vh></v>
<v t="yen.20210612081822.534"><vh>Reference for function keys</vh></v>
</v>
<v t="yen.20210612081822.535"><vh>About modes</vh></v>
<v t="yen.20210612081822.536"><vh>About vim-like bindings</vh></v>
<v t="yen.20210612081822.537"><vh>Commands for mouseless Leo</vh></v>
<v t="yen.20210612081822.538"><vh>@keys EKR bindings</vh>
<v t="yen.20210612081822.539"><vh>@@shortcuts  Vim plain keys</vh></v>
<v t="yen.20210612081822.540"><vh>@mode quick-command :: quick command</vh></v>
<v t="yen.20210612081822.541"><vh>@shortcuts Arrow keys and the &lt;return&gt; key</vh></v>
<v t="yen.20210612081822.542"><vh>@shortcuts Changes</vh></v>
<v t="yen.20210612081822.543"><vh>@shortcuts Cursor Moves</vh></v>
<v t="yen.20210612081822.544"><vh>@shortcuts Default plugins</vh></v>
<v t="yen.20210612081822.545"><vh>@shortcuts Duplicate bindings for Qt</vh></v>
<v t="yen.20210612081822.546"><vh>@shortcuts F-Keys</vh></v>
<v t="yen.20210612081822.547"><vh>@shortcuts File commands</vh></v>
<v t="yen.20210612081822.548"><vh>@shortcuts Find commands</vh></v>
<v t="yen.20210612081822.549"><vh>@shortcuts Gui operations</vh></v>
<v t="yen.20210612081822.550"><vh>@shortcuts IPython commands</vh></v>
<v t="yen.20210612081822.551"><vh>@shortcuts Menu commands</vh></v>
<v t="yen.20210612081822.552"><vh>@shortcuts Minibuffer commands</vh></v>
<v t="yen.20210612081822.553"><vh>@shortcuts Other commands</vh></v>
<v t="yen.20210612081822.554"><vh>@shortcuts Outline operations</vh></v>
<v t="yen.20210612081822.555"><vh>@shortcuts Plugin-related commands </vh></v>
<v t="yen.20210612081822.556"><vh>@shortcuts Text operations</vh></v>
</v>
<v t="yen.20210612081822.557"><vh>@ignore Unused key bindings</vh>
<v t="yen.20210612081822.558"><vh>Vim emulation</vh>
<v t="yen.20210612081822.559"><vh>@strings  [ignore,insert, overwrite] top_level_unbound_key_action = ignore</vh></v>
<v t="yen.20210612081822.560"><vh>@keys Vim bindings</vh>
<v t="yen.20210612081822.561"><vh>Vim User Documentation</vh></v>
<v t="yen.20210612081822.562"><vh>Vim History</vh></v>
<v t="yen.20210612081822.563"><vh>Vim Developer Documentation</vh></v>
<v t="yen.20210612081822.564"><vh>Vim settings</vh>
<v t="yen.20210612081822.565"><vh>@strings [command,insert, overwrite] top_level_unbound_key_action = command</vh></v>
<v t="yen.20210612081822.566"><vh>@bool outline-pane-has-initial-focus = True</vh></v>
<v t="yen.20210612081822.567"><vh>@bool stayInTreeAfterSelect = True</vh></v>
</v>
<v t="yen.20210612081822.568"><vh>@shortcuts - vi miscellaneous</vh>
<v t="yen.20210612081822.569"><vh>@mode tree-undo</vh></v>
<v t="yen.20210612081822.570"><vh>@mode tree-redo</vh></v>
<v t="yen.20210612081822.571"><vh>@mode focus-to-tree</vh></v>
<v t="yen.20210612081822.572"><vh>@mode focus-to-body</vh></v>
<v t="yen.20210612081822.573"><vh>@mode body-command-line</vh>
<v t="yen.20210612081822.574"><vh>@mode body-command-revert</vh></v>
<v t="yen.20210612081822.575"><vh>@mode body-command-save</vh>
<v t="yen.20210612081822.576"><vh>@mode body-command-save-quit</vh>
<v t="yen.20210612081822.577"><vh>@mode body-command-save-quit-return</vh></v>
</v>
</v>
<v t="yen.20210612081822.578"><vh>@mode body-command-quit</vh></v>
</v>
<v t="yen.20210612081822.579"><vh>@mode tree-command-line</vh>
<v t="yen.20210612081822.580"><vh>@mode tree-command-revert</vh></v>
<v t="yen.20210612081822.581"><vh>@mode tree-command-save</vh>
<v t="yen.20210612081822.582"><vh>@mode tree-command-save-only</vh></v>
<v t="yen.20210612081822.583"><vh>@mode tree-command-save-quit</vh>
<v t="yen.20210612081822.584"><vh>@mode tree-command-save-quit-return</vh></v>
</v>
</v>
<v t="yen.20210612081822.585"><vh>@mode tree-command-quit</vh></v>
</v>
<v t="yen.20210612081822.586"><vh>@mode body-shift-z</vh>
<v t="yen.20210612081822.587"><vh>@mode body-shift-z-save-quit</vh></v>
</v>
</v>
<v t="yen.20210612081822.588"><vh>@shortcuts - vi in Outline pane</vh>
<v t="yen.20210612081822.589"><vh>@mode tree-yank-object</vh></v>
<v t="yen.20210612081822.590"><vh>@mode tree-change-object</vh></v>
<v t="yen.20210612081822.591"><vh>@mode tree-delete-text-object</vh></v>
<v t="yen.20210612081822.592"><vh>@mode tree-copy-node</vh></v>
<v t="yen.20210612081822.593"><vh>@mode tree-paste-node</vh></v>
<v t="yen.20210612081822.594"><vh>@mode tree-delete-node</vh></v>
<v t="yen.20210612081822.595"><vh>@mode tree-goto-last-node</vh></v>
<v t="yen.20210612081822.596"><vh>@mode tree-goto</vh>
<v t="yen.20210612081822.597"><vh>@mode node-goto-first-node</vh></v>
</v>
<v t="yen.20210612081822.598"><vh>@mode tree-goto-next-visible</vh></v>
<v t="yen.20210612081822.599"><vh>@mode tree-goto-prev-visible</vh></v>
<v t="yen.20210612081822.600"><vh>@mode tree-search-forward</vh></v>
<v t="yen.20210612081822.601"><vh>@mode tree-replace-string</vh></v>
<v t="yen.20210612081822.602"><vh>@mode tree-contract-or-go-left</vh></v>
<v t="yen.20210612081822.603"><vh>@mode tree-contract-node</vh></v>
<v t="yen.20210612081822.604"><vh>@mode tree-expand-and-go-right</vh></v>
<v t="yen.20210612081822.605"><vh>@mode tree-move-outline-up</vh></v>
<v t="yen.20210612081822.606"><vh>@mode tree-move-outline-down</vh></v>
<v t="yen.20210612081822.607"><vh>@mode tree-move-outline-left</vh></v>
<v t="yen.20210612081822.608"><vh>@mode tree-move-outline-right</vh></v>
<v t="yen.20210612081822.609"><vh>@mode tree-clone-node</vh></v>
<v t="yen.20210612081822.610"><vh>@mode tree-goto-next-clone-node</vh></v>
<v t="yen.20210612081822.611"><vh>@mode tree-mark-node</vh></v>
<v t="yen.20210612081822.612"><vh>@mode tree-goto-next-marked-node</vh></v>
<v t="yen.20210612081822.613"><vh>@mode tree-unmark-all-nodes</vh></v>
<v t="yen.20210612081822.614"><vh>Body actions from Tree pane</vh>
<v t="yen.20210612081822.615"><vh>@mode tree-goto-next-line</vh></v>
<v t="yen.20210612081822.616"><vh>@mode tree-goto-prev-line</vh></v>
</v>
</v>
<v t="yen.20210612081822.617"><vh>@shortcuts - vi in Body pane</vh>
<v t="yen.20210612081822.618"><vh>@mode body-search-forward</vh></v>
<v t="yen.20210612081822.619"><vh>@mode body-search-backward</vh></v>
<v t="yen.20210612081822.620"><vh>@mode body-search-everywhere</vh></v>
<v t="yen.20210612081822.621"><vh>@mode body-search-options</vh>
<v t="yen.20210612081822.622"><vh>@mode body-search-all-nodes</vh></v>
<v t="yen.20210612081822.623"><vh>@mode body-search-toggle-headline</vh></v>
<v t="yen.20210612081822.624"><vh>@mode body-search-toggle-body</vh></v>
<v t="yen.20210612081822.625"><vh>@mode body-search-toggle-mark</vh>
<v t="yen.20210612081822.626"><vh>@mode body-search-toggle-mark-finds</vh></v>
<v t="yen.20210612081822.627"><vh>@mode body-search-toggle-mark-changes</vh></v>
</v>
<v t="yen.20210612081822.628"><vh>@mode body-search-toggle-regex</vh></v>
</v>
<v t="yen.20210612081822.629"><vh>@mode body-replace-string</vh></v>
<v t="yen.20210612081822.630"><vh>@mode body-paste-then-find</vh></v>
<v t="yen.20210612081822.631"><vh>@mode body-goto-end-of-buffer</vh></v>
<v t="yen.20210612081822.632"><vh>@mode body-g</vh>
<v t="yen.20210612081822.633"><vh>@mode body-g-beginning-of-buffer</vh>
<v t="yen.20210612081822.634"><vh>@mode body-g-q</vh></v>
<v t="yen.20210612081822.635"><vh>@mode body-g-w</vh>
<v t="yen.20210612081822.636"><vh>@mode body-g-wq-a</vh></v>
</v>
</v>
</v>
<v t="yen.20210612081822.637"><vh>@mode body-new-line-below</vh></v>
<v t="yen.20210612081822.638"><vh>@mode body-new-line-above</vh></v>
<v t="yen.20210612081822.639"><vh>@mode body-append</vh></v>
<v t="yen.20210612081822.640"><vh>@mode body-insert-at-indent</vh></v>
<v t="yen.20210612081822.641"><vh>@mode body-delete-to-end-of-line</vh></v>
<v t="yen.20210612081822.642"><vh>@mode body-delete-object</vh>
<v t="yen.20210612081822.643"><vh>@mode body-delete-line</vh></v>
<v t="yen.20210612081822.644"><vh>@mode body-delete-to-end-of-word</vh></v>
<v t="yen.20210612081822.645"><vh>@mode body-delete-to-begin-of-word</vh></v>
<v t="yen.20210612081822.646"><vh>@mode body-delete-to-end-of-sentence</vh></v>
<v t="yen.20210612081822.647"><vh>@mode body-delete-to-beginning-of-sentence</vh></v>
<v t="yen.20210612081822.648"><vh>@mode body-delete-to-end-of-paragraph</vh></v>
<v t="yen.20210612081822.649"><vh>@mode body-delete-to-beginning-of-paragraph</vh></v>
<v t="yen.20210612081822.650"><vh>@mode body-delete-to-g-object</vh>
<v t="yen.20210612081822.651"><vh>@mode body-delete-to-beginning-of-buffer</vh></v>
</v>
<v t="yen.20210612081822.652"><vh>@mode body-delete-to-end-of-buffer</vh></v>
<v t="yen.20210612081822.653"><vh>@mode body-delete-section</vh></v>
<v t="yen.20210612081822.654"><vh>@mode body-delete-to-char</vh></v>
<v t="yen.20210612081822.655"><vh>@mode body-delete-selected</vh></v>
</v>
<v t="yen.20210612081822.656"><vh>@mode body-yank-to-end-of-line</vh></v>
<v t="yen.20210612081822.657"><vh>@mode body-yank-object</vh>
<v t="yen.20210612081822.658"><vh>@mode body-yank-line</vh></v>
<v t="yen.20210612081822.659"><vh>@mode body-yank-to-beginning-of-next-word</vh></v>
<v t="yen.20210612081822.660"><vh>@mode body-yank-to-beginning-of-current-word</vh></v>
<v t="yen.20210612081822.661"><vh>@mode body-yank-to-end-of-sentence</vh></v>
<v t="yen.20210612081822.662"><vh>@mode body-yank-to-beginning-of-sentence</vh></v>
<v t="yen.20210612081822.663"><vh>@mode body-yank-to-end-of-paragraph</vh></v>
<v t="yen.20210612081822.664"><vh>@mode body-yank-to-beginning-of-paragraph</vh></v>
<v t="yen.20210612081822.665"><vh>@mode body-yank-to-g-object</vh>
<v t="yen.20210612081822.666"><vh>@mode body-yank-to-beginning-of-buffer</vh></v>
</v>
<v t="yen.20210612081822.667"><vh>@mode body-yank-to-end-of-buffer</vh></v>
<v t="yen.20210612081822.668"><vh>@mode body-yank-section</vh></v>
<v t="yen.20210612081822.669"><vh>@mode body-yank-selected</vh></v>
</v>
<v t="yen.20210612081822.670"><vh>@mode body-change-to-end-of-line</vh></v>
<v t="yen.20210612081822.671"><vh>@mode body-change-object</vh>
<v t="yen.20210612081822.672"><vh>@mode body-change-line</vh></v>
<v t="yen.20210612081822.673"><vh>@mode body-change-to-end-of-word</vh></v>
<v t="yen.20210612081822.674"><vh>@mode body-change-to-beginning-of-word</vh></v>
<v t="yen.20210612081822.675"><vh>@mode body-change-to-end-of-sentence</vh></v>
<v t="yen.20210612081822.676"><vh>@mode body-change-to-beginning-of-sentence</vh></v>
<v t="yen.20210612081822.677"><vh>@mode body-change-to-end-of-paragraph</vh></v>
<v t="yen.20210612081822.678"><vh>@mode body-change-to-beginning-of-paragraph</vh></v>
<v t="yen.20210612081822.679"><vh>@mode body-change-to-g-object</vh>
<v t="yen.20210612081822.680"><vh>@mode body-change-to-beginning-of-buffer</vh></v>
</v>
<v t="yen.20210612081822.681"><vh>@mode body-change-to-end-of-buffer</vh></v>
<v t="yen.20210612081822.682"><vh>@mode body-change-section</vh></v>
<v t="yen.20210612081822.683"><vh>@mode body-change-selected</vh></v>
</v>
<v t="yen.20210612081822.684"><vh>@mode body-substitute-char</vh></v>
<v t="yen.20210612081822.685"><vh>@mode body-substitute-line</vh></v>
<v t="yen.20210612081822.686"><vh>@mode body-indent</vh>
<v t="yen.20210612081822.687"><vh>@mode body-indent-line</vh></v>
<v t="yen.20210612081822.688"><vh>@mode body-indent-to-end-of-sentence</vh></v>
<v t="yen.20210612081822.689"><vh>@mode body-indent-to-beginning-of-sentence</vh></v>
<v t="yen.20210612081822.690"><vh>@mode body-indent-to-end-of-paragraph</vh></v>
<v t="yen.20210612081822.691"><vh>@mode body-indent-to-beginning-of-paragraph</vh></v>
<v t="yen.20210612081822.692"><vh>@mode body-indent-to-beginning-of-buffer</vh></v>
<v t="yen.20210612081822.693"><vh>@mode body-indent-to-end-of-buffer</vh></v>
</v>
<v t="yen.20210612081822.694"><vh>@mode body-unindent</vh>
<v t="yen.20210612081822.695"><vh>@mode body-unindent-less</vh></v>
<v t="yen.20210612081822.696"><vh>@mode body-unindent-to-end-of-paragraph</vh></v>
<v t="yen.20210612081822.697"><vh>@mode body-unindent-to-beginning-of-paragraph</vh></v>
<v t="yen.20210612081822.698"><vh>@mode body-unindent-to-end-of-sentence</vh></v>
<v t="yen.20210612081822.699"><vh>@mode body-unindent-to-beginning-of-sentence</vh></v>
<v t="yen.20210612081822.700"><vh>@mode body-unindent-to-end-of-buffer</vh></v>
<v t="yen.20210612081822.701"><vh>@mode body-unindent-to-beginning-of-buffer</vh></v>
</v>
<v t="yen.20210612081822.702"><vh>@mode body-goto-indent-previous-line</vh></v>
<v t="yen.20210612081822.703"><vh>@mode body-goto-after-paragraph</vh></v>
<v t="yen.20210612081822.704"><vh>@mode body-goto-before-paragraph</vh></v>
<v t="yen.20210612081822.705"><vh>@mode body-join</vh></v>
<v t="yen.20210612081822.706"><vh>@mode body-match</vh></v>
<v t="yen.20210612081822.707"><vh>Tree actions from Body pane</vh>
<v t="yen.20210612081822.708"><vh>@mode body-goto-next-visible</vh></v>
<v t="yen.20210612081822.709"><vh>@mode body-goto-prev-visible</vh></v>
<v t="yen.20210612081822.710"><vh>@mode body-expand-and-go-right</vh></v>
<v t="yen.20210612081822.711"><vh>@mode body-contract-or-go-left</vh></v>
</v>
<v t="yen.20210612081822.712"><vh>@mode vim-window-commands</vh></v>
</v>
</v>
</v>
<v t="yen.20210612081822.713"><vh>@keys MacOS keys</vh>
<v t="yen.20210612081822.714"><vh>@shortcuts</vh></v>
</v>
<v t="yen.20210612081822.715"><vh>@keys Default Emacs shortcuts</vh>
<v t="yen.20210612081822.716"><vh>@shortcuts Emacs: A-E</vh></v>
<v t="yen.20210612081822.717"><vh>@shortcuts Emacs: F-M</vh></v>
<v t="yen.20210612081822.718"><vh>@shortcuts Emacs: N-Z</vh></v>
<v t="yen.20210612081822.719"><vh>@shortcuts Emacs: missing</vh></v>
<v t="yen.20210612081822.720"><vh>@shortcuts shift-f-keys</vh></v>
</v>
<v t="yen.20210612081822.721"><vh>@keys No bindings</vh>
<v t="yen.20210612081822.722"><vh>@shortcuts No bindings: A-E</vh></v>
<v t="yen.20210612081822.723"><vh>@shortcuts No bindings: F-M</vh></v>
<v t="yen.20210612081822.724"><vh>@shortcuts No bindings: N-Z</vh></v>
<v t="yen.20210612081822.725"><vh>@shortcuts shift-f-keys</vh></v>
</v>
</v>
</v>
<v t="yen.20210612081822.726"><vh>Leo Directives</vh>
<v t="yen.20210612081822.727"><vh>@int page-width = 80</vh></v>
<v t="yen.20210612081822.728"><vh>@int tab-width = -4</vh></v>
</v>
<v t="yen.20210612081822.729"><vh>Menus</vh>
<v t="yen.20210612081822.730"><vh>@@menu 文件</vh>
<v t="yen.20210612081822.731"><vh>@item new</vh></v>
<v t="yen.20210612081822.732"><vh>@item open-outline</vh></v>
</v>
<v t="yen.20210612081822.733"><vh>@menus</vh>
<v t="yen.20210612081822.734"><vh>@menu &amp;File</vh>
<v t="yen.20210612081822.735"><vh>@item &amp;close-window</vh></v>
<v t="yen.20210612081822.736"><vh>@item &amp;file-open-by-name</vh></v>
<v t="yen.20210612081822.737"><vh>@item &amp;new</vh></v>
<v t="yen.20210612081822.738"><vh>@item &amp;open-outline</vh></v>
<v t="yen.20210612081822.739"><vh>@item -</vh></v>
<v t="yen.20210612081822.740"><vh>@menu Open &amp;With</vh></v>
<v t="yen.20210612081822.741"><vh>@menu Open Specific &amp;Leo File</vh>
<v t="yen.20210612081822.742"><vh>@item open-cheat-sheet-leo</vh></v>
<v t="yen.20210612081822.743"><vh>@item open-leo-docs-leo</vh></v>
<v t="yen.20210612081822.744"><vh>@item open-leo-dist-leo</vh></v>
<v t="yen.20210612081822.745"><vh>@item open-leo-py-leo</vh></v>
<v t="yen.20210612081822.746"><vh>@item open-leo-py-ref-leo</vh></v>
<v t="yen.20210612081822.747"><vh>@item open-my-leo-settings</vh></v>
<v t="yen.20210612081822.748"><vh>@item open-quickstart-leo</vh></v>
<v t="yen.20210612081822.749"><vh>@item open-scripts-leo</vh></v>
<v t="yen.20210612081822.750"><vh>@item open-leo-settings</vh></v>
<v t="yen.20210612081822.751"><vh>@item open-unittest-leo</vh></v>
</v>
<v t="yen.20210612081822.752"><vh>@menu Recent &amp;Files</vh></v>
<v t="yen.20210612081822.753"><vh>@item -</vh></v>
<v t="yen.20210612081822.754"><vh>@item save-file</vh></v>
<v t="yen.20210612081822.755"><vh>@item save-file-as</vh></v>
<v t="yen.20210612081822.756"><vh>@item save-file-as-unzipped</vh></v>
<v t="yen.20210612081822.757"><vh>@item save-file-as-zipped</vh></v>
<v t="yen.20210612081822.758"><vh>@item save-file-to</vh></v>
<v t="yen.20210612081822.759"><vh>@item -</vh></v>
<v t="yen.20210612081822.760"><vh>@menu &amp;Compare/Diff Files</vh>
<v t="yen.20210612081822.761"><vh>@item file-&amp;compare-two-leo-files</vh></v>
<v t="yen.20210612081822.762"><vh>@item file-diff-&amp;files</vh></v>
</v>
<v t="yen.20210612081822.763"><vh>@menu &amp;Create/Remove Files Or Directories</vh>
<v t="yen.20210612081822.764"><vh>@item directory-&amp;make</vh></v>
<v t="yen.20210612081822.765"><vh>@item directory-&amp;remove</vh></v>
<v t="yen.20210612081822.766"><vh>@item -</vh></v>
<v t="yen.20210612081822.767"><vh>@item file-&amp;delete</vh></v>
<v t="yen.20210612081822.768"><vh>@item file-&amp;insert</vh></v>
</v>
<v t="yen.20210612081822.769"><vh>@menu &amp;Read/Write Files</vh>
<v t="yen.20210612081822.770"><vh>@item check-derived-file</vh></v>
<v t="yen.20210612081822.771"><vh>@@@item check-leo-file</vh></v>
<v t="yen.20210612081822.772"><vh>@item file-compare-two-leo-files</vh></v>
<v t="yen.20210612081822.773"><vh>@item -</vh></v>
<v t="yen.20210612081822.774"><vh>@item read-outline-only</vh></v>
<v t="yen.20210612081822.775"><vh>@item read-file-into-node</vh></v>
<v t="yen.20210612081822.776"><vh>@item read-at-auto-nodes</vh></v>
<v t="yen.20210612081822.777"><vh>@item read-at-file-nodes</vh></v>
<v t="yen.20210612081822.778"><vh>@item read-at-shadow-nodes</vh></v>
<v t="yen.20210612081822.779"><vh>@item -</vh></v>
<v t="yen.20210612081822.780"><vh>@item write-outline-only</vh></v>
<v t="yen.20210612081822.781"><vh>@item write-file-from-node</vh></v>
<v t="yen.20210612081822.782"><vh>@item write-at-auto-nodes</vh></v>
<v t="yen.20210612081822.783"><vh>@item write-at-file-nodes</vh></v>
<v t="yen.20210612081822.784"><vh>@item write-at-shadow-nodes</vh></v>
<v t="yen.20210612081822.785"><vh>@item -</vh></v>
<v t="yen.20210612081822.786"><vh>@item write-dirty-at-auto-nodes</vh></v>
<v t="yen.20210612081822.787"><vh>@item write-dirty-at-file-nodes</vh></v>
<v t="yen.20210612081822.788"><vh>@item write-dirty-at-shadow-nodes</vh></v>
<v t="yen.20210612081822.789"><vh>@item write-missing-at-file-nodes</vh></v>
</v>
<v t="yen.20210612081822.790"><vh>@menu &amp;Import Files</vh>
<v t="yen.20210612081822.791"><vh>@item import-file</vh></v>
<v t="yen.20210612081822.792"><vh>@item import-free-mind-files</vh></v>
<v t="yen.20210612081822.793"><vh>@item import-mind-jet-files</vh></v>
<v t="yen.20210612081822.794"><vh>@item import-MORE-files</vh></v>
<v t="yen.20210612081822.795"><vh>@item import-jupyter-notebook</vh></v>
<v t="yen.20210612081822.796"><vh>@item import-tabbed-files</vh></v>
<v t="yen.20210612081822.797"><vh>@item import-zim-folder</vh></v>
</v>
<v t="yen.20210612081822.798"><vh>@menu &amp;Export Files</vh>
<v t="yen.20210612081822.799"><vh>@item export-headlines</vh></v>
<v t="yen.20210612081822.800"><vh>@item export-jupyter-notebook</vh></v>
<v t="yen.20210612081822.801"><vh>@item flatten-outline</vh></v>
<v t="yen.20210612081822.802"><vh>@item outline-to-cweb</vh></v>
<v t="yen.20210612081822.803"><vh>@item outline-to-noweb</vh></v>
<v t="yen.20210612081822.804"><vh>@item remove-sentinels</vh></v>
<v t="yen.20210612081822.805"><vh>@item weave</vh></v>
</v>
<v t="yen.20210612081822.806"><vh>@menu &amp;Print</vh>
<v t="yen.20210612081822.807"><vh>@item print-body	</vh></v>
<v t="yen.20210612081822.808"><vh>@item print-html</vh></v>
<v t="yen.20210612081822.809"><vh>@item print-node</vh></v>
<v t="yen.20210612081822.810"><vh>@item -</vh></v>
<v t="yen.20210612081822.811"><vh>@item print-expanded-body</vh></v>
<v t="yen.20210612081822.812"><vh>@item print-expanded-html</vh></v>
<v t="yen.20210612081822.813"><vh>@item -</vh></v>
<v t="yen.20210612081822.814"><vh>@item print-marked-bodies</vh></v>
<v t="yen.20210612081822.815"><vh>@item print-marked-html</vh></v>
<v t="yen.20210612081822.816"><vh>@item print-marked-nodes</vh></v>
<v t="yen.20210612081822.817"><vh>@item -</vh></v>
<v t="yen.20210612081822.818"><vh>@item print-tree-nodes</vh></v>
<v t="yen.20210612081822.819"><vh>@item print-tree-bodies</vh></v>
<v t="yen.20210612081822.820"><vh>@item print-tree-html</vh></v>
</v>
<v t="yen.20210612081822.821"><vh>@menu &amp;Print Preview</vh>
<v t="yen.20210612081822.822"><vh>@item preview-body	</vh></v>
<v t="yen.20210612081822.823"><vh>@item preview-html</vh></v>
<v t="yen.20210612081822.824"><vh>@item preview-node</vh></v>
<v t="yen.20210612081822.825"><vh>@item -</vh></v>
<v t="yen.20210612081822.826"><vh>@item preview-expanded-body</vh></v>
<v t="yen.20210612081822.827"><vh>@item preview-expanded-html</vh></v>
<v t="yen.20210612081822.828"><vh>@item -</vh></v>
<v t="yen.20210612081822.829"><vh>@item preview-marked-bodies</vh></v>
<v t="yen.20210612081822.830"><vh>@item preview-marked-html</vh></v>
<v t="yen.20210612081822.831"><vh>@item preview-marked-nodes</vh></v>
<v t="yen.20210612081822.832"><vh>@item -</vh></v>
<v t="yen.20210612081822.833"><vh>@item preview-tree-nodes</vh></v>
<v t="yen.20210612081822.834"><vh>@item preview-tree-bodies</vh></v>
<v t="yen.20210612081822.835"><vh>@item preview-tree-html</vh></v>
</v>
<v t="yen.20210612081822.836"><vh>@menu &amp;Revert/Refresh Files</vh>
<v t="yen.20210612081822.837"><vh>@item refresh-from-disk</vh></v>
<v t="yen.20210612081822.838"><vh>@item revert</vh></v>
</v>
<v t="yen.20210612081822.839"><vh>@item -</vh></v>
<v t="yen.20210612081822.840"><vh>@item exit-leo</vh></v>
</v>
<v t="yen.20210612081822.841"><vh>@menu &amp;Edit</vh>
<v t="yen.20210612081822.842"><vh>@item &amp;undo</vh></v>
<v t="yen.20210612081822.843"><vh>@item &amp;redo</vh></v>
<v t="yen.20210612081822.844"><vh>@item -</vh></v>
<v t="yen.20210612081822.845"><vh>@item &amp;cut-text</vh></v>
<v t="yen.20210612081822.846"><vh>@item &amp;copy-text</vh></v>
<v t="yen.20210612081822.847"><vh>@item &amp;paste-text</vh></v>
<v t="yen.20210612081822.848"><vh>@item &amp;select-all</vh></v>
<v t="yen.20210612081822.849"><vh>@item -</vh></v>
<v t="yen.20210612081822.850"><vh>@menu &amp;Check Spelling</vh>
<v t="yen.20210612081822.851"><vh>@item &amp;spell-tab-open</vh></v>
<v t="yen.20210612081822.852"><vh>@item spell-&amp;change</vh></v>
<v t="yen.20210612081822.853"><vh>@item spell-change-&amp;then-find</vh></v>
<v t="yen.20210612081822.854"><vh>@item spell-&amp;find</vh></v>
<v t="yen.20210612081822.855"><vh>@item spell-&amp;ignore</vh></v>
</v>
<v t="yen.20210612081822.856"><vh>@menu &amp;Edit Headline</vh>
<v t="yen.20210612081822.857"><vh>@item edit-&amp;headline</vh></v>
<v t="yen.20210612081822.858"><vh>@item &amp;end-edit-headline</vh></v>
<v t="yen.20210612081822.859"><vh>@item &amp;abort-edit-headline</vh></v>
<v t="yen.20210612081822.860"><vh>@item insert-headline-&amp;time</vh></v>
</v>
<v t="yen.20210612081822.861"><vh>@menu &amp;Edit Text</vh>
<v t="yen.20210612081822.862"><vh>@item &amp;backward-delete-char</vh></v>
<v t="yen.20210612081822.863"><vh>@item -</vh></v>
<v t="yen.20210612081822.864"><vh>@menu &amp;Add/Delete Comments</vh>
<v t="yen.20210612081822.865"><vh>@item &amp;add-comments</vh></v>
<v t="yen.20210612081822.866"><vh>@item &amp;delete-comments</vh></v>
</v>
<v t="yen.20210612081822.867"><vh>@menu &amp;Align text</vh>
<v t="yen.20210612081822.868"><vh>@item center-&amp;line</vh></v>
<v t="yen.20210612081822.869"><vh>@item center-&amp;region</vh></v>
</v>
<v t="yen.20210612081822.870"><vh>@menu &amp;Beautify Text</vh>
<v t="yen.20210612081822.871"><vh>@item beautify-&amp;c</vh></v>
<v t="yen.20210612081822.872"><vh>@item &amp;beautify-files</vh></v>
<v t="yen.20210612081822.873"><vh>@item &amp;diff-beautify-files</vh></v>
</v>
<v t="yen.20210612081822.874"><vh>@menu &amp;Capitalize Text</vh>
<v t="yen.20210612081822.875"><vh>@item &amp;capitalize-word</vh></v>
<v t="yen.20210612081822.876"><vh>@item d&amp;owncase-region</vh></v>
<v t="yen.20210612081822.877"><vh>@item &amp;downcase-word</vh></v>
<v t="yen.20210612081822.878"><vh>@item u&amp;pcase-region</vh></v>
<v t="yen.20210612081822.879"><vh>@item &amp;upcase-word</vh></v>
</v>
<v t="yen.20210612081822.880"><vh>@menu &amp;Convert/View Tabs Or Blanks</vh>
<v t="yen.20210612081822.881"><vh>@item convert-all-b&amp;lanks</vh></v>
<v t="yen.20210612081822.882"><vh>@item convert-all-t&amp;abs</vh></v>
<v t="yen.20210612081822.883"><vh>@item convert-&amp;blanks</vh></v>
<v t="yen.20210612081822.884"><vh>@item convert-&amp;tabs</vh></v>
<v t="yen.20210612081822.885"><vh>@item &amp;toggle-invisibles</vh></v>
</v>
<v t="yen.20210612081822.886"><vh>@menu &amp;Create Sections</vh>
<v t="yen.20210612081822.887"><vh>@item extract-&amp;names</vh></v>
<v t="yen.20210612081822.888"><vh>@item &amp;extract</vh></v>
</v>
<v t="yen.20210612081822.889"><vh>@menu &amp;Edit Rectangular Areas</vh>
<v t="yen.20210612081822.890"><vh>@item rectangle-&amp;clear</vh></v>
<v t="yen.20210612081822.891"><vh>@item rectangle-&amp;close</vh></v>
<v t="yen.20210612081822.892"><vh>@item rectangle-&amp;delete</vh></v>
<v t="yen.20210612081822.893"><vh>@item rectangle-&amp;kill</vh></v>
<v t="yen.20210612081822.894"><vh>@item rectangle-&amp;open</vh></v>
<v t="yen.20210612081822.895"><vh>@item rectangle-&amp;string</vh></v>
<v t="yen.20210612081822.896"><vh>@item rectangle-&amp;yank</vh></v>
</v>
<v t="yen.20210612081822.897"><vh>@menu &amp;Indent Text</vh>
<v t="yen.20210612081822.898"><vh>@item indent-ri&amp;gidly</vh></v>
<v t="yen.20210612081822.899"><vh>@item &amp;indent-region</vh></v>
<v t="yen.20210612081822.900"><vh>@item indent-r&amp;elative</vh></v>
<v t="yen.20210612081822.901"><vh>@item u&amp;nindent-region</vh></v>
</v>
<v t="yen.20210612081822.902"><vh>@menu &amp;Move Cursor And Make Selections</vh>
<v t="yen.20210612081822.903"><vh>@item &amp;match-brackets</vh></v>
<v t="yen.20210612081822.904"><vh>@item -</vh></v>
<v t="yen.20210612081822.905"><vh>@menu Cursor &amp;Back</vh>
<v t="yen.20210612081822.906"><vh>@item back-&amp;char</vh></v>
<v t="yen.20210612081822.907"><vh>@item back-&amp;paragraph</vh></v>
<v t="yen.20210612081822.908"><vh>@item back-&amp;sentence</vh></v>
<v t="yen.20210612081822.909"><vh>@item back-&amp;word</vh></v>
<v t="yen.20210612081822.910"><vh>@item -</vh></v>
<v t="yen.20210612081822.911"><vh>@item beginning-of-&amp;buffer</vh></v>
<v t="yen.20210612081822.912"><vh>@item beginning-of-&amp;line</vh></v>
<v t="yen.20210612081822.913"><vh>@item -</vh></v>
<v t="yen.20210612081822.914"><vh>@item pre&amp;vious-line</vh></v>
</v>
<v t="yen.20210612081822.915"><vh>@menu Cursor Back &amp;Extend Selection</vh>
<v t="yen.20210612081822.916"><vh>@item back-&amp;char-extend-selection</vh></v>
<v t="yen.20210612081822.917"><vh>@item back-&amp;paragraph-extend-selection</vh></v>
<v t="yen.20210612081822.918"><vh>@item back-&amp;sentence-extend-selection</vh></v>
<v t="yen.20210612081822.919"><vh>@item back-&amp;word-extend-selection</vh></v>
<v t="yen.20210612081822.920"><vh>@item -</vh></v>
<v t="yen.20210612081822.921"><vh>@item beginning-of-&amp;buffer-extend-selection</vh></v>
<v t="yen.20210612081822.922"><vh>@item beginning-of-&amp;line-extend-selection</vh></v>
<v t="yen.20210612081822.923"><vh>@item -</vh></v>
<v t="yen.20210612081822.924"><vh>@item pre&amp;vious-line-extend-selection</vh></v>
</v>
<v t="yen.20210612081822.925"><vh>@menu Cursor Back Extend &amp;to</vh>
<v t="yen.20210612081822.926"><vh>@item extend-to-&amp;line</vh></v>
<v t="yen.20210612081822.927"><vh>@item extend-to-&amp;paragraph</vh></v>
<v t="yen.20210612081822.928"><vh>@item extend-to-&amp;sentence</vh></v>
<v t="yen.20210612081822.929"><vh>@item extend-to-&amp;word</vh></v>
</v>
<v t="yen.20210612081822.930"><vh>@menu Cursor &amp;Forward</vh>
<v t="yen.20210612081822.931"><vh>@item end-of-&amp;buffer</vh></v>
<v t="yen.20210612081822.932"><vh>@item end-of-&amp;line</vh></v>
<v t="yen.20210612081822.933"><vh>@item -</vh></v>
<v t="yen.20210612081822.934"><vh>@item forward-&amp;char</vh></v>
<v t="yen.20210612081822.935"><vh>@item forward-&amp;paragraph</vh></v>
<v t="yen.20210612081822.936"><vh>@item forward-&amp;sentence</vh></v>
<v t="yen.20210612081822.937"><vh>@item forward-&amp;end-word</vh></v>
<v t="yen.20210612081822.938"><vh>@item forward-&amp;word</vh></v>
<v t="yen.20210612081822.939"><vh>@item -</vh></v>
<v t="yen.20210612081822.940"><vh>@item &amp;next-line</vh></v>
</v>
<v t="yen.20210612081822.941"><vh>@menu Cursor Forward E&amp;xtend Selection</vh>
<v t="yen.20210612081822.942"><vh>@item end-of-&amp;buffer-extend-selection</vh></v>
<v t="yen.20210612081822.943"><vh>@item end-of-&amp;line-extend-selection</vh></v>
<v t="yen.20210612081822.944"><vh>@item -</vh></v>
<v t="yen.20210612081822.945"><vh>@item forward-&amp;char-extend-selection</vh></v>
<v t="yen.20210612081822.946"><vh>@item forward-&amp;paragraph-extend-selection</vh></v>
<v t="yen.20210612081822.947"><vh>@item forward-&amp;sentence-extend-selection</vh></v>
<v t="yen.20210612081822.948"><vh>@item forward-&amp;end-word-extend-selection</vh></v>
<v t="yen.20210612081822.949"><vh>@item forward-&amp;word-extend-selection</vh></v>
<v t="yen.20210612081822.950"><vh>@item -</vh></v>
<v t="yen.20210612081822.951"><vh>@item &amp;next-line-extend-selection</vh></v>
</v>
</v>
<v t="yen.20210612081822.952"><vh>@menu &amp;Sort Text</vh>
<v t="yen.20210612081822.953"><vh>@item sort-&amp;columns</vh></v>
<v t="yen.20210612081822.954"><vh>@item sort-&amp;fields</vh></v>
<v t="yen.20210612081822.955"><vh>@item sort-&amp;lines</vh></v>
</v>
<v t="yen.20210612081822.956"><vh>@menu &amp;Yank/Kill Text</vh>
<v t="yen.20210612081822.957"><vh>@item &amp;rectangle-kill</vh></v>
<v t="yen.20210612081822.958"><vh>@item r&amp;ectangle-yank</vh></v>
<v t="yen.20210612081822.959"><vh>@item -</vh></v>
<v t="yen.20210612081822.960"><vh>@item kill-&amp;line</vh></v>
<v t="yen.20210612081822.961"><vh>@item kill-re&amp;gion</vh></v>
<v t="yen.20210612081822.962"><vh>@item kill-region-s&amp;ave</vh></v>
<v t="yen.20210612081822.963"><vh>@item kill-&amp;sentence</vh></v>
<v t="yen.20210612081822.964"><vh>@item kill-ws</vh></v>
<v t="yen.20210612081822.965"><vh>@item kill-&amp;word</vh></v>
<v t="yen.20210612081822.966"><vh>@item -</vh></v>
<v t="yen.20210612081822.967"><vh>@item &amp;yank</vh></v>
<v t="yen.20210612081822.968"><vh>@item yank-&amp;pop</vh></v>
</v>
</v>
<v t="yen.20210612081822.969"><vh>@menu &amp;Format Text</vh>
<v t="yen.20210612081822.970"><vh>@item &amp;code-to-rst</vh></v>
<v t="yen.20210612081822.971"><vh>@item &amp;insert-body-&amp;time</vh></v>
<v t="yen.20210612081822.972"><vh>@item &amp;reformat-paragraph</vh></v>
<v t="yen.20210612081822.973"><vh>@item &amp;rst3</vh></v>
</v>
<v t="yen.20210612081822.974"><vh>@menu &amp;Select Chapters</vh>
<v t="yen.20210612081822.975"><vh>@item chapter-&amp;select</vh></v>
<v t="yen.20210612081822.976"><vh>@item chapter-select-&amp;main</vh></v>
</v>
</v>
<v t="yen.20210612081822.977"><vh>@menu &amp;Search</vh>
<v t="yen.20210612081822.978"><vh>@item help-for-find-commands</vh></v>
<v t="yen.20210612081822.979"><vh>@item -</vh></v>
<v t="yen.20210612081822.980"><vh>@item &amp;goto-global-line</vh></v>
<v t="yen.20210612081822.981"><vh>@item start-search</vh></v>
<v t="yen.20210612081822.982"><vh>@item find-&amp;next</vh></v>
<v t="yen.20210612081822.983"><vh>@item find-&amp;prev</vh></v>
<v t="yen.20210612081822.984"><vh>@item &amp;replace</vh></v>
<v t="yen.20210612081822.985"><vh>@item replace-&amp;then-find</vh></v>
<v t="yen.20210612081822.986"><vh>@item replace-a&amp;ll</vh></v>
<v t="yen.20210612081822.987"><vh>@item show-find-&amp;options</vh></v>
<v t="yen.20210612081822.988"><vh>@item -</vh></v>
<v t="yen.20210612081822.989"><vh>@menu &amp;Clone-Find Commands</vh>
<v t="yen.20210612081822.990"><vh>@item clone-find-all</vh></v>
<v t="yen.20210612081822.991"><vh>@item clone-find-all-flattened</vh></v>
<v t="yen.20210612081822.992"><vh>@item clone-find-all-flattened-marked</vh></v>
<v t="yen.20210612081822.993"><vh>@item clone-find-parents</vh></v>
<v t="yen.20210612081822.994"><vh>@item clone-find-tag</vh></v>
</v>
<v t="yen.20210612081822.995"><vh>@menu &amp;Set Search Settings</vh>
<v t="yen.20210612081822.996"><vh>@item &amp;set-find-everywhere</vh></v>
<v t="yen.20210612081822.997"><vh>@item &amp;set-find-node-only</vh></v>
<v t="yen.20210612081822.998"><vh>@item &amp;set-find-suboutline-only</vh></v>
<v t="yen.20210612081822.999"><vh>@item -</vh></v>
<v t="yen.20210612081822.1000"><vh>@item &amp;toggle-find-ignore-case-option</vh></v>
<v t="yen.20210612081822.1001"><vh>@item &amp;toggle-find-mark-changes-option</vh></v>
<v t="yen.20210612081822.1002"><vh>@item &amp;toggle-find-mark-finds-option</vh></v>
<v t="yen.20210612081822.1003"><vh>@item &amp;toggle-find-regex-option</vh></v>
<v t="yen.20210612081822.1004"><vh>@item &amp;toggle-find-word-option</vh></v>
<v t="yen.20210612081822.1005"><vh>@item &amp;toggle-find-wrap-around-option</vh></v>
</v>
<v t="yen.20210612081822.1006"><vh>@menu &amp;Find One Character</vh>
<v t="yen.20210612081822.1007"><vh>@item &amp;find-character</vh></v>
<v t="yen.20210612081822.1008"><vh>@item &amp;find-character-extend-selection</vh></v>
<v t="yen.20210612081822.1009"><vh>@item &amp;backward-find-character</vh></v>
<v t="yen.20210612081822.1010"><vh>@item &amp;backward-find-character-extend-selection</vh></v>
</v>
<v t="yen.20210612081822.1011"><vh>@menu &amp;Find Incrementally</vh>
<v t="yen.20210612081822.1012"><vh>@item &amp;isearch-forward</vh></v>
<v t="yen.20210612081822.1013"><vh>@item isea&amp;rch-backward</vh></v>
<v t="yen.20210612081822.1014"><vh>@item isearch-forward-rege&amp;xp</vh></v>
<v t="yen.20210612081822.1015"><vh>@item isearch-backward-regex&amp;p</vh></v>
</v>
</v>
<v t="yen.20210612081822.1016"><vh>@menu Settings</vh>
<v t="yen.20210612081822.1017"><vh>@item open-leo-settings</vh></v>
<v t="yen.20210612081822.1018"><vh>@item open-my-leo-settings</vh></v>
<v t="yen.20210612081822.1019"><vh>@item open-theme-file</vh></v>
<v t="yen.20210612081822.1020"><vh>@item open-local-settings</vh></v>
<v t="yen.20210612081822.1021"><vh>@item -</vh></v>
<v t="yen.20210612081822.1022"><vh>@menu &amp;List/Kill Abbreviations</vh>
<v t="yen.20210612081822.1023"><vh>@item abbrev-&amp;list</vh></v>
<v t="yen.20210612081822.1024"><vh>@item abbrev-&amp;kill-all</vh></v>
</v>
<v t="yen.20210612081822.1025"><vh>@menu &amp;Pick Colors/Fonts</vh>
<v t="yen.20210612081822.1026"><vh>@item show-color-&amp;names</vh></v>
<v t="yen.20210612081822.1027"><vh>@item show-color-&amp;wheel</vh></v>
<v t="yen.20210612081822.1028"><vh>@item show-&amp;fonts</vh></v>
</v>
<v t="yen.20210612081822.1029"><vh>@menu &amp;Reload Settings</vh>
<v t="yen.20210612081822.1030"><vh>@item reload-all-settings</vh></v>
<v t="yen.20210612081822.1031"><vh>@item reload-settings</vh></v>
<v t="yen.20210612081822.1032"><vh>@item reload-style-sheets</vh></v>
</v>
<v t="yen.20210612081822.1033"><vh>@menu &amp;Show Settings</vh>
<v t="yen.20210612081822.1034"><vh>@item show-&amp;bindings</vh></v>
<v t="yen.20210612081822.1035"><vh>@item show-&amp;commands</vh></v>
<v t="yen.20210612081822.1036"><vh>@item show-&amp;settings</vh></v>
<v t="yen.20210612081822.1037"><vh>@item show-&amp;plugins-info</vh></v>
</v>
<v t="yen.20210612081822.1038"><vh>@menu &amp;Toggle Settings</vh>
<v t="yen.20210612081822.1039"><vh>@item toggle-a&amp;utocompleter</vh></v>
<v t="yen.20210612081822.1040"><vh>@item toggle-call&amp;tips</vh></v>
<v t="yen.20210612081822.1041"><vh>@item toggle-&amp;extend-mode</vh></v>
<v t="yen.20210612081822.1042"><vh>@item toggle-input-&amp;state</vh></v>
<v t="yen.20210612081822.1043"><vh>@item toggle-in&amp;visibles</vh></v>
<v t="yen.20210612081822.1044"><vh>@item toggle-split-&amp;direction</vh></v>
<v t="yen.20210612081822.1045"><vh>@item toggle-s&amp;parse-move</vh></v>
</v>
<v t="yen.20210612081822.1046"><vh>@item open-desktop-integration-leo</vh></v>
</v>
<v t="yen.20210612081822.1047"><vh>@menu &amp;Outline</vh>
<v t="yen.20210612081822.1048"><vh>@item &amp;clone-node</vh></v>
<v t="yen.20210612081822.1049"><vh>@item &amp;delete-node</vh></v>
<v t="yen.20210612081822.1050"><vh>@item &amp;insert-node</vh></v>
<v t="yen.20210612081822.1051"><vh>@item insert-child</vh></v>
<v t="yen.20210612081822.1052"><vh>@item -</vh></v>
<v t="yen.20210612081822.1053"><vh>@item c&amp;ut-node</vh></v>
<v t="yen.20210612081822.1054"><vh>@item c&amp;opy-node</vh></v>
<v t="yen.20210612081822.1055"><vh>@item &amp;paste-node</vh></v>
<v t="yen.20210612081822.1056"><vh>@item paste-retaining-clones</vh></v>
<v t="yen.20210612081822.1057"><vh>@item -</vh></v>
<v t="yen.20210612081822.1058"><vh>@item demote</vh></v>
<v t="yen.20210612081822.1059"><vh>@item promote</vh></v>
<v t="yen.20210612081822.1060"><vh>@item -</vh></v>
<v t="yen.20210612081822.1061"><vh>@menu &amp;Check/Dump Outline</vh>
<v t="yen.20210612081822.1062"><vh>@item check-&amp;outline</vh></v>
<v t="yen.20210612081822.1063"><vh>@item &amp;dump-outline</vh></v>
</v>
<v t="yen.20210612081822.1064"><vh>@menu &amp;Expand/Contract Nodes</vh>
<v t="yen.20210612081822.1065"><vh>Accel: a,c,d,e,n,o,p,l,r,t,x</vh></v>
<v t="yen.20210612081822.1066"><vh>@item &amp;contract-all</vh></v>
<v t="yen.20210612081822.1067"><vh>@item contract-all-o&amp;ther-nodes</vh></v>
<v t="yen.20210612081822.1068"><vh>@item contract-&amp;node</vh></v>
<v t="yen.20210612081822.1069"><vh>@item contract-&amp;parent</vh></v>
<v t="yen.20210612081822.1070"><vh>@item contract-or-go-&amp;left</vh></v>
<v t="yen.20210612081822.1071"><vh>@item -</vh></v>
<v t="yen.20210612081822.1072"><vh>@item expand-p&amp;rev-level</vh></v>
<v t="yen.20210612081822.1073"><vh>@item expand-n&amp;ext-level</vh></v>
<v t="yen.20210612081822.1074"><vh>@item e&amp;xpand-and-go-right</vh></v>
<v t="yen.20210612081822.1075"><vh>@item expan&amp;d-or-go-right</vh></v>
<v t="yen.20210612081822.1076"><vh>@item -</vh></v>
<v t="yen.20210612081822.1077"><vh>@item expand-to-level-&amp;1</vh></v>
<v t="yen.20210612081822.1078"><vh>@item expand-to-level-&amp;2</vh></v>
<v t="yen.20210612081822.1079"><vh>@item expand-to-level-&amp;3</vh></v>
<v t="yen.20210612081822.1080"><vh>@item expand-to-level-&amp;4</vh></v>
<v t="yen.20210612081822.1081"><vh>@item expand-to-level-&amp;5</vh></v>
<v t="yen.20210612081822.1082"><vh>@item expand-to-level-&amp;6</vh></v>
<v t="yen.20210612081822.1083"><vh>@item expand-to-level-&amp;7</vh></v>
<v t="yen.20210612081822.1084"><vh>@item expand-to-level-&amp;8</vh></v>
<v t="yen.20210612081822.1085"><vh>@item -</vh></v>
<v t="yen.20210612081822.1086"><vh>@item expand-&amp;all</vh></v>
<v t="yen.20210612081822.1087"><vh>@item expand-n&amp;ode</vh></v>
</v>
<v t="yen.20210612081822.1088"><vh>@menu &amp;Go To Node</vh>
<v t="yen.20210612081822.1089"><vh>@item find-next-clone</vh></v>
<v t="yen.20210612081822.1090"><vh>@item goto-first-node</vh></v>
<v t="yen.20210612081822.1091"><vh>@item goto-first-visible-node</vh></v>
<v t="yen.20210612081822.1092"><vh>@item goto-first-sibling</vh></v>
<v t="yen.20210612081822.1093"><vh>@item -</vh></v>
<v t="yen.20210612081822.1094"><vh>@item goto-next-changed</vh></v>
<v t="yen.20210612081822.1095"><vh>@item goto-next-clone</vh></v>
<v t="yen.20210612081822.1096"><vh>@item goto-next-marked</vh></v>
<v t="yen.20210612081822.1097"><vh>@item goto-next-node</vh></v>
<v t="yen.20210612081822.1098"><vh>@item goto-next-sibling</vh></v>
<v t="yen.20210612081822.1099"><vh>@item goto-next-visible</vh></v>
<v t="yen.20210612081822.1100"><vh>@item go-forward</vh></v>
<v t="yen.20210612081822.1101"><vh>@item -</vh></v>
<v t="yen.20210612081822.1102"><vh>@item goto-parent</vh></v>
<v t="yen.20210612081822.1103"><vh>@item -</vh></v>
<v t="yen.20210612081822.1104"><vh>@item goto-prev-node</vh></v>
<v t="yen.20210612081822.1105"><vh>@item goto-prev-sibling</vh></v>
<v t="yen.20210612081822.1106"><vh>@item goto-prev-visible</vh></v>
<v t="yen.20210612081822.1107"><vh>@item go-back</vh></v>
<v t="yen.20210612081822.1108"><vh>@item -</vh></v>
<v t="yen.20210612081822.1109"><vh>@item goto-last-node</vh></v>
<v t="yen.20210612081822.1110"><vh>@item goto-last-sibling</vh></v>
<v t="yen.20210612081822.1111"><vh>@item goto-last-visible-node</vh></v>
</v>
<v t="yen.20210612081822.1112"><vh>@menu &amp;Hoist/Dehoist nodes</vh>
<v t="yen.20210612081822.1113"><vh>@item &amp;hoist</vh></v>
<v t="yen.20210612081822.1114"><vh>@item de-hoist</vh></v>
</v>
<v t="yen.20210612081822.1115"><vh>@menu &amp;Insert/Delete Icons</vh>
<v t="yen.20210612081822.1116"><vh>@item delete-&amp;first-icon</vh></v>
<v t="yen.20210612081822.1117"><vh>@item delete-&amp;last-icon</vh></v>
<v t="yen.20210612081822.1118"><vh>@item delete-&amp;node-icons</vh></v>
<v t="yen.20210612081822.1119"><vh>@item &amp;insert-icon</vh></v>
</v>
<v t="yen.20210612081822.1120"><vh>@menu &amp;Mark Nodes</vh>
<v t="yen.20210612081822.1121"><vh>@item clone-marked-nodes</vh></v>
<v t="yen.20210612081822.1122"><vh>@item &amp;mark</vh></v>
<v t="yen.20210612081822.1123"><vh>@item mark-&amp;subheads</vh></v>
<v t="yen.20210612081822.1124"><vh>@item mark-changed-&amp;items</vh></v>
<v t="yen.20210612081822.1125"><vh>@item &amp;unmark-all</vh></v>
</v>
<v t="yen.20210612081822.1126"><vh>@menu &amp;Move Nodes</vh>
<v t="yen.20210612081822.1127"><vh>@item move-outline-down</vh></v>
<v t="yen.20210612081822.1128"><vh>@item move-outline-left</vh></v>
<v t="yen.20210612081822.1129"><vh>@item move-outline-right</vh></v>
<v t="yen.20210612081822.1130"><vh>@item move-outline-up</vh></v>
</v>
<v t="yen.20210612081822.1131"><vh>@menu &amp;Sort Nodes</vh>
<v t="yen.20210612081822.1132"><vh>@item sort-childre&amp;n</vh></v>
<v t="yen.20210612081822.1133"><vh>@item &amp;sort-siblings</vh></v>
</v>
</v>
<v t="yen.20210612081822.1134"><vh>@menu &amp;Plugins</vh>
<v t="yen.20210612081822.1135"><vh>@item show-plugins-info</vh></v>
<v t="yen.20210612081822.1136"><vh>@item -</vh></v>
</v>
<v t="yen.20210612081822.1137"><vh>@menu Run</vh>
<v t="yen.20210612081822.1138"><vh>@item &amp;help-for-minibuffer</vh></v>
<v t="yen.20210612081822.1139"><vh>@item &amp;execute-script</vh></v>
<v t="yen.20210612081822.1140"><vh>@item &amp;full-command</vh></v>
<v t="yen.20210612081822.1141"><vh>@item &amp;keyboard-quit</vh></v>
<v t="yen.20210612081822.1142"><vh>@item &amp;repeat-complex-command</vh></v>
<v t="yen.20210612081822.1143"><vh>@item &amp;view-lossage</vh></v>
<v t="yen.20210612081822.1144"><vh>@item -</vh></v>
<v t="yen.20210612081822.1145"><vh>@item &amp;eval</vh></v>
<v t="yen.20210612081822.1146"><vh>@item &amp;eval-block</vh></v>
<v t="yen.20210612081822.1147"><vh>@item &amp;eval-last</vh></v>
<v t="yen.20210612081822.1148"><vh>@item &amp;eval-last-pretty</vh></v>
<v t="yen.20210612081822.1149"><vh>@item &amp;eval-replace</vh></v>
<v t="yen.20210612081822.1150"><vh>@item -</vh></v>
<v t="yen.20210612081822.1151"><vh>@menu &amp;Control Garbage Collection</vh>
<v t="yen.20210612081822.1152"><vh>@item gc-&amp;collect-garbage</vh></v>
<v t="yen.20210612081822.1153"><vh>@item gc-dump-&amp;all-objects</vh></v>
<v t="yen.20210612081822.1154"><vh>@item gc-dump-&amp;new-objects</vh></v>
<v t="yen.20210612081822.1155"><vh>@item gc-dump-objects-&amp;verbose</vh></v>
<v t="yen.20210612081822.1156"><vh>@item gc-show-&amp;summary</vh></v>
</v>
<v t="yen.20210612081822.1157"><vh>@menu &amp;Execute Shell Commands</vh>
<v t="yen.20210612081822.1158"><vh>@item &amp;open-python-window</vh></v>
<v t="yen.20210612081822.1159"><vh>@item &amp;shell-command</vh></v>
<v t="yen.20210612081822.1160"><vh>@item &amp;shell-command-on-region</vh></v>
</v>
<v t="yen.20210612081822.1161"><vh>@menu &amp;Invoke Debuggers</vh>
<v t="yen.20210612081822.1162"><vh>@item debug</vh></v>
<v t="yen.20210612081822.1163"><vh>@item pdb</vh></v>
</v>
<v t="yen.20210612081822.1164"><vh>@menu &amp;Run Unit Tests</vh>
<v t="yen.20210612081822.1165"><vh>@item run-&amp;all-unit-tests-locally</vh></v>
<v t="yen.20210612081822.1166"><vh>@item run-&amp;marked-unit-tests-locally</vh></v>
<v t="yen.20210612081822.1167"><vh>@item run-&amp;selected-unit-tests-locally</vh></v>
<v t="yen.20210612081822.1168"><vh>@item -</vh></v>
<v t="yen.20210612081822.1169"><vh>@item run-&amp;all-unit-tests-externally</vh></v>
<v t="yen.20210612081822.1170"><vh>@item run-&amp;marked-unit-tests-externally</vh></v>
<v t="yen.20210612081822.1171"><vh>@item run-&amp;selected-unit-tests-externally</vh></v>
</v>
</v>
<v t="yen.20210612081822.1172"><vh>@menu &amp;Window</vh>
<v t="yen.20210612081822.1173"><vh>@item &amp;cascade-windows</vh></v>
<v t="yen.20210612081822.1174"><vh>@item &amp;equal-sized-panes</vh></v>
<v t="yen.20210612081822.1175"><vh>@item &amp;minimize-all</vh></v>
<v t="yen.20210612081822.1176"><vh>@item &amp;resize-to-screen</vh></v>
<v t="yen.20210612081822.1177"><vh>@item toggle-&amp;split-direction</vh></v>
<v t="yen.20210612081822.1178"><vh>@item -</vh></v>
<v t="yen.20210612081822.1179"><vh>@menu &amp;Add/Delete Body Editors</vh>
<v t="yen.20210612081822.1180"><vh>@item &amp;add-editor</vh></v>
<v t="yen.20210612081822.1181"><vh>@item &amp;delete-editor</vh></v>
</v>
<v t="yen.20210612081822.1182"><vh>@menu &amp;Window Layout</vh>
<v t="yen.20210612081822.1183"><vh>@item free-layout-context-menu</vh></v>
<v t="yen.20210612081822.1184"><vh>@item free-layout-load</vh></v>
<v t="yen.20210612081822.1185"><vh>@item free-layout-restore</vh></v>
<v t="yen.20210612081822.1186"><vh>@item free-layout-zoom</vh></v>
</v>
<v t="yen.20210612081822.1187"><vh>@menu &amp;Scroll Text Areas</vh>
<v t="yen.20210612081822.1188"><vh>@item scroll-outline-down-&amp;line</vh></v>
<v t="yen.20210612081822.1189"><vh>@item scroll-outline-down-&amp;page</vh></v>
<v t="yen.20210612081822.1190"><vh>@item scroll-outline-le&amp;ft</vh></v>
<v t="yen.20210612081822.1191"><vh>@item scroll-outline-&amp;right</vh></v>
<v t="yen.20210612081822.1192"><vh>@item s&amp;croll-outline-up-line</vh></v>
<v t="yen.20210612081822.1193"><vh>@item scr&amp;oll-outline-up-page</vh></v>
<v t="yen.20210612081822.1194"><vh>@item -</vh></v>
<v t="yen.20210612081822.1195"><vh>@item scroll-down-half-page</vh></v>
<v t="yen.20210612081822.1196"><vh>@item scroll-down-line</vh></v>
<v t="yen.20210612081822.1197"><vh>@item scroll-&amp;down-page</vh></v>
<v t="yen.20210612081822.1198"><vh>@item scroll-up-half-page</vh></v>
<v t="yen.20210612081822.1199"><vh>@item scroll-up-line</vh></v>
<v t="yen.20210612081822.1200"><vh>@item scroll-&amp;up-page</vh></v>
</v>
<v t="yen.20210612081822.1201"><vh>@menu &amp;Set Focus</vh>
<v t="yen.20210612081822.1202"><vh>@item &amp;toggle-active-pane</vh></v>
<v t="yen.20210612081822.1203"><vh>@item -</vh></v>
<v t="yen.20210612081822.1204"><vh>@item focus-to-&amp;body</vh></v>
<v t="yen.20210612081822.1205"><vh>@item focus-to-&amp;log</vh></v>
<v t="yen.20210612081822.1206"><vh>@item focus-to-&amp;find</vh></v>
<v t="yen.20210612081822.1207"><vh>@item focus-to-&amp;minibuffer</vh></v>
<v t="yen.20210612081822.1208"><vh>@item focus-to-&amp;spell-tab</vh></v>
<v t="yen.20210612081822.1209"><vh>@item focus-to-&amp;tree</vh></v>
</v>
</v>
<v t="yen.20210612081822.1210"><vh>@menu &amp;Help</vh>
<v t="yen.20210612081822.1211"><vh>@item &amp;about-leo</vh></v>
<v t="yen.20210612081822.1212"><vh>@item -</vh></v>
<v t="yen.20210612081822.1213"><vh>@menu &amp;Open Help topics</vh>
<v t="yen.20210612081822.1214"><vh>@item help</vh></v>
<v t="yen.20210612081822.1215"><vh>@item help-for-&amp;abbreviations</vh></v>
<v t="yen.20210612081822.1216"><vh>@item help-for-&amp;autocompletion</vh></v>
<v t="yen.20210612081822.1217"><vh>@item help-for-&amp;bindings</vh></v>
<v t="yen.20210612081822.1218"><vh>@item help-for-&amp;command</vh></v>
<v t="yen.20210612081822.1219"><vh>@item help-for-&amp;creating-external-files</vh></v>
<v t="yen.20210612081822.1220"><vh>@item help-for-&amp;drag-and-drop</vh></v>
<v t="yen.20210612081822.1221"><vh>@item help-for-&amp;debugging-commands</vh></v>
<v t="yen.20210612081822.1222"><vh>@item help-for-&amp;dynamic-abbreviations</vh></v>
<v t="yen.20210612081822.1223"><vh>@item help-for-&amp;find-commands</vh></v>
<v t="yen.20210612081822.1224"><vh>@item help-for-&amp;keystroke</vh></v>
<v t="yen.20210612081822.1225"><vh>@item help-for-&amp;minibuffer</vh></v>
<v t="yen.20210612081822.1226"><vh>@item help-for-&amp;python</vh></v>
<v t="yen.20210612081822.1227"><vh>@item help-for-&amp;scripting</vh></v>
<v t="yen.20210612081822.1228"><vh>@item help-for-&amp;regular-expressions</vh></v>
<v t="yen.20210612081822.1229"><vh>@item help-for-&amp;settings</vh></v>
</v>
<v t="yen.20210612081822.1230"><vh>@menu &amp;Open Tutorial Outlines</vh>
<v t="yen.20210612081822.1231"><vh>@item &amp;open-cheat-sheet-leo</vh></v>
<v t="yen.20210612081822.1232"><vh>@item &amp;open-leo-docs-leo</vh></v>
<v t="yen.20210612081822.1233"><vh>@item &amp;open-quickstart-leo</vh></v>
</v>
<v t="yen.20210612081822.1234"><vh>@menu &amp;Open Web Pages</vh>
<v t="yen.20210612081822.1235"><vh>@item &amp;open-online-home</vh></v>
<v t="yen.20210612081822.1236"><vh>@item &amp;open-online-toc</vh></v>
<v t="yen.20210612081822.1237"><vh>@item &amp;open-users-guide</vh></v>
<v t="yen.20210612081822.1238"><vh>@item &amp;open-online-tutorials</vh></v>
<v t="yen.20210612081822.1239"><vh>@item &amp;open-online-videos</vh></v>
</v>
</v>
</v>
<v t="yen.20210612081822.1240"><vh>@popup_menus</vh>
<v t="yen.20210612081822.1241"><vh>Main Context Menus</vh>
<v t="yen.20210612081822.1242"><vh>@popup body</vh>
<v t="yen.20210612081822.1243"><vh>@item &amp;</vh></v>
<v t="yen.20210612081822.1244"><vh>@item -</vh></v>
<v t="yen.20210612081822.1245"><vh>@menu Block Operations</vh>
<v t="yen.20210612081822.1246"><vh>@item indent-region</vh></v>
<v t="yen.20210612081822.1247"><vh>@item dedent-region</vh></v>
<v t="yen.20210612081822.1248"><vh>@item -</vh></v>
<v t="yen.20210612081822.1249"><vh>@item add-comments</vh></v>
<v t="yen.20210612081822.1250"><vh>@item delete-comments</vh></v>
</v>
<v t="yen.20210612081822.1251"><vh>@item &amp;</vh></v>
<v t="yen.20210612081822.1252"><vh>@item -</vh></v>
<v t="yen.20210612081822.1253"><vh>@item match-brackets</vh></v>
<v t="yen.20210612081822.1254"><vh>@item execute-script</vh></v>
<v t="yen.20210612081822.1255"><vh>@item *</vh></v>
</v>
<v t="yen.20210612081822.1256"><vh>@popup log</vh>
<v t="yen.20210612081822.1257"><vh>@item &amp;</vh></v>
</v>
<v t="yen.20210612081822.1258"><vh>@popup find-text</vh>
<v t="yen.20210612081822.1259"><vh>@item &amp;</vh></v>
</v>
<v t="yen.20210612081822.1260"><vh>@popup change-text</vh>
<v t="yen.20210612081822.1261"><vh>@item &amp;</vh></v>
</v>
<v t="yen.20210612081822.1262"><vh>@popup canvas</vh>
<v t="yen.20210612081822.1263"><vh>@item &amp;</vh></v>
<v t="yen.20210612081822.1264"><vh>@item -</vh></v>
<v t="yen.20210612081822.1265"><vh>@item create-chapter</vh></v>
<v t="yen.20210612081822.1266"><vh>@item remove-chapter</vh></v>
</v>
<v t="yen.20210612081822.1267"><vh>@popup headline</vh></v>
<v t="yen.20210612081822.1268"><vh>@popup iconbox</vh></v>
<v t="yen.20210612081822.1269"><vh>@popup plusbox</vh></v>
</v>
<v t="yen.20210612081822.1270"><vh>Fragments</vh>
<v t="yen.20210612081822.1271"><vh>@popup edit-menu</vh>
<v t="yen.20210612081822.1272"><vh>@item rclick-cut-text</vh></v>
<v t="yen.20210612081822.1273"><vh>@item rclick-copy-text</vh></v>
<v t="yen.20210612081822.1274"><vh>@item rclick-paste-text</vh></v>
<v t="yen.20210612081822.1275"><vh>@item -</vh></v>
<v t="yen.20210612081822.1276"><vh>@item rclick-select-all</vh></v>
</v>
<v t="yen.20210612081822.1277"><vh>@popup recent-files-menu</vh>
<v t="yen.20210612081822.1278"><vh>@menu Recent Files</vh>
<v t="yen.20210612081822.1279"><vh>@item *</vh></v>
</v>
</v>
<v t="yen.20210612081822.1280"><vh>@popup to-chapter-fragment</vh>
<v t="yen.20210612081822.1281"><vh>@menu Clone to Chapter</vh>
<v t="yen.20210612081822.1282"><vh>@item *</vh></v>
</v>
<v t="yen.20210612081822.1283"><vh>@menu Copy to Chapter</vh>
<v t="yen.20210612081822.1284"><vh>@item *</vh></v>
</v>
<v t="yen.20210612081822.1285"><vh>@menu Move to Chapter</vh>
<v t="yen.20210612081822.1286"><vh>@item *</vh></v>
</v>
<v t="yen.20210612081822.1287"><vh>@menu Select Chapter</vh>
<v t="yen.20210612081822.1288"><vh>@item *</vh></v>
</v>
</v>
</v>
</v>
<v t="yen.20210612081822.1289"><vh>Qt context menu</vh>
<v t="yen.20210612081822.1290"><vh>@data contextmenu-commands</vh></v>
</v>
<v t="yen.20210612081822.1291"><vh>Open With menu</vh>
<v t="yen.20210612081822.1292"><vh>@ifplatform linux, linux2</vh>
<v t="yen.20210612081822.1293"><vh>@openwith Scite = Alt+Shift+Ctrl+S</vh></v>
</v>
<v t="yen.20210612081822.1294"><vh>@ifplatform win32</vh>
<v t="yen.20210612081822.1295"><vh>@openwith Idle = Alt+Shift+Ctrl+I</vh></v>
<v t="yen.20210612081822.1296"><vh>@openwith Open-Office = Alt+Shift+Ctrl+O</vh></v>
<v t="yen.20210612081822.1297"><vh>@openwith Scite = Alt+Shift+Ctrl+S</vh></v>
<v t="yen.20210612081822.1298"><vh>@openwith Word = Alt+Shift+Ctrl+W </vh></v>
<v t="yen.20210612081822.1299"><vh>@@openwith Wordpad = Alt+Shift+Ctrl+T</vh></v>
</v>
<v t="yen.20210612081822.1300"><vh>@bool open-with-save-on-update = True</vh></v>
<v t="yen.20210612081822.1301"><vh>@bool open-with-goto-node-on-update = True</vh></v>
<v t="yen.20210612081822.1302"><vh>@bool open-with-clean-filenames = False</vh></v>
<v t="yen.20210612081822.1303"><vh>@bool open-with-uses-derived-file-extensions = False</vh></v>
</v>
<v t="yen.20210612081822.1304"><vh>@outline-data settings-finder-menu</vh>
<v t="yen.20210612081822.1305"><vh>Colors</vh>
<v t="yen.20210612081822.1306"><vh>Body pane</vh>
<v t="yen.20210612081822.1307"><vh>Background</vh></v>
<v t="yen.20210612081822.1308"><vh>Foreground</vh></v>
<v t="yen.20210612081822.1309"><vh>Selected foreground</vh></v>
<v t="yen.20210612081822.1310"><vh>Selected background</vh></v>
</v>
<v t="yen.20210612081822.1311"><vh>Border colors</vh>
<v t="yen.20210612081822.1312"><vh>Focused border</vh></v>
<v t="yen.20210612081822.1313"><vh>Not focused border</vh></v>
</v>
<v t="yen.20210612081822.1314"><vh>Button background colors</vh>
<v t="yen.20210612081822.1315"><vh>Run script</vh></v>
<v t="yen.20210612081822.1316"><vh>Debug script</vh></v>
<v t="yen.20210612081822.1317"><vh>Script button</vh></v>
<v t="yen.20210612081822.1318"><vh>Script</vh></v>
<v t="yen.20210612081822.1319"><vh>Generic</vh></v>
<v t="yen.20210612081822.1320"><vh>Quick move</vh></v>
<v t="yen.20210612081822.1321"><vh>Interact</vh></v>
<v t="yen.20210612081822.1322"><vh>At button</vh></v>
</v>
<v t="yen.20210612081822.1323"><vh>Find tab colors</vh>
<v t="yen.20210612081822.1324"><vh>Find tab background</vh></v>
</v>
<v t="yen.20210612081822.1325"><vh>Gutter colors</vh>
<v t="yen.20210612081822.1326"><vh>Gutter background</vh></v>
<v t="yen.20210612081822.1327"><vh>Gutter foreground</vh></v>
</v>
<v t="yen.20210612081822.1328"><vh>Log pane colors</vh>
<v t="yen.20210612081822.1329"><vh>Log foreground</vh></v>
<v t="yen.20210612081822.1330"><vh>Log background</vh></v>
</v>
<v t="yen.20210612081822.1331"><vh>Minibuffer colors</vh>
<v t="yen.20210612081822.1332"><vh>Foreground</vh></v>
<v t="yen.20210612081822.1333"><vh>Background</vh></v>
<v t="yen.20210612081822.1334"><vh>Select foreground</vh></v>
<v t="yen.20210612081822.1335"><vh>Select background</vh></v>
</v>
<v t="yen.20210612081822.1336"><vh>Outline colors</vh>
<v t="yen.20210612081822.1337"><vh>Basic outline colors</vh>
<v t="yen.20210612081822.1338"><vh>Tree foreground</vh></v>
<v t="yen.20210612081822.1339"><vh>Tree background</vh></v>
</v>
<v t="yen.20210612081822.1340"><vh>Colors for headlines that *are* being edited</vh>
<v t="yen.20210612081822.1341"><vh>Head foreground</vh></v>
<v t="yen.20210612081822.1342"><vh>Head background</vh></v>
<v t="yen.20210612081822.1343"><vh>Head select foreground</vh></v>
<v t="yen.20210612081822.1344"><vh>Head select background</vh></v>
</v>
<v t="yen.20210612081822.1345"><vh>Colors for headlines that are *not* being edited</vh>
<v t="yen.20210612081822.1346"><vh>Edit label border</vh></v>
<v t="yen.20210612081822.1347"><vh>Edit label margin</vh></v>
<v t="yen.20210612081822.1348"><vh>Edit label background</vh></v>
<v t="yen.20210612081822.1349"><vh>Edit label foreground</vh></v>
</v>
</v>
<v t="yen.20210612081822.1350"><vh>Plugin colors (deprecated)</vh>
<v t="yen.20210612081822.1351"><vh>Text foreground</vh></v>
<v t="yen.20210612081822.1352"><vh>Text foreground body</vh></v>
<v t="yen.20210612081822.1353"><vh>Text foreground tree</vh></v>
<v t="yen.20210612081822.1354"><vh>Text foreground log</vh></v>
</v>
<v t="yen.20210612081822.1355"><vh>Render pane colors</vh>
<v t="yen.20210612081822.1356"><vh>Render background</vh></v>
<v t="yen.20210612081822.1357"><vh>Render foreground</vh></v>
</v>
<v t="yen.20210612081822.1358"><vh>Scroll area colors</vh>
<v t="yen.20210612081822.1359"><vh>Scroll area background</vh></v>
</v>
<v t="yen.20210612081822.1360"><vh>Splitter colors</vh>
<v t="yen.20210612081822.1361"><vh>Splitter background</vh></v>
<v t="yen.20210612081822.1362"><vh>Splitter handle background</vh></v>
<v t="yen.20210612081822.1363"><vh>Splitter border foreground</vh></v>
<v t="yen.20210612081822.1364"><vh>Splitter border style</vh></v>
</v>
<v t="yen.20210612081822.1365"><vh>Status area colors</vh>
<v t="yen.20210612081822.1366"><vh>Status background</vh></v>
<v t="yen.20210612081822.1367"><vh>Status foreground</vh></v>
<v t="yen.20210612081822.1368"><vh>Status border style</vh></v>
<v t="yen.20210612081822.1369"><vh>Status border color</vh></v>
</v>
<v t="yen.20210612081822.1370"><vh>Status area colors for searches</vh>
<v t="yen.20210612081822.1371"><vh>Found background</vh></v>
<v t="yen.20210612081822.1372"><vh>Found foreground</vh></v>
<v t="yen.20210612081822.1373"><vh>Not found background</vh></v>
<v t="yen.20210612081822.1374"><vh>Not found foreground</vh></v>
</v>
<v t="yen.20210612081822.1375"><vh>Widget colors (simple widgets)</vh>
<v t="yen.20210612081822.1376"><vh>Frame background</vh></v>
<v t="yen.20210612081822.1377"><vh>Stacked widget border color</vh></v>
<v t="yen.20210612081822.1378"><vh>Stacked widget background</vh></v>
<v t="yen.20210612081822.1379"><vh>Tabbed widget background</vh></v>
</v>
</v>
<v t="yen.20210612081822.1380"><vh>Fonts</vh>
<v t="yen.20210612081822.1381"><vh>Basic Fonts (change these first)</vh>
<v t="yen.20210612081822.1382"><vh>Family</vh></v>
<v t="yen.20210612081822.1383"><vh>Size</vh></v>
<v t="yen.20210612081822.1384"><vh>Medium size</vh></v>
<v t="yen.20210612081822.1385"><vh>Small size</vh></v>
<v t="yen.20210612081822.1386"><vh>Style</vh></v>
<v t="yen.20210612081822.1387"><vh>Weight</vh></v>
</v>
<v t="yen.20210612081822.1388"><vh>Body Fonts</vh>
<v t="yen.20210612081822.1389"><vh>Family</vh></v>
<v t="yen.20210612081822.1390"><vh>Size</vh></v>
<v t="yen.20210612081822.1391"><vh>Style</vh></v>
<v t="yen.20210612081822.1392"><vh>Weight</vh></v>
</v>
<v t="yen.20210612081822.1393"><vh>Dialog fonts</vh>
<v t="yen.20210612081822.1394"><vh>Family</vh></v>
<v t="yen.20210612081822.1395"><vh>Size</vh></v>
<v t="yen.20210612081822.1396"><vh>Weight</vh></v>
<v t="yen.20210612081822.1397"><vh>Style</vh></v>
</v>
<v t="yen.20210612081822.1398"><vh>Find Panel Fonts</vh>
<v t="yen.20210612081822.1399"><vh>Checkbox family</vh></v>
<v t="yen.20210612081822.1400"><vh>Checkbox size</vh></v>
<v t="yen.20210612081822.1401"><vh>Family</vh></v>
<v t="yen.20210612081822.1402"><vh>Size</vh></v>
<v t="yen.20210612081822.1403"><vh>Style</vh></v>
<v t="yen.20210612081822.1404"><vh>Weight</vh></v>
<v t="yen.20210612081822.1405"><vh>Pattern font family</vh></v>
</v>
<v t="yen.20210612081822.1406"><vh>Gutter Fonts</vh>
<v t="yen.20210612081822.1407"><vh>Family</vh></v>
<v t="yen.20210612081822.1408"><vh>Size</vh></v>
<v t="yen.20210612081822.1409"><vh>Style</vh></v>
<v t="yen.20210612081822.1410"><vh>Weight</vh></v>
</v>
<v t="yen.20210612081822.1411"><vh>Log pane fonts</vh>
<v t="yen.20210612081822.1412"><vh>Selection foreground</vh></v>
<v t="yen.20210612081822.1413"><vh>Selection background</vh></v>
<v t="yen.20210612081822.1414"><vh>Family</vh></v>
<v t="yen.20210612081822.1415"><vh>Size</vh></v>
<v t="yen.20210612081822.1416"><vh>Weight</vh></v>
<v t="yen.20210612081822.1417"><vh>Style</vh></v>
</v>
<v t="yen.20210612081822.1418"><vh>Minibuffer fonts</vh>
<v t="yen.20210612081822.1419"><vh>Family</vh></v>
<v t="yen.20210612081822.1420"><vh>Size</vh></v>
<v t="yen.20210612081822.1421"><vh>Weight</vh></v>
<v t="yen.20210612081822.1422"><vh>Style</vh></v>
</v>
<v t="yen.20210612081822.1423"><vh>Outline pane fonts</vh>
<v t="yen.20210612081822.1424"><vh>Basic outline fonts</vh>
<v t="yen.20210612081822.1425"><vh>Family</vh></v>
<v t="yen.20210612081822.1426"><vh>Size</vh></v>
<v t="yen.20210612081822.1427"><vh>Weight</vh></v>
<v t="yen.20210612081822.1428"><vh>Style</vh></v>
</v>
<v t="yen.20210612081822.1429"><vh>Fonts for headlines that *are* being edited</vh>
<v t="yen.20210612081822.1430"><vh>Family</vh></v>
<v t="yen.20210612081822.1431"><vh>Size</vh></v>
<v t="yen.20210612081822.1432"><vh>Weight</vh></v>
<v t="yen.20210612081822.1433"><vh>Style</vh></v>
</v>
<v t="yen.20210612081822.1434"><vh>Fonts for headlines that are *not* being edited</vh>
<v t="yen.20210612081822.1435"><vh>Family</vh></v>
<v t="yen.20210612081822.1436"><vh>Size</vh></v>
<v t="yen.20210612081822.1437"><vh>Weight</vh></v>
<v t="yen.20210612081822.1438"><vh>Style</vh></v>
</v>
</v>
<v t="yen.20210612081822.1439"><vh>Status area fonts</vh>
<v t="yen.20210612081822.1440"><vh>Family</vh></v>
<v t="yen.20210612081822.1441"><vh>Size</vh></v>
<v t="yen.20210612081822.1442"><vh>Weight</vh></v>
<v t="yen.20210612081822.1443"><vh>Style</vh></v>
</v>
</v>
<v t="yen.20210612081822.1444"><vh>Margins And borders</vh>
<v t="yen.20210612081822.1445"><vh>Dialogs styles</vh>
<v t="yen.20210612081822.1446"><vh>Border</vh></v>
<v t="yen.20210612081822.1447"><vh>Margin</vh></v>
</v>
<v t="yen.20210612081822.1448"><vh>Focus border styles</vh>
<v t="yen.20210612081822.1449"><vh>Style</vh></v>
<v t="yen.20210612081822.1450"><vh>Width</vh></v>
</v>
<v t="yen.20210612081822.1451"><vh>Gutter</vh>
<v t="yen.20210612081822.1452"><vh>Use gutter</vh></v>
<v t="yen.20210612081822.1453"><vh>Gutter w adjust</vh></v>
<v t="yen.20210612081822.1454"><vh>Gutter y adjust</vh></v>
</v>
<v t="yen.20210612081822.1455"><vh>Minibuffer styles</vh>
<v t="yen.20210612081822.1456"><vh>Border</vh></v>
<v t="yen.20210612081822.1457"><vh>Margin</vh></v>
</v>
<v t="yen.20210612081822.1458"><vh>Stacked widgets styles</vh>
<v t="yen.20210612081822.1459"><vh>Padding</vh></v>
</v>
<v t="yen.20210612081822.1460"><vh>Status area styles</vh>
<v t="yen.20210612081822.1461"><vh>Border width</vh></v>
</v>
<v t="yen.20210612081822.1462"><vh>Vim mode borders/colors</vh>
<v t="yen.20210612081822.1463"><vh>Normal border</vh></v>
<v t="yen.20210612081822.1464"><vh>Insert border</vh></v>
<v t="yen.20210612081822.1465"><vh>Visual border</vh></v>
</v>
</v>
<v t="yen.20210612081822.1466"><vh>Outline indicators</vh>
<v t="yen.20210612081822.1467"><vh>Tree image closed</vh></v>
<v t="yen.20210612081822.1468"><vh>Tree image open</vh></v>
<v t="yen.20210612081822.1469"><vh>Tree icon separation</vh></v>
</v>
<v t="yen.20210612081822.1470"><vh>Misc. plugins</vh>
<v t="yen.20210612081822.1471"><vh>Bookmarks plugin</vh>
<v t="yen.20210612081822.1472"><vh>Bookmarks base</vh>
<v t="yen.20210612081822.1473"><vh>Color</vh></v>
<v t="yen.20210612081822.1474"><vh>Border</vh></v>
<v t="yen.20210612081822.1475"><vh>Decoration</vh></v>
<v t="yen.20210612081822.1476"><vh>Family</vh></v>
<v t="yen.20210612081822.1477"><vh>Margin</vh></v>
<v t="yen.20210612081822.1478"><vh>Padding</vh></v>
<v t="yen.20210612081822.1479"><vh>Size</vh></v>
<v t="yen.20210612081822.1480"><vh>Style</vh></v>
<v t="yen.20210612081822.1481"><vh>Weight</vh></v>
</v>
<v t="yen.20210612081822.1482"><vh>Bookmarks children</vh>
<v t="yen.20210612081822.1483"><vh>Color</vh></v>
<v t="yen.20210612081822.1484"><vh>Decoration</vh></v>
<v t="yen.20210612081822.1485"><vh>Family</vh></v>
<v t="yen.20210612081822.1486"><vh>Size</vh></v>
<v t="yen.20210612081822.1487"><vh>Style</vh></v>
<v t="yen.20210612081822.1488"><vh>Weight</vh></v>
</v>
<v t="yen.20210612081822.1489"><vh>Bookmarks current</vh>
<v t="yen.20210612081822.1490"><vh>Color</vh></v>
<v t="yen.20210612081822.1491"><vh>Decoration</vh></v>
<v t="yen.20210612081822.1492"><vh>Size</vh></v>
<v t="yen.20210612081822.1493"><vh>Style</vh></v>
<v t="yen.20210612081822.1494"><vh>Weight</vh></v>
</v>
<v t="yen.20210612081822.1495"><vh>Bookmarks expanded</vh>
<v t="yen.20210612081822.1496"><vh>Color</vh></v>
<v t="yen.20210612081822.1497"><vh>Decoration</vh></v>
<v t="yen.20210612081822.1498"><vh>Size</vh></v>
<v t="yen.20210612081822.1499"><vh>Style</vh></v>
<v t="yen.20210612081822.1500"><vh>Weight</vh></v>
<v t="yen.20210612081822.1501"><vh>Size</vh></v>
</v>
</v>
<v t="yen.20210612081822.1502"><vh>Screencast plugin</vh>
<v t="yen.20210612081822.1503"><vh>Background</vh></v>
<v t="yen.20210612081822.1504"><vh>Font-family</vh></v>
<v t="yen.20210612081822.1505"><vh>Font-size</vh></v>
<v t="yen.20210612081822.1506"><vh>Font-weight</vh></v>
<v t="yen.20210612081822.1507"><vh>Font-style</vh></v>
</v>
</v>
</v>
</v>
<v t="yen.20210612081822.1508"><vh>Mouse</vh></v>
<v t="yen.20210612081822.1509"><vh>Plugins</vh>
<v t="yen.20210612081822.1510"><vh>@bool warn_when_plugins_fail_to_load = True</vh></v>
<v t="yen.20210612081822.1511"><vh>@enabled-plugins</vh>
<v t="yen.20210612081822.1512"><vh>Alphabetica list</vh></v>
<v t="yen.20210612081822.1513"><vh>Not recommended</vh></v>
</v>
<v t="yen.20210612081822.1514"><vh>active_path plugin</vh>
<v t="yen.20210612081822.1515"><vh>@string active-path-attype = auto</vh></v>
<v t="yen.20210612081822.1516"><vh>@string active-path-event = headdclick1</vh></v>
<v t="yen.20210612081822.1517"><vh>@data active-path-ignore</vh></v>
<v t="yen.20210612081822.1518"><vh>@data active-path-bin-open</vh></v>
<v t="yen.20210612081822.1519"><vh>@data active-path-autoload</vh></v>
<v t="yen.20210612081822.1520"><vh>@bool active-path-load-docstring = False</vh></v>
<v t="yen.20210612081822.1521"><vh>@float active-path-timeout-seconds = 10.</vh></v>
<v t="yen.20210612081822.1522"><vh>@int active-path-max-size = 1000000</vh></v>
</v>
<v t="yen.20210612081822.1523"><vh>autosave plugin</vh>
<v t="yen.20210612081822.1524"><vh>@bool mod-autosave-active = True</vh></v>
<v t="yen.20210612081822.1525"><vh>@int mod-autosave-interval = 300</vh></v>
</v>
<v t="yen.20210612081822.1526"><vh>backlink</vh>
<v t="yen.20210612081822.1527"><vh>@int backlink-name-levels = 0</vh></v>
</v>
<v t="yen.20210612081822.1528"><vh>bigdash</vh>
<v t="yen.20210612081822.1529"><vh>@int fts-max-hits = 30</vh></v>
</v>
<v t="yen.20210612081822.1530"><vh>bookmarks</vh>
<v t="yen.20210612081822.1531"><vh>@bool bookmarks-grab-dblclick = False</vh></v>
<v t="yen.20210612081822.1532"><vh>@int bookmarks-levels = 1</vh></v>
<v t="yen.20210612081822.1533"><vh>@data bookmarks-modifiers</vh></v>
</v>
<v t="yen.20210612081822.1534"><vh>datenodes plugin</vh>
<v t="yen.20210612081822.1535"><vh>@bool suppress-datenodes-menus = False</vh></v>
<v t="yen.20210612081822.1536"><vh>@string datenodes-body-text = To do...</vh></v>
<v t="yen.20210612081822.1537"><vh>@string datenodes-day-node-headline = %Y-%m-%d</vh></v>
<v t="yen.20210612081822.1538"><vh>@string datenodes-month-node-day-headline = %d: %A</vh></v>
<v t="yen.20210612081822.1539"><vh>@string datenodes-month-node-month-headline = %B %Y</vh></v>
<v t="yen.20210612081822.1540"><vh>@bool datenodes-month-node-omit-saturdays = True</vh></v>
<v t="yen.20210612081822.1541"><vh>@bool datenodes-month-node-omit-sundays = True</vh></v>
<v t="yen.20210612081822.1542"><vh>@string datenodes-year-node-day-headline = %d: %A</vh></v>
<v t="yen.20210612081822.1543"><vh>@string datenodes-year-node-month-headline = %B</vh></v>
<v t="yen.20210612081822.1544"><vh>@string datenodes-year-node-year-headline = %Y</vh></v>
<v t="yen.20210612081822.1545"><vh>@bool datenodes-year-node-omit-saturdays = True</vh></v>
<v t="yen.20210612081822.1546"><vh>@bool datenodes-year-node-omit-sundays = True</vh></v>
</v>
<v t="yen.20210612081822.1547"><vh>graphcanvas plugin</vh>
<v t="yen.20210612081822.1548"><vh>@bool graph-manual-layout = False</vh></v>
</v>
<v t="yen.20210612081822.1549"><vh>history_tracer plugin</vh>
<v t="yen.20210612081822.1550"><vh>@int history-tracer-port=8087</vh></v>
</v>
<v t="yen.20210612081822.1551"><vh>leo_babel plugin</vh>
<v t="yen.20210612081822.1552"><vh>@bool Leo-Babel-Node-Creation-Default = True</vh></v>
</v>
<v t="yen.20210612081822.1553"><vh>leo_to_html plugin</vh>
<v t="yen.20210612081822.1554"><vh>@bool leo-to-html-no-menus = False</vh></v>
</v>
<v t="yen.20210612081822.1555"><vh>leoscreen plugin</vh>
<v t="yen.20210612081822.1556"><vh>@string leoscreen-prefix = None</vh></v>
<v t="yen.20210612081822.1557"><vh>@string leoscreen-time-fmt = %Y-%m-%d %H:%M:%S</vh></v>
</v>
<v t="yen.20210612081822.1558"><vh>mime plugin</vh>
<v t="yen.20210612081822.1559"><vh>@string mime-open-cmd = None</vh></v>
</v>
<v t="yen.20210612081822.1560"><vh>mod_http plugin</vh>
<v t="yen.20210612081822.1561"><vh>@bool http-active = True</vh></v>
<v t="yen.20210612081822.1562"><vh>@int http-port = 8130</vh></v>
<v t="yen.20210612081822.1563"><vh>@string http-ip = 127.0.0.1</vh></v>
<v t="yen.20210612081822.1564"><vh>@string rst2-http-attributename = None</vh></v>
<v t="yen.20210612081822.1565"><vh>@string http-bookmark-unl = None</vh></v>
<v t="yen.20210612081822.1566"><vh>mod_http script</vh>
<v t="yen.20210612081822.1567"><vh>@data http-script</vh></v>
</v>
<v t="yen.20210612081822.1568"><vh>mod_http stylesheet</vh>
<v t="yen.20210612081822.1569"><vh>@data http-stylesheet</vh></v>
<v t="yen.20210612081822.1570"><vh>@@data http_stylesheet</vh></v>
</v>
</v>
<v t="yen.20210612081822.1571"><vh>mod_scripting plugin</vh>
<v t="yen.20210612081822.1572"><vh>@string mod-scripting-subtext = ▼</vh></v>
<v t="yen.20210612081822.1573"><vh>@bool eval-redirect = False</vh></v>
<v t="yen.20210612081822.1574"><vh>@bool legacy-eval = False</vh></v>
</v>
<v t="yen.20210612081822.1575"><vh>nodeActions plugin</vh>
<v t="yen.20210612081822.1576"><vh>@bool nodeActions-save-atFile-nodes = False</vh></v>
<v t="yen.20210612081822.1577"><vh>@int nodeActions-message-level = 1</vh></v>
</v>
<v t="yen.20210612081822.1578"><vh>nodediff plugin</vh>
<v t="yen.20210612081822.1579"><vh>@string node-diff-style = compare</vh></v>
</v>
<v t="yen.20210612081822.1580"><vh>nodewatch plugin</vh>
<v t="yen.20210612081822.1581"><vh>@bool nodewatch-autoexecute-scripts = False</vh></v>
</v>
<v t="yen.20210612081822.1582"><vh>opml plugin</vh>
<v t="yen.20210612081822.1583"><vh>@bool opml-read-derived-files = True</vh></v>
<v t="yen.20210612081822.1584"><vh>@bool opml-use-outline-elements = True</vh></v>
<v t="yen.20210612081822.1585"><vh>@string opml-version = 2.0</vh></v>
<v t="yen.20210612081822.1586"><vh>@bool opml-write-body-text = True</vh></v>
<v t="yen.20210612081822.1587"><vh>@bool opml-write-derived-files = True</vh></v>
<v t="yen.20210612081822.1588"><vh>@bool opml-write-leo-details = True</vh></v>
<v t="yen.20210612081822.1589"><vh>@bool opml-write-leo-globals-attributes = True</vh></v>
<v t="yen.20210612081822.1590"><vh>@bool opml-write-uAs = True</vh></v>
<v t="yen.20210612081822.1591"><vh>@string opml-namespace = leo:com:leo-opml-version-1</vh></v>
</v>
<v t="yen.20210612081822.1592"><vh>printing plugin</vh>
<v t="yen.20210612081822.1593"><vh>@string printing-font-size = 12</vh></v>
<v t="yen.20210612081822.1594"><vh>@string printing-font-family = DejaVu Sans Mono</vh></v>
</v>
<v t="yen.20210612081822.1595"><vh>richtext plugin</vh>
<v t="yen.20210612081822.1596"><vh>@bool richtext-cke-autosave = False</vh></v>
<v t="yen.20210612081822.1597"><vh>@data richtext-cke-config</vh></v>
</v>
<v t="yen.20210612081822.1598"><vh>rss plugin</vh>
<v t="yen.20210612081822.1599"><vh>@string rss-headline-format = [&lt;date&gt;] &lt;title&gt;</vh></v>
<v t="yen.20210612081822.1600"><vh>@data rss-body-format</vh></v>
<v t="yen.20210612081822.1601"><vh>@string rss-date-format = %Y-%m-%d %I:%M %p</vh></v>
<v t="yen.20210612081822.1602"><vh>@bool rss-sort-newest-first = True</vh></v>
</v>
<v t="yen.20210612081822.1603"><vh>screencapture plugin</vh>
<v t="yen.20210612081822.1604"><vh>@string screen-capture-save-path = None</vh></v>
</v>
<v t="yen.20210612081822.1605"><vh>screenshot plugin</vh>
<v t="yen.20210612081822.1606"><vh>@string screenshot-bin = "c:\Program Files (x86)\Inkscape\inkscape.exe"</vh></v>
</v>
<v t="yen.20210612081822.1607"><vh>scripting plugin</vh>
<v t="yen.20210612081822.1608"><vh>@bool scripting-at-button-nodes = True</vh></v>
<v t="yen.20210612081822.1609"><vh>@bool scripting-at-rclick-nodes = False</vh></v>
<v t="yen.20210612081822.1610"><vh>@bool scripting-at-commands-nodes = True</vh></v>
<v t="yen.20210612081822.1611"><vh>@bool scripting-at-plugin-nodes = False</vh></v>
<v t="yen.20210612081822.1612"><vh>@bool scripting-at-script-nodes = False</vh></v>
<v t="yen.20210612081822.1613"><vh>@bool scripting-create-debug-button = False</vh></v>
<v t="yen.20210612081822.1614"><vh>@bool scripting-create-run-script-button = False</vh></v>
<v t="yen.20210612081822.1615"><vh>@bool scripting-create-script-button-button = True</vh></v>
<v t="yen.20210612081822.1616"><vh>@int scripting-max-button-size = 18</vh></v>
</v>
<v t="yen.20210612081822.1617"><vh>sftp plugin</vh>
<v t="yen.20210612081822.1618"><vh>@bool sftp-cache-credentials = True</vh></v>
</v>
<v t="yen.20210612081822.1619"><vh>viewrendered plugin</vh>
<v t="yen.20210612081822.1620"><vh>@bool view-rendered-auto-create = False</vh></v>
<v t="yen.20210612081822.1621"><vh>@string view-rendered-default-kind = rst</vh></v>
<v t="yen.20210612081822.1622"><vh>@string view-rendered-md-extensions = extra</vh></v>
</v>
<v t="yen.20210612081822.1623"><vh>viewrendered3 plugin</vh>
<v t="yen.20210612081822.1624"><vh>@bool vr3-insert-headline-from-node = False</vh></v>
<v t="yen.20210612081822.1625"><vh>@bool vr3-math-output = False</vh></v>
<v t="yen.20210612081822.1626"><vh>@bool vr3-md-math-output = False</vh></v>
<v t="yen.20210612081822.1627"><vh>@bool vr3-prefer-asciidoc3 = False</vh></v>
<v t="yen.20210612081822.1628"><vh>@int qweb-view-font-size = 16</vh></v>
<v t="yen.20210612081822.1629"><vh>@string vr3-asciidoc-path = None</vh></v>
<v t="yen.20210612081822.1630"><vh>@string vr3-default-kind = None</vh></v>
<v t="yen.20210612081822.1631"><vh>@string vr3-mathjax-url = None</vh></v>
<v t="yen.20210612081822.1632"><vh>@string vr3-md-stylesheet = None</vh></v>
<v t="yen.20210612081822.1633"><vh>@string vr3-prefer-external = None</vh></v>
<v t="yen.20210612081822.1634"><vh>@string vr3-rst-stylesheet = None</vh></v>
</v>
<v t="yen.20210612081822.1635"><vh>vim plugin</vh>
<v t="yen.20210612081822.1636"><vh>@@string vim_cmd = c:\Program Files\vim\vim63\gvim --servername LEO</vh></v>
<v t="yen.20210612081822.1637"><vh>@@string vim_exe = c:\Program Files\vim\vim63\gvim</vh></v>
<v t="yen.20210612081822.1638"><vh>@bool vim-plugin-trace = False</vh></v>
<v t="yen.20210612081822.1639"><vh>@bool vim-plugin-opens-url-nodes = False</vh></v>
</v>
<v t="yen.20210612081822.1640"><vh>wikiview plugin</vh>
<v t="yen.20210612081822.1641"><vh>@data wikiview-link-patterns</vh></v>
<v t="yen.20210612081822.1642"><vh>@bool wikiview-active = True</vh></v>
</v>
<v t="yen.20210612081822.1643"><vh>xdb_pane plugin</vh>
<v t="yen.20210612081822.1644"><vh>@bool use-xdb-pane-output-area</vh></v>
</v>
<v t="yen.20210612081822.1645"><vh>xemacs plugin</vh>
<v t="yen.20210612081822.1646"><vh>@string xemacs-exe = c:\XEmacs\XEmacs-21.4.21\i586-pc-win32\xemacs.exe</vh></v>
</v>
<v t="yen.20210612081822.1647"><vh>zodb plugin</vh>
<v t="yen.20210612081822.1648"><vh>@string zodb-storage-file = c:\prog\zopeTemp\leo.fs</vh></v>
</v>
</v>
<v t="yen.20210612081822.1649"><vh>Qt Gui Misc settings</vh>
<v t="yen.20210612081822.1650"><vh>@bool qt-use-scintilla = False</vh></v>
<v t="yen.20210612081822.1651"><vh>@data qt-scintilla-styles</vh></v>
<v t="yen.20210612081822.1652"><vh>@int qt-cursor-width = 1</vh></v>
<v t="yen.20210612081822.1653"><vh>@int qt-scintilla-zoom-in = 0</vh></v>
<v t="yen.20210612081822.1654"><vh>@string qt-toolbar-location=top</vh></v>
</v>
<v t="yen.20210612081822.1655"><vh>Scripting</vh>
<v t="yen.20210612081822.1656"><vh>@bool show-full-tracebacks-in-scripts = False</vh></v>
</v>
<v t="yen.20210612081822.1657"><vh>Spell checking</vh>
<v t="yen.20210612081822.1658"><vh>@string enchant-language = en-US</vh></v>
<v t="yen.20210612081822.1659"><vh>@string enchant-local-dictionary = None</vh></v>
<v t="yen.20210612081822.1660"><vh>@string main-spelling-dictionary = None</vh></v>
</v>
<v t="yen.20210612081822.1661"><vh>Syntax coloring</vh>
<v t="yen.20210612081822.1662"><vh>@bool use-pygments = False</vh></v>
<v t="yen.20210612081822.1663"><vh>@bool use-pygments-styles = True</vh></v>
<v t="yen.20210612081822.1664"><vh>@string pygments-style-name = default</vh></v>
<v t="yen.20210612081822.1665"><vh>@bool color-doc-parts-as-rest = True</vh></v>
<v t="yen.20210612081822.1666"><vh>Default colors, used if no language-specific color are in effect</vh>
<v t="yen.20210612081822.1667"><vh>Colors for Leo constructs</vh>
<v t="yen.20210612081822.1668"><vh>@color doc-part-color = firebrick3</vh></v>
<v t="yen.20210612081822.1669"><vh>@color leo-keyword-color = #00aa00</vh></v>
<v t="yen.20210612081822.1670"><vh>@color section-name-color = red</vh></v>
<v t="yen.20210612081822.1671"><vh>@color show-invisibles-space-color = #E5E5E5</vh></v>
<v t="yen.20210612081822.1672"><vh>@color show-invisibles-tab-color = #CCCCCC</vh></v>
<v t="yen.20210612081822.1673"><vh>@color undefined-section-name-color = red</vh></v>
<v t="yen.20210612081822.1674"><vh>@color url-color = purple</vh></v>
</v>
<v t="yen.20210612081822.1675"><vh>Colors for standard jEdit tags</vh>
<v t="yen.20210612081822.1676"><vh>@color comment1-color = firebrick3</vh></v>
<v t="yen.20210612081822.1677"><vh>@color comment2-color = firebrick3</vh></v>
<v t="yen.20210612081822.1678"><vh>@color comment3-color = plum3</vh></v>
<v t="yen.20210612081822.1679"><vh>@color comment4-color = orchid1</vh></v>
<v t="yen.20210612081822.1680"><vh>@color keyword1-color = blue</vh></v>
<v t="yen.20210612081822.1681"><vh>@color keyword2-color = blue</vh></v>
<v t="yen.20210612081822.1682"><vh>@color keyword3-color = blue</vh></v>
<v t="yen.20210612081822.1683"><vh>@color keyword4-color = blue</vh></v>
<v t="yen.20210612081822.1684"><vh>@color label-color = red</vh></v>
<v t="yen.20210612081822.1685"><vh>@color literal1-color = #00aa00</vh></v>
<v t="yen.20210612081822.1686"><vh>@color literal2-color = #00aa00</vh></v>
<v t="yen.20210612081822.1687"><vh>@color literal3-color = #00aa00</vh></v>
<v t="yen.20210612081822.1688"><vh>@color literal4-color = #00aa00</vh></v>
<v t="yen.20210612081822.1689"><vh>@color markup-color = blue</vh></v>
<v t="yen.20210612081822.1690"><vh>@color operator-color = None</vh></v>
</v>
<v t="yen.20210612081822.1691"><vh>Colors for pygments tags</vh>
<v t="yen.20210612081822.1692"><vh>@color comment = solarized-orange</vh></v>
<v t="yen.20210612081822.1693"><vh>@color comment.single = solarized-orange</vh></v>
<v t="yen.20210612081822.1694"><vh>@color generic.deleted = solarized-red</vh></v>
<v t="yen.20210612081822.1695"><vh>@color generic.emph = solarized-blue</vh></v>
<v t="yen.20210612081822.1696"><vh>@color generic.heading = solarized-magenta</vh></v>
<v t="yen.20210612081822.1697"><vh>@color generic.inserted = alt-solarized-green</vh></v>
<v t="yen.20210612081822.1698"><vh>@color generic.strong = solarized-blue</vh></v>
<v t="yen.20210612081822.1699"><vh>@color generic.subheading = solarized-magenta</vh></v>
<v t="yen.20210612081822.1700"><vh>@color keyword = solarized-blue</vh></v>
<v t="yen.20210612081822.1701"><vh>@color name = white</vh></v>
<v t="yen.20210612081822.1702"><vh>@color name.class = white</vh></v>
<v t="yen.20210612081822.1703"><vh>@color name.decorator = solarized-orange</vh></v>
<v t="yen.20210612081822.1704"><vh>@color name.entity = solarized-blue</vh></v>
<v t="yen.20210612081822.1705"><vh>@color name.function = white</vh></v>
<v t="yen.20210612081822.1706"><vh>@color name.other = solarized-red</vh></v>
<v t="yen.20210612081822.1707"><vh>@color name.tag = solarized-magenta</vh></v>
<v t="yen.20210612081822.1708"><vh>@color string = alt-solarized-green</vh></v>
<v t="yen.20210612081822.1709"><vh>@color string.doc = solarized-orange</vh></v>
<v t="yen.20210612081822.1710"><vh>@color string.double = alt-solarized-green</vh></v>
<v t="yen.20210612081822.1711"><vh>@color string.interpol = alt-solarized-green</vh></v>
<v t="yen.20210612081822.1712"><vh>@color string.single = alt-solarized-green</vh></v>
</v>
</v>
<v t="yen.20210612081822.1713"><vh>Language-specific fonts and colors</vh>
<v t="yen.20210612081822.1714"><vh>patch</vh>
<v t="yen.20210612081822.1715"><vh>@color patch-keyword1-color = green</vh></v>
<v t="yen.20210612081822.1716"><vh>@color patch-keyword2-color = red</vh></v>
<v t="yen.20210612081822.1717"><vh>@color patch-keyword3-color = blue</vh></v>
<v t="yen.20210612081822.1718"><vh>@color patch-literal1-color = blue</vh></v>
<v t="yen.20210612081822.1719"><vh>@color patch-literal2-color = blue</vh></v>
</v>
<v t="yen.20210612081822.1720"><vh>php</vh>
<v t="yen.20210612081822.1721"><vh>@color php-operator-color = DodgerBlue1</vh></v>
<v t="yen.20210612081822.1722"><vh>@font php keyword fonts</vh></v>
</v>
<v t="yen.20210612081822.1723"><vh>Forth fonts, colors &amp; settings</vh>
<v t="yen.20210612081822.1724"><vh>@color forth-keyword3-color = black</vh></v>
<v t="yen.20210612081822.1725"><vh>@color forth-keyword4-color = black</vh></v>
<v t="yen.20210612081822.1726"><vh>@color forth-keyword5-color = black</vh></v>
<v t="yen.20210612081822.1727"><vh>@data forth-bold-italic-words</vh></v>
<v t="yen.20210612081822.1728"><vh>@data forth-bold-words</vh></v>
<v t="yen.20210612081822.1729"><vh>@data forth-defwords</vh></v>
<v t="yen.20210612081822.1730"><vh>@data forth-delimiter-pairs</vh></v>
<v t="yen.20210612081822.1731"><vh>@data forth-italic-words</vh></v>
<v t="yen.20210612081822.1732"><vh>@data forth-string-word-pairs</vh></v>
<v t="yen.20210612081822.1733"><vh>@data forth-words</vh></v>
<v t="yen.20210612081822.1734"><vh>@font forth keyword2_font</vh></v>
<v t="yen.20210612081822.1735"><vh>@font forth keyword3_font</vh></v>
<v t="yen.20210612081822.1736"><vh>@font forth keyword4_font</vh></v>
<v t="yen.20210612081822.1737"><vh>@font forth keyword5_font</vh></v>
</v>
</v>
<v t="yen.20210612081822.1738"><vh>Options</vh>
<v t="yen.20210612081822.1739"><vh>@bool color-cweb-comments-with-latex = True</vh></v>
<v t="yen.20210612081822.1740"><vh>@bool color-cweb-doc-parts-with-latex = True</vh></v>
<v t="yen.20210612081822.1741"><vh>@bool color-directives-in-plain-text = True</vh></v>
<v t="yen.20210612081822.1742"><vh>@bool color-trailing-whitespace = True</vh></v>
<v t="yen.20210612081822.1743"><vh>@bool show-invisibles-by-default = False</vh></v>
<v t="yen.20210612081822.1744"><vh>@bool underline-undefined-section-names = True</vh></v>
<v t="yen.20210612081822.1745"><vh>@bool use-hyperlinks = False</vh></v>
<v t="yen.20210612081822.1746"><vh>@bool use-syntax-coloring = True</vh></v>
<v t="yen.20210612081822.1747"><vh>@int qt-max-colorized-chars = 0</vh></v>
</v>
</v>
<v t="yen.20210612081822.1748"><vh>Tree operation</vh>
<v t="yen.20210612081822.1749"><vh>@bool collapse-nodes-after-move = True</vh></v>
<v t="yen.20210612081822.1750"><vh>@bool collapse-nodes-during-finds = True</vh></v>
<v t="yen.20210612081822.1751"><vh>@bool collapse-nodes-while-spelling = True</vh></v>
<v t="yen.20210612081822.1752"><vh>@bool collapse-on-lt-arrow = True</vh></v>
<v t="yen.20210612081822.1753"><vh>@bool contractVisitedNodes = True</vh></v>
<v t="yen.20210612081822.1754"><vh>@bool drag-alt-drag-expands = True</vh></v>
<v t="yen.20210612081822.1755"><vh>@bool enable-drag-messages = False</vh></v>
<v t="yen.20210612081822.1756"><vh>@bool enable-tree-dragging = True</vh></v>
<v t="yen.20210612081822.1757"><vh>@bool insert-new-nodes-at-end = False</vh></v>
<v t="yen.20210612081822.1758"><vh>@bool inter-outline-drag-moves = False</vh></v>
<v t="yen.20210612081822.1759"><vh>@bool invisible-outline-navigation = False</vh></v>
<v t="yen.20210612081822.1760"><vh>@bool qt-tree-multiple-selection = True</vh></v>
<v t="yen.20210612081822.1761"><vh>@bool single-click-auto-edits-headline = False</vh></v>
<v t="yen.20210612081822.1762"><vh>@bool sparse-move-outline-left = False</vh></v>
<v t="yen.20210612081822.1763"><vh>@bool stayInTreeAfterSelect = True</vh></v>
<v t="yen.20210612081822.1764"><vh>@float outline-nav-extend-delay = 2.0</vh></v>
<v t="yen.20210612081822.1765"><vh>@int icon-height = 16</vh></v>
</v>
<v t="yen.20210612081822.1766"><vh>Unicode options</vh>
<v t="yen.20210612081822.1767"><vh>@string new-leo-file-encoding = utf-8</vh></v>
<v t="yen.20210612081822.1768"><vh>@string default-at-auto-file-encoding = utf-8</vh></v>
<v t="yen.20210612081822.1769"><vh>@string default-derived-file-encoding = utf-8</vh></v>
</v>
<v t="yen.20210612081822.1770"><vh>Unit test option</vh>
<v t="yen.20210612081822.1771"><vh>@ifplatform win32</vh>
<v t="yen.20210612081822.1772"><vh>@bool test-win32-setting = True</vh></v>
</v>
<v t="yen.20210612081822.1773"><vh>@ifplatform darwin</vh>
<v t="yen.20210612081822.1774"><vh>@bool test-darwin-setting = True</vh></v>
</v>
</v>
<v t="yen.20210612081822.1775"><vh>Widget colors</vh>
<v t="yen.20210612081822.1776"><vh>@color split-bar-color = LightSteelBlue2</vh></v>
<v t="yen.20210612081822.1777"><vh>@int colorer-delay = 200</vh></v>
<v t="yen.20210612081822.1778"><vh>@int colorer-max-lines = 100</vh></v>
<v t="yen.20210612081822.1779"><vh>@string target-language = plain</vh></v>
<v t="yen.20210612081822.1780"><vh>Body pane colors (deprecated)</vh>
<v t="yen.20210612081822.1781"><vh>@color body-cursor-background-color = None</vh></v>
<v t="yen.20210612081822.1782"><vh>@color body-cursor-foreground-color = None</vh></v>
<v t="yen.20210612081822.1783"><vh>@color body-insertion-cursor-color = None</vh></v>
<v t="yen.20210612081822.1784"><vh>@color body-text-background-color = None</vh></v>
<v t="yen.20210612081822.1785"><vh>@color body-text-foreground-color = None</vh></v>
<v t="yen.20210612081822.1786"><vh>@color command-mode-bg-color = #f2fdff</vh></v>
<v t="yen.20210612081822.1787"><vh>@color command-mode-fg-color = None</vh></v>
<v t="yen.20210612081822.1788"><vh>@color insert-mode-bg-color = #fdf5f5</vh></v>
<v t="yen.20210612081822.1789"><vh>@color insert-mode-fg-color = black</vh></v>
<v t="yen.20210612081822.1790"><vh>@color overwrite-mode-bg-color = azure2</vh></v>
<v t="yen.20210612081822.1791"><vh>@color overwrite-mode-fg-color = black</vh></v>
<v t="yen.20210612081822.1792"><vh>@color unselected-body-bg-color = #ffffef</vh></v>
<v t="yen.20210612081822.1793"><vh>@color unselected-body-fg-color = black</vh></v>
</v>
<v t="yen.20210612081822.1794"><vh>Log pane colors</vh>
<v t="yen.20210612081822.1795"><vh>@color log-error-color = red</vh></v>
<v t="yen.20210612081822.1796"><vh>@color log-warning-color = blue</vh></v>
<v t="yen.20210612081822.1797"><vh>@color log-text-foreground-color = None</vh></v>
<v t="yen.20210612081822.1798"><vh>@color log-text-background-color = None</vh></v>
<v t="yen.20210612081822.1799"><vh>@color log-pane-background-color = #f2fdff</vh></v>
<v t="yen.20210612081822.1800"><vh>@color log-pane-Find-tab-background-color = #d6c7d3</vh></v>
<v t="yen.20210612081822.1801"><vh>@color log-pane-Spell-tab-background-color = MistyRose1</vh></v>
</v>
<v t="yen.20210612081822.1802"><vh>Minibuffer background colors</vh>
<v t="yen.20210612081822.1803"><vh>@color minibuffer-background-color = lightblue</vh></v>
<v t="yen.20210612081822.1804"><vh>@color minibuffer-error-color = red</vh></v>
<v t="yen.20210612081822.1805"><vh>@color minibuffer-foreground-color = black</vh></v>
<v t="yen.20210612081822.1806"><vh>@color minibuffer-warning-color = lightgrey</vh></v>
</v>
<v t="yen.20210612081822.1807"><vh>Tab colors</vh>
<v t="yen.20210612081822.1808"><vh>@color selected-tab-bg = @LightSteelBlue1</vh></v>
<v t="yen.20210612081822.1809"><vh>@color unselected-tab-bg = lightgrey</vh></v>
</v>
</v>
<v t="yen.20210612081822.1810"><vh>Windows</vh>
<v t="yen.20210612081822.1811"><vh>@data fixedWindowPosition</vh></v>
<v t="yen.20210612081822.1812"><vh>Body pane options</vh>
<v t="yen.20210612081822.1813"><vh>@bool cursor-stay-on-paste = True</vh></v>
<v t="yen.20210612081822.1814"><vh>@bool select-all-text-when-editing-headlines = False</vh></v>
<v t="yen.20210612081822.1815"><vh>@bool autoindent-in-nocolor-mode = True</vh></v>
<v t="yen.20210612081822.1816"><vh>@bool body-gmt-time = False</vh></v>
<v t="yen.20210612081822.1817"><vh>@bool body-pane-wraps = True</vh></v>
<v t="yen.20210612081822.1818"><vh>@bool enable-autocompleter-initially = False</vh></v>
<v t="yen.20210612081822.1819"><vh>@bool enable-calltips-initially = False</vh></v>
<v t="yen.20210612081822.1820"><vh>@bool smart-auto-indent = False</vh></v>
<v t="yen.20210612081822.1821"><vh>@bool smart-tab = True</vh></v>
<v t="yen.20210612081822.1822"><vh>@@@int additional_body_text_border = 0</vh></v>
<v t="yen.20210612081822.1823"><vh>@string body-time-format-string = %m/%d/%Y %H:%M:%S</vh></v>
</v>
<v t="yen.20210612081822.1824"><vh>Icon bar options</vh>
<v t="yen.20210612081822.1825"><vh>@bool show-iconbar = True</vh></v>
</v>
<v t="yen.20210612081822.1826"><vh>Log pane options</vh>
<v t="yen.20210612081822.1827"><vh>@bool log-pane-wraps = False</vh></v>
</v>
<v t="yen.20210612081822.1828"><vh>Options for new windows</vh>
<v t="yen.20210612081822.1829"><vh>@bool big-outline-pane = False</vh></v>
<v t="yen.20210612081822.1830"><vh>@bool outline-pane-has-initial-focus = False</vh></v>
<v t="yen.20210612081822.1831"><vh>@ratio initial-horizontal-ratio = 0.4</vh></v>
<v t="yen.20210612081822.1832"><vh>@ratio initial-horizontal-secondary-ratio = 0.8</vh></v>
<v t="yen.20210612081822.1833"><vh>@ratio initial-vertical-ratio = 0.5</vh></v>
<v t="yen.20210612081822.1834"><vh>@ratio initial-vertical-secondary-ratio = 0.65</vh></v>
<v t="yen.20210612081822.1835"><vh>@int initial-window-height = 600</vh></v>
<v t="yen.20210612081822.1836"><vh>@int initial-window-left =  20</vh></v>
<v t="yen.20210612081822.1837"><vh>@int initial-window-top = 20</vh></v>
<v t="yen.20210612081822.1838"><vh>@int initial-window-width = 800</vh></v>
</v>
<v t="yen.20210612081822.1839"><vh>Splitter options</vh>
<v t="yen.20210612081822.1840"><vh>@int split-bar-width = 6</vh></v>
<v t="yen.20210612081822.1841"><vh>@string initial-split-orientation = horizontal</vh></v>
<v t="yen.20210612081822.1842"><vh>@string split-bar-relief = groove</vh></v>
<v t="yen.20210612081822.1843"><vh>@string status-line-split-sizes = 1 2</vh></v>
</v>
<v t="yen.20210612081822.1844"><vh>@bool outline-tabs-show-close = True</vh></v>
</v>
</v>
<v t="yen.20200517131340.1"><vh>About blogger</vh>
<v t="yen.20200529224039.1"><vh>create credential token</vh>
<v t="leo.20210524091059.1"><vh>blogs</vh></v>
</v>
<v t="yen.20200517142620.1"><vh>blog content</vh></v>
<v t="yen.20200517131657.1"><vh>python ref</vh></v>
<v t="yen.20200517233837.1"><vh>Blogger 按鈕</vh>
<v t="yen.20200518055330.1"><vh>@button add_to_kblogger</vh></v>
<v t="yen.20200608205522.1"><vh>@button add_to_mblogger</vh></v>
<v t="leo.20200907150705.1"><vh>@button add_to_c4f</vh>
<v t="leo.20200907150705.2"><vh>@edit ./../../blogger.dat</vh></v>
</v>
<v t="yen.20200518110700.1"><vh>@button edit_to_kblogger</vh></v>
<v t="yen.20200608205624.1"><vh>@button edit_to_mblogger</vh></v>
<v t="leo.20200907071233.1"><vh>@button edit_to_c4f</vh></v>
</v>
<v t="yen.20200517195613.1"><vh>wordpress ref</vh>
<v t="yen.20200517200253.1"><vh>new post</vh></v>
<v t="yen.20200517200409.1"><vh>edit post</vh></v>
<v t="yen.20200517200437.1"><vh>get post </vh></v>
</v>
<v t="yen.20200517233108.1"><vh>markdown to html</vh></v>
<v t="yen.20200517132439.1"><vh>@path ./../downloads/</vh>
<v t="yen.20200517131915.1"><vh>@edit blogger_api_add_1.py</vh></v>
<v t="yen.20200517194513.1"><vh>googleapiclient.sample_tools.init</vh></v>
<v t="yen.20200517195040.1"><vh>@edit blogger_api_add_2.py</vh></v>
</v>
</v>
<v t="yen.20210612081616.1"><vh>@path ../</vh>
<v t="yen.20210612081616.2"><vh>@edit index.html</vh></v>
<v t="yen.20210612081616.3"><vh>@edit README.md</vh></v>
<v t="yen.20210612081616.4"><vh>@edit .gitignore</vh></v>
<v t="yen.20210612081616.5"><vh>沒有 disqus 論壇</vh>
<v t="yen.20210612081616.6"><vh>@button local-blog</vh></v>
</v>
<v t="yen.20210612081616.7"><vh>有 disqus 論壇</vh>
<v t="yen.20210612081616.8"><vh>@button github-blog</vh></v>
</v>
<v t="yen.20210612081616.9"><vh>Pelican 設定</vh>
<v t="yen.20210612081616.10"><vh>共用</vh></v>
<v t="yen.20210612081616.11"><vh>@edit pelicanconf.py</vh></v>
<v t="yen.20210612081616.12"><vh>遠端</vh></v>
<v t="yen.20210612081616.13"><vh>@edit publishconf.py</vh></v>
<v t="yen.20210612081616.14"><vh>近端</vh></v>
<v t="yen.20210612081616.15"><vh>@edit local_publishconf.py</vh></v>
</v>
<v t="yen.20210612081616.16"><vh>編輯 template</vh>
<v t="yen.20210612081616.17"><vh>@path theme/attila/templates</vh>
<v t="yen.20210612081616.18"><vh>@edit article.html</vh></v>
<v t="yen.20210612081616.19"><vh>@edit base.html</vh></v>
<v t="yen.20210612081616.20"><vh>@edit search.html</vh></v>
<v t="yen.20210612081616.21"><vh>@edit archives.html</vh></v>
<v t="yen.20210612081616.22"><vh>@edit categories.html</vh></v>
<v t="yen.20210612081616.23"><vh>@edit index.html</vh></v>
<v t="yen.20210612081616.24"><vh>@path partials</vh>
<v t="yen.20210612081616.25"><vh>@edit navigation.html</vh></v>
</v>
<v t="yen.20210612081616.26"><vh>保留之前舊的設定檔案</vh></v>
</v>
</v>
<v t="yen.20210612081616.27"><vh>編輯 plugin</vh>
<v t="yen.20210612081616.28"><vh>@path plugin</vh>
<v t="yen.20210612081616.29"><vh>@path tipue_search</vh>
<v t="yen.20210612081616.30"><vh>@edit tipue_search.py</vh></v>
</v>
</v>
</v>
<v t="yen.20210612081616.31"><vh>@path markdown</vh>
<v t="yen.20210612081616.32"><vh>@path pages</vh>
<v t="yen.20210612081616.33"><vh>@edit pages_1.md</vh></v>
</v>
</v>
<v t="yen.20210612081616.34"><vh>可以另建節點存放 markdown 目錄下的 md 檔案</vh></v>
<v t="yen.20210612081616.35"><vh>@path markdown</vh>
<v t="yen.20210612081616.36"><vh>2020</vh>
<v t="yen.20210612081616.37"><vh>lab.mde.tw</vh>
<v t="yen.20210612081616.38"><vh>@clean 20200509.md</vh>
<v t="yen.20210612081616.39"><vh>CMSiMDE 網站與網誌</vh>
<v t="yen.20210612081616.40"><vh>6590225703398928368</vh></v>
</v>
</v>
<v t="yen.20210612081616.41"><vh>@clean 20200511.md</vh>
<v t="yen.20210612081616.42"><vh>以 ssh 進行倉儲維護</vh></v>
<v t="yen.20210612081616.43"><vh>2997506218729024138</vh></v>
</v>
<v t="yen.20210612081616.44"><vh>@clean 20200512.md</vh>
<v t="yen.20210612081616.45"><vh>啟動批次檔案</vh></v>
<v t="yen.20210612081616.46"><vh>5322926909051095601</vh></v>
</v>
<v t="yen.20210612081616.47"><vh>@clean 20200516.md</vh>
<v t="yen.20210612081616.48"><vh>機械設計工程師的網站</vh></v>
<v t="yen.20210612081616.49"><vh>6098447557568577337</vh></v>
</v>
<v t="yen.20210612081616.50"><vh>@clean 20200516-1.md</vh>
<v t="yen.20210612081616.51"><vh>虛擬主機網路設定</vh></v>
<v t="yen.20210612081616.52"><vh>8033965979441713500</vh></v>
</v>
<v t="yen.20210612081616.53"><vh>@clean 20200518.md</vh>
<v t="yen.20210612081616.54"><vh>按鈕與節點標題</vh></v>
<v t="yen.20210612081616.55"><vh>8878835997100511576</vh></v>
</v>
<v t="yen.20210612081616.56"><vh>@clean 20200528.md</vh>
<v t="yen.20210612081616.57"><vh>網際內容管理課程目標</vh></v>
<v t="yen.20210612081616.58"><vh>mblog</vh>
<v t="yen.20210612081616.59"><vh>4247626056991609910</vh></v>
</v>
<v t="yen.20210612081616.60"><vh>kblog</vh>
<v t="yen.20210612081616.61"><vh>7326071056728571682</vh></v>
</v>
</v>
<v t="yen.20210612081616.62"><vh>@clean 20200608.md</vh>
<v t="yen.20210612081616.63"><vh>Ubuntu 伺服器</vh></v>
<v t="yen.20210612081616.64"><vh>Ｍ機械設計與精密機械網誌</vh>
<v t="yen.20210612081616.65"><vh>8317144543287169393</vh></v>
</v>
<v t="yen.20210612081616.66"><vh>KMOLab 網誌</vh>
<v t="yen.20210612081616.67"><vh>5378024409689048629</vh></v>
</v>
</v>
<v t="yen.20210612081616.68"><vh>@clean 20200611.md</vh>
<v t="yen.20210612081616.69"><vh>代理主機維護策略</vh></v>
<v t="yen.20210612081616.70"><vh>Mblogger</vh>
<v t="yen.20210612081616.71"><vh>4144488991109518272</vh></v>
</v>
<v t="yen.20210612081616.72"><vh>Kblogger</vh></v>
<v t="yen.20210612081616.73"><vh>3903152963873891868</vh></v>
</v>
<v t="yen.20210612081616.74"><vh>@clean 20200630.md</vh>
<v t="yen.20210612081616.75"><vh>使用 Leo Editor</vh></v>
<v t="yen.20210612081616.76"><vh>KMOLab</vh>
<v t="yen.20210612081616.77"><vh>5283100330867011098</vh></v>
</v>
<v t="yen.20210612081616.78"><vh>MBlogger</vh>
<v t="yen.20210612081616.79"><vh>321264145816016956</vh></v>
</v>
<v t="yen.20210612081616.80"><vh>C4F Blogger</vh>
<v t="yen.20210612081616.81"><vh>2954087361983949396</vh></v>
</v>
</v>
<v t="yen.20210612081616.82"><vh>@clean 20210210.md</vh>
<v t="yen.20210612081616.83"><vh>2021 開春</vh>
<v t="yen.20210612081616.84"><vh>kblogger</vh>
<v t="yen.20210612081616.85"><vh>7144358748564329698</vh></v>
</v>
<v t="yen.20210612081616.86"><vh>mblogger</vh>
<v t="yen.20210612081616.87"><vh>7059676961344698606</vh></v>
</v>
</v>
</v>
<v t="yen.20210612081616.88"><vh>@clean 20210210-1.md</vh>
<v t="yen.20210612081616.89"><vh>資料儲存的永續性</vh></v>
<v t="yen.20210612081616.90"><vh>kblogger</vh>
<v t="yen.20210612081616.91"><vh>8984536477325368541</vh></v>
</v>
<v t="yen.20210612081616.92"><vh>mblogger</vh>
<v t="yen.20210612081616.93"><vh>9047840174442464443</vh></v>
</v>
</v>
<v t="yen.20210612081616.94"><vh>@clean 20210210-2.md</vh>
<v t="yen.20210612081616.95"><vh>Pelican and Blogger</vh></v>
<v t="yen.20210612081616.96"><vh>kblogger</vh>
<v t="yen.20210612081616.97"><vh>4028954074708761875</vh></v>
</v>
<v t="yen.20210612081616.98"><vh>mblogger</vh>
<v t="yen.20210612081616.99"><vh>1017934646200675480</vh></v>
</v>
</v>
<v t="yen.20210612081616.100"><vh>@clean 20210211.md</vh>
<v t="yen.20210612081616.101"><vh>Fossil SCM on Ubuntu</vh></v>
<v t="yen.20210612081616.102"><vh>kblog</vh>
<v t="yen.20210612081616.103"><vh>5532982030328039326</vh></v>
</v>
<v t="yen.20210612081616.104"><vh>mblog</vh>
<v t="yen.20210612081616.105"><vh>7184156228296520978</vh></v>
</v>
</v>
<v t="yen.20210612081616.106"><vh>@clean 20210211-1.md</vh>
<v t="yen.20210612081616.107"><vh>Fossil SCM 使用案例</vh></v>
<v t="yen.20210612081616.108"><vh>kblog</vh>
<v t="yen.20210612081616.109"><vh>4819583018228146647</vh></v>
</v>
<v t="yen.20210612081616.110"><vh>mblog</vh>
<v t="yen.20210612081616.111"><vh>7197980596693849809</vh></v>
</v>
</v>
<v t="yen.20210612081616.112"><vh>@clean 20210212.md</vh>
<v t="yen.20210612081616.113"><vh>Fossil SCM 與 Github 整合</vh></v>
<v t="yen.20210612081616.114"><vh>kblog</vh>
<v t="yen.20210612081616.115"><vh>6431823803723457102</vh></v>
</v>
<v t="yen.20210612081616.116"><vh>mblog</vh>
<v t="yen.20210612081616.117"><vh>8811682943280171936</vh></v>
</v>
</v>
<v t="yen.20210612081616.118"><vh>@clean 20210216.md</vh>
<v t="yen.20210612081616.119"><vh>2021 課程規劃</vh></v>
<v t="yen.20210612081616.120"><vh>kblog</vh>
<v t="yen.20210612081616.121"><vh>7475536814986982700</vh></v>
</v>
<v t="yen.20210612081616.122"><vh>mblog</vh>
<v t="yen.20210612081616.123"><vh>427109942903154379</vh></v>
</v>
</v>
<v t="yen.20210612081616.124"><vh>@clean 20210219.md</vh>
<v t="yen.20210612081616.125"><vh>2021 Pelican 設定修改</vh></v>
<v t="yen.20210612081616.126"><vh>kblog</vh>
<v t="yen.20210612081616.127"><vh>4906733030754918917</vh></v>
</v>
<v t="yen.20210612081616.128"><vh>mblog</vh>
<v t="yen.20210612081616.129"><vh>1393216202742162615</vh></v>
</v>
</v>
<v t="yen.20210612081616.130"><vh>@clean 20210222.md</vh>
<v t="yen.20210612081616.131"><vh>2021 工作流程</vh></v>
<v t="yen.20210612081616.132"><vh>kblog</vh>
<v t="yen.20210612081616.133"><vh>6045688493427353593</vh></v>
</v>
<v t="yen.20210612081616.134"><vh>mblog</vh>
<v t="yen.20210612081616.135"><vh>7673398879237838185</vh></v>
</v>
</v>
<v t="yen.20210612081616.136"><vh>@clean 20210224.md</vh>
<v t="yen.20210612081616.137"><vh>2021nuklear</vh></v>
<v t="yen.20210612081616.138"><vh>kblog</vh>
<v t="yen.20210612081616.139"><vh>6352829255600809999</vh></v>
</v>
<v t="yen.20210612081616.140"><vh>mblog</vh>
<v t="yen.20210612081616.141"><vh>3638907969329314948</vh></v>
</v>
</v>
<v t="yen.20210612081616.142"><vh>@clean 20210306.md</vh>
<v t="yen.20210612081616.143"><vh>2021 cmsimde 修改</vh></v>
<v t="yen.20210612081616.144"><vh>kblog</vh>
<v t="yen.20210612081616.145"><vh>3499065018744387110</vh></v>
</v>
<v t="yen.20210612081616.146"><vh>mblog</vh>
<v t="yen.20210612081616.147"><vh>3332700928136370365</vh></v>
</v>
</v>
<v t="yen.20210612081616.148"><vh>@clean 20210306-1.md</vh>
<v t="yen.20210612081616.149"><vh>2001年讀書心得</vh></v>
<v t="yen.20210612081616.150"><vh>kblog</vh>
<v t="yen.20210612081616.151"><vh>2745474791922165974</vh></v>
</v>
<v t="yen.20210612081616.152"><vh>mblog</vh>
<v t="yen.20210612081616.153"><vh>8048058378627697211</vh></v>
</v>
</v>
<v t="yen.20210612081616.154"><vh>@clean 20210427.md</vh>
<v t="yen.20210612081616.155"><vh>機械還能唸嗎?</vh></v>
<v t="yen.20210612081616.156"><vh>kblog</vh>
<v t="yen.20210612081616.157"><vh>2900432582354829524</vh></v>
</v>
<v t="yen.20210612081616.158"><vh>mblog</vh>
<v t="yen.20210612081616.159"><vh>807842597159004219</vh></v>
</v>
</v>
<v t="yen.20210612081616.160"><vh>@clean 20210511.md</vh>
<v t="yen.20210612081616.161"><vh>都是中文模式惹的禍</vh></v>
<v t="yen.20210612081616.162"><vh>mb_blog</vh>
<v t="yen.20210612081616.163"><vh>9033832246839984185</vh></v>
</v>
<v t="yen.20210612081616.164"><vh>kb_blog</vh>
<v t="yen.20210612081616.165"><vh>213498558455543978</vh></v>
</v>
</v>
<v t="yen.20210612081616.166"><vh>@clean 20210524.md</vh>
<v t="yen.20210612081616.167"><vh>製作可攜程式系統</vh></v>
<v t="yen.20210612081616.168"><vh>kblog</vh>
<v t="yen.20210612081616.169"><vh>36654417746253286</vh></v>
</v>
<v t="yen.20210612081616.170"><vh>mblog</vh>
<v t="yen.20210612081616.171"><vh>6438502095164685010</vh></v>
</v>
</v>
<v t="yen.20210612081616.172"><vh>@clean 20210531.md</vh>
<v t="yen.20210612081616.173"><vh>挖礦者與 Gitlab Pages</vh></v>
<v t="yen.20210612081616.174"><vh>kblog</vh>
<v t="yen.20210612081616.175"><vh>3950876764932197032</vh></v>
</v>
<v t="yen.20210612081616.176"><vh>mblog</vh>
<v t="yen.20210612081616.177"><vh>3084152329644691609</vh></v>
</v>
</v>
<v t="yen.20210612081616.178"><vh>@clean 20210531-1.md</vh>
<v t="yen.20210612081616.179"><vh>為何需要分散式版次管理系統?</vh></v>
<v t="yen.20210612081616.180"><vh>kblog</vh>
<v t="yen.20210612081616.181"><vh>3277026408208392841</vh></v>
</v>
<v t="yen.20210612081616.182"><vh>mblog</vh>
<v t="yen.20210612081616.183"><vh>5754558563405564265</vh></v>
</v>
</v>
<v t="yen.20210612081616.184"><vh>@clean 20210607.md</vh>
<v t="yen.20210612081616.185"><vh>Github account flagged</vh></v>
<v t="yen.20210612081616.186"><vh>kblog</vh>
<v t="yen.20210612081616.187"><vh>59643002015771588</vh></v>
</v>
<v t="yen.20210612081616.188"><vh>mblog</vh>
<v t="yen.20210612081616.189"><vh>8367273516198516992</vh></v>
</v>
</v>
</v>
</v>
<v t="yen.20210612081616.190"><vh>2021</vh>
<v t="yen.20210612081616.191"><vh>@clean 20210612.md</vh>
<v t="yen.20210612081616.192"><vh>工作站電腦關機</vh></v>
<v t="yen.20210612081616.193"><vh>kblog</vh>
<v t="yen.20210612081616.194"><vh>2556891967181218139</vh></v>
</v>
<v t="yen.20210612081616.195"><vh>mblog</vh>
<v t="yen.20210612081616.196"><vh>6532216227154065044</vh></v>
</v>
</v>
</v>
</v>
<v t="yen.20210612081616.197"><vh>產生 .key 與 .crt 指令</vh></v>
</v>
<v t="yen.20210427105116.1"><vh>操作方法</vh></v>
<v t="yen.20170108171733.1"><vh>@path ../</vh>
<v t="leo.20180115150519.1"><vh>@edit index.html</vh></v>
<v t="yen.20170108171733.3"><vh>@edit README.md</vh></v>
<v t="yen.20170108171733.4"><vh>@edit .gitignore</vh></v>
<v t="leo.20170908162839.1"><vh>沒有 disqus 論壇</vh>
<v t="yen.20170108171733.2"><vh>@button local-blog</vh></v>
</v>
<v t="leo.20170908162904.1"><vh>有 disqus 論壇</vh>
<v t="leo.20170709224430.1"><vh>@button github-blog</vh></v>
</v>
<v t="yen.20170108171733.5"><vh>Pelican 設定</vh>
<v t="leo.20170709020600.1"><vh>共用</vh></v>
<v t="yen.20170108171733.7"><vh>@edit pelicanconf.py</vh></v>
<v t="leo.20170709015947.1"><vh>遠端</vh></v>
<v t="leo.20170709015955.1"><vh>@edit publishconf.py</vh></v>
<v t="leo.20170709015940.1"><vh>近端</vh></v>
<v t="yen.20170108171733.6"><vh>@edit local_publishconf.py</vh></v>
</v>
<v t="yen.20170224232341.1"><vh>編輯 template</vh>
<v t="leo.20180115093448.1"><vh>@path theme/attila/templates</vh>
<v t="leo.20180715212936.1"><vh>@edit article.html</vh></v>
<v t="leo.20180115093536.1"><vh>@edit base.html</vh></v>
<v t="leo.20180115093657.1"><vh>@edit search.html</vh></v>
<v t="leo.20180115093715.1"><vh>@edit archives.html</vh></v>
<v t="leo.20180715212745.1"><vh>@edit categories.html</vh></v>
<v t="leo.20180715212902.1"><vh>@edit index.html</vh></v>
<v t="leo.20180115093726.1"><vh>@path partials</vh>
<v t="leo.20180115093749.1"><vh>@edit navigation.html</vh></v>
</v>
<v t="leo.20180115142025.1"><vh>保留之前舊的設定檔案</vh></v>
</v>
</v>
<v t="leo.20170710015511.1"><vh>編輯 plugin</vh>
<v t="leo.20170710015523.1"><vh>@path plugin</vh>
<v t="leo.20170710015523.2"><vh>@path tipue_search</vh>
<v t="leo.20170710015523.3"><vh>@edit tipue_search.py</vh></v>
</v>
</v>
</v>
<v t="yen.20170108171733.71"><vh>@path markdown</vh>
<v t="yen.20170108171733.81"><vh>@path pages</vh>
<v t="yen.20170108171733.82"><vh>@edit pages_1.md</vh></v>
</v>
</v>
<v t="leo.20170710022054.1"><vh>可以另建節點存放 markdown 目錄下的 md 檔案</vh></v>
<v t="leo.20170710022041.1"><vh>@path markdown</vh>
<v t="leo.20180115115910.1"><vh>2020</vh>
<v t="leo.20180423103639.1"><vh>lab.mde.tw</vh>
<v t="yen.20200518070950.1"><vh>@clean 20200509.md</vh>
<v t="yen.20200518101418.1"><vh>CMSiMDE 網站與網誌</vh>
<v t="yen.20200518115111.1"><vh>6590225703398928368</vh></v>
</v>
</v>
<v t="yen.20200518071032.1"><vh>@clean 20200511.md</vh>
<v t="yen.20200518105911.1"><vh>以 ssh 進行倉儲維護</vh></v>
<v t="yen.20200518115329.1"><vh>2997506218729024138</vh></v>
</v>
<v t="yen.20200512160924.1"><vh>@clean 20200512.md</vh>
<v t="yen.20200518105955.1"><vh>啟動批次檔案</vh></v>
<v t="yen.20200518115347.1"><vh>5322926909051095601</vh></v>
</v>
<v t="yen.20200516092143.1"><vh>@clean 20200516.md</vh>
<v t="yen.20200518110043.1"><vh>機械設計工程師的網站</vh></v>
<v t="yen.20200518115404.1"><vh>6098447557568577337</vh></v>
</v>
<v t="yen.20200516203207.1"><vh>@clean 20200516-1.md</vh>
<v t="yen.20200518110131.1"><vh>虛擬主機網路設定</vh></v>
<v t="yen.20200518115421.1"><vh>8033965979441713500</vh></v>
</v>
<v t="yen.20200518115509.1"><vh>@clean 20200518.md</vh>
<v t="yen.20200518120231.1"><vh>按鈕與節點標題</vh></v>
<v t="yen.20200521095531.1"><vh>8878835997100511576</vh></v>
</v>
<v t="yen.20200528095926.1"><vh>@clean 20200528.md</vh>
<v t="yen.20200529220132.1"><vh>網際內容管理課程目標</vh></v>
<v t="leo.20210317102957.1"><vh>mblog</vh>
<v t="leo.20210317023310.1"><vh>4247626056991609910</vh></v>
</v>
<v t="leo.20210317023355.1"><vh>kblog</vh>
<v t="leo.20210317023351.1"><vh>7326071056728571682</vh></v>
</v>
</v>
<v t="yen.20200608161509.1"><vh>@clean 20200608.md</vh>
<v t="yen.20200608161548.1"><vh>Ubuntu 伺服器</vh></v>
<v t="yen.20200608204806.1"><vh>Ｍ機械設計與精密機械網誌</vh>
<v t="yen.20200608161847.1"><vh>8317144543287169393</vh></v>
</v>
<v t="yen.20200608205920.1"><vh>KMOLab 網誌</vh>
<v t="yen.20200608210003.1"><vh>5378024409689048629</vh></v>
</v>
</v>
<v t="yen.20200611213634.1"><vh>@clean 20200611.md</vh>
<v t="yen.20200611214052.1"><vh>代理主機維護策略</vh></v>
<v t="yen.20200611221718.1"><vh>Mblogger</vh>
<v t="yen.20200611223454.1"><vh>4144488991109518272</vh></v>
</v>
<v t="yen.20200611221647.1"><vh>Kblogger</vh></v>
<v t="yen.20200611221636.1"><vh>3903152963873891868</vh></v>
</v>
<v t="leo.20200630103549.1"><vh>@clean 20200630.md</vh>
<v t="leo.20200630104028.1"><vh>使用 Leo Editor</vh></v>
<v t="leo.20200630113832.1"><vh>KMOLab</vh>
<v t="leo.20200630113823.1"><vh>5283100330867011098</vh></v>
</v>
<v t="leo.20200630114610.1"><vh>MBlogger</vh>
<v t="leo.20200630115346.1"><vh>321264145816016956</vh></v>
</v>
<v t="leo.20200907071201.1"><vh>C4F Blogger</vh>
<v t="leo.20200907151131.1"><vh>2954087361983949396</vh></v>
</v>
</v>
<v t="leo.20210210102942.1"><vh>@clean 20210210.md</vh>
<v t="leo.20210210103150.1"><vh>2021 開春</vh>
<v t="leo.20210210040142.1"><vh>kblogger</vh>
<v t="leo.20210210114545.1"><vh>7144358748564329698</vh></v>
</v>
<v t="leo.20210210040226.1"><vh>mblogger</vh>
<v t="leo.20210210034636.1"><vh>7059676961344698606</vh></v>
</v>
</v>
</v>
<v t="leo.20210210041040.1"><vh>@clean 20210210-1.md</vh>
<v t="leo.20210210041539.1"><vh>資料儲存的永續性</vh></v>
<v t="leo.20210210090621.1"><vh>kblogger</vh>
<v t="leo.20210210090616.1"><vh>8984536477325368541</vh></v>
</v>
<v t="leo.20210210090743.1"><vh>mblogger</vh>
<v t="leo.20210210090739.1"><vh>9047840174442464443</vh></v>
</v>
</v>
<v t="leo.20210210113926.1"><vh>@clean 20210210-2.md</vh>
<v t="leo.20210210114619.1"><vh>Pelican and Blogger</vh></v>
<v t="leo.20210210122050.1"><vh>kblogger</vh>
<v t="leo.20210210122043.1"><vh>4028954074708761875</vh></v>
</v>
<v t="leo.20210210122111.1"><vh>mblogger</vh>
<v t="leo.20210210122108.1"><vh>1017934646200675480</vh></v>
</v>
</v>
<v t="leo.20210211095825.1"><vh>@clean 20210211.md</vh>
<v t="leo.20210211100816.1"><vh>Fossil SCM on Ubuntu</vh></v>
<v t="leo.20210211110222.1"><vh>kblog</vh>
<v t="leo.20210211110217.1"><vh>5532982030328039326</vh></v>
</v>
<v t="leo.20210211110243.1"><vh>mblog</vh>
<v t="leo.20210211110239.1"><vh>7184156228296520978</vh></v>
</v>
</v>
<v t="leo.20210211133326.1"><vh>@clean 20210211-1.md</vh>
<v t="leo.20210211134529.1"><vh>Fossil SCM 使用案例</vh></v>
<v t="leo.20210211141444.1"><vh>kblog</vh>
<v t="leo.20210211141441.1"><vh>4819583018228146647</vh></v>
</v>
<v t="leo.20210211141512.1"><vh>mblog</vh>
<v t="leo.20210211141509.1"><vh>7197980596693849809</vh></v>
</v>
</v>
<v t="leo.20210212104928.1"><vh>@clean 20210212.md</vh>
<v t="leo.20210212045441.1"><vh>Fossil SCM 與 Github 整合</vh></v>
<v t="leo.20210212070247.1"><vh>kblog</vh>
<v t="leo.20210212070240.1"><vh>6431823803723457102</vh></v>
</v>
<v t="leo.20210212070300.1"><vh>mblog</vh>
<v t="leo.20210212070342.1"><vh>8811682943280171936</vh></v>
</v>
</v>
<v t="leo.20210216053228.1"><vh>@clean 20210216.md</vh>
<v t="leo.20210219033033.1"><vh>2021 課程規劃</vh></v>
<v t="leo.20210219033115.1"><vh>kblog</vh>
<v t="leo.20210219033110.1"><vh>7475536814986982700</vh></v>
</v>
<v t="leo.20210219033133.1"><vh>mblog</vh>
<v t="leo.20210219033130.1"><vh>427109942903154379</vh></v>
</v>
</v>
<v t="leo.20210219075408.1"><vh>@clean 20210219.md</vh>
<v t="leo.20210219075856.1"><vh>2021 Pelican 設定修改</vh></v>
<v t="leo.20210219082223.1"><vh>kblog</vh>
<v t="leo.20210219082217.1"><vh>4906733030754918917</vh></v>
</v>
<v t="leo.20210219082242.1"><vh>mblog</vh>
<v t="leo.20210219082240.1"><vh>1393216202742162615</vh></v>
</v>
</v>
<v t="leo.20210222144701.1"><vh>@clean 20210222.md</vh>
<v t="leo.20210222151517.1"><vh>2021 工作流程</vh></v>
<v t="leo.20210222162542.1"><vh>kblog</vh>
<v t="leo.20210222162539.1"><vh>6045688493427353593</vh></v>
</v>
<v t="leo.20210222162607.1"><vh>mblog</vh>
<v t="leo.20210222162602.1"><vh>7673398879237838185</vh></v>
</v>
</v>
<v t="leo.20210224100246.1"><vh>@clean 20210224.md</vh>
<v t="leo.20210224101026.1"><vh>2021nuklear</vh></v>
<v t="leo.20210224102437.1"><vh>kblog</vh>
<v t="leo.20210224102432.1"><vh>6352829255600809999</vh></v>
</v>
<v t="leo.20210224102509.1"><vh>mblog</vh>
<v t="leo.20210224102501.1"><vh>3638907969329314948</vh></v>
</v>
</v>
<v t="leo.20210306102210.1"><vh>@clean 20210306.md</vh>
<v t="leo.20210306102233.1"><vh>2021 cmsimde 修改</vh></v>
<v t="leo.20210306110554.1"><vh>kblog</vh>
<v t="leo.20210306110551.1"><vh>3499065018744387110</vh></v>
</v>
<v t="leo.20210306110613.1"><vh>mblog</vh>
<v t="leo.20210306110610.1"><vh>3332700928136370365</vh></v>
</v>
</v>
<v t="leo.20210306152423.1"><vh>@clean 20210306-1.md</vh>
<v t="leo.20210306152445.1"><vh>2001年讀書心得</vh></v>
<v t="leo.20210306153302.1"><vh>kblog</vh>
<v t="leo.20210306153256.1"><vh>2745474791922165974</vh></v>
</v>
<v t="leo.20210306153329.1"><vh>mblog</vh>
<v t="leo.20210306153326.1"><vh>8048058378627697211</vh></v>
</v>
</v>
<v t="leo.20210314151746.1"><vh>@clean 20210427.md</vh>
<v t="yen.20210427094921.1"><vh>機械還能唸嗎?</vh></v>
<v t="yen.20210427104221.1"><vh>kblog</vh>
<v t="yen.20210427104206.1"><vh>2900432582354829524</vh></v>
</v>
<v t="yen.20210427104308.1"><vh>mblog</vh>
<v t="yen.20210427104259.1"><vh>807842597159004219</vh></v>
</v>
</v>
<v t="leo.20210511091839.1"><vh>@clean 20210511.md</vh>
<v t="leo.20210511092657.1"><vh>都是中文模式惹的禍</vh></v>
<v t="leo.20210524012836.1"><vh>mb_blog</vh>
<v t="leo.20210524012816.1"><vh>9033832246839984185</vh></v>
</v>
<v t="leo.20210524012907.1"><vh>kb_blog</vh>
<v t="leo.20210524012857.1"><vh>213498558455543978</vh></v>
</v>
</v>
<v t="leo.20210524201113.1"><vh>@clean 20210524.md</vh>
<v t="leo.20210524201409.1"><vh>製作可攜程式系統</vh></v>
<v t="leo.20210531091052.1"><vh>kblog</vh>
<v t="leo.20210531091041.1"><vh>36654417746253286</vh></v>
</v>
<v t="leo.20210531091117.1"><vh>mblog</vh>
<v t="leo.20210531091114.1"><vh>6438502095164685010</vh></v>
</v>
</v>
<v t="leo.20210531083628.1"><vh>@clean 20210531.md</vh>
<v t="leo.20210531084219.1"><vh>挖礦者與 Gitlab Pages</vh></v>
<v t="leo.20210531091135.1"><vh>kblog</vh>
<v t="leo.20210531091132.1"><vh>3950876764932197032</vh></v>
</v>
<v t="leo.20210531091150.1"><vh>mblog</vh>
<v t="leo.20210531091148.1"><vh>3084152329644691609</vh></v>
</v>
</v>
<v t="leo.20210531064143.1"><vh>@clean 20210531-1.md</vh>
<v t="leo.20210531064521.1"><vh>為何需要分散式版次管理系統?</vh></v>
<v t="leo.20210531071007.1"><vh>kblog</vh>
<v t="leo.20210531071000.1"><vh>3277026408208392841</vh></v>
</v>
<v t="leo.20210531071033.1"><vh>mblog</vh>
<v t="leo.20210531071030.1"><vh>5754558563405564265</vh></v>
</v>
</v>
<v t="leo.20210607091721.1"><vh>@clean 20210607.md</vh>
<v t="leo.20210607092640.1"><vh>Github account flagged</vh></v>
<v t="leo.20210607101639.1"><vh>kblog</vh>
<v t="leo.20210607101634.1"><vh>59643002015771588</vh></v>
</v>
<v t="leo.20210607101659.1"><vh>mblog</vh>
<v t="leo.20210607101653.1"><vh>8367273516198516992</vh></v>
</v>
</v>
</v>
</v>
<v t="yen.20210612072134.1"><vh>2021</vh>
<v t="yen.20210612072138.1"><vh>@clean 20210612.md</vh>
<v t="yen.20210612072513.1"><vh>工作站電腦關機</vh></v>
<v t="yen.20210612080509.1"><vh>kblog</vh>
<v t="yen.20210612075943.1"><vh>2556891967181218139</vh></v>
</v>
<v t="yen.20210612080545.1"><vh>mblog</vh>
<v t="yen.20210612080009.1"><vh>6532216227154065044</vh></v>
</v>
</v>
</v>
</v>
<v t="yen.20170108171733.83"><vh>產生 .key 與 .crt 指令</vh></v>
</v>
<v t="yen.20170108171930.1"><vh>@button https server</vh></v>
<v t="yen.20170108171939.1"><vh>@button ipv6 https server</vh></v>
</vnodes>
<tnodes>
<t tx="leo.20170709015940.1"></t>
<t tx="leo.20170709015947.1"></t>
<t tx="leo.20170709020600.1"></t>
<t tx="leo.20170709224430.1">@language python
import os

os.system("pelican markdown -o blog -s publishconf.py")
g.es("admin pelican Github 執行完畢")


</t>
<t tx="leo.20170710015511.1"></t>
<t tx="leo.20170710015523.1"></t>
<t tx="leo.20170710015523.2"></t>
<t tx="leo.20170710022041.1"></t>
<t tx="leo.20170710022054.1"></t>
<t tx="leo.20170908162839.1"></t>
<t tx="leo.20170908162904.1"></t>
<t tx="leo.20180115093448.1"></t>
<t tx="leo.20180115093726.1"></t>
<t tx="leo.20180115115910.1"></t>
<t tx="leo.20180115142025.1"></t>
<t tx="leo.20180423103639.1"></t>
<t tx="leo.20200630103549.1">@language md
---
Title: 使用 Leo Editor
Date: 2020-06-30 11:00
Category: Leo Editor
Tags: leo editor
Slug: how-to-use-leo-editor
Author: yen
---

[Leo Editor] 的使用可以從 LEO_EDITOR 的環境變數設定開始, 讓多元的大綱管理流程, 成為您程式開發與資料管理上的一大利器.

&lt;!-- PELICAN_END_SUMMARY --&gt;

[Leo Editor]: https://leoeditor.com/

@others</t>
<t tx="leo.20200630104028.1">Leo Editor 與 SciTE
----

當使用 [KMOLab] 所建立的 Windows 64 位元操作系統環境下的可攜系統時, 只要在 start.bat 中, 加入 LEO_EDITOR 環境變數的設定, 使用者就可以將大綱中的 Python 程式, C 程式, Dart 程式或 Lua 程式碼, 直接帶到 [SciTE] 編輯器中執行.

&lt;pre class="brush: jscript"&gt;
REM 設定 Leo 所用的編輯器
set LEO_EDITOR=%Disk%:\wscite\SciTE.exe
&lt;/pre&gt;

[KMOLab]: http://lab.kmol.info/blog/index.html

對於比較簡單的 Python 程式段, 則可以直接在大綱對應的內文區, 直接透過 Ctrl + b 按鈕執行, 而比較複雜需要獨立執行的 Python 程式段, 則建議利用執行緒執行，以免拖累 [Leo Editor] 本體的執行.

&lt;pre class="brush: python"&gt;
import os
import subprocess
import threading
import http.server, ssl

def domake():
    # build directory
    os.chdir("./../")
    server_address = ('localhost', 5443)
    httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print(os.getcwd())
    print("5443 https server started")
    httpd.serve_forever()

# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()
&lt;/pre&gt;

Leo Editor 的入門不容易
----

從 [Leo Editor] 的[開發歷史]來看, 自 1995 年啟動, 歷經使用 Borland C 與 Tkinter 等階段, 直到 2012 年採 Qt 作為圖形介面之後, 才開始穩定下來. 現在更有 [LeoVue] 與 [LeoInteg] 等兩個專案, 分別利用 Javascript 與 Typescript, 將 [Leo Editor] 帶進網際與 Visual Studio Code 的應用領域.

假如再加上最近 Qt 喊出的使用授權大變更, 接下來的 [Leo Editor] 開發可能即將面臨一波更大的轉變.

[Leo Editor] 的入門之所以不容易, 源自於其早期訂下的長遠目標, 因為試圖結合大綱編輯器與 [Literate Programming] 本來就是一條艱困的程式開發道路. 而且 [Leo Editor] 程式設計的思維大量依賴 Python 語法與 [Vim 原理], 同一個 [Leo Editor] 版本在不同操作系統的使用流程, 又因為各種原因而導致有許多獨門克服方法. 即便是同時使用 Mac, Linux 與 Windows 的老手, 都可能因為 [Leo Editor] 程式碼的快速改版而經常碰壁, 更別提初學者面對各種使用門檻時的無奈與慌亂.

[開發歷史]: https://leoeditor.com/history.html
[LeoVue]: https://github.com/kaleguy/leovue
[LeoInteg]: https://github.com/boltex/leointeg
[Literate Programming]: https://en.wikipedia.org/wiki/Literate_programming
[Vim 原理]: https://leoeditor.com/vim-theory.html
[SciTE]: https://www.scintilla.org/SciTE.html

但是又何奈
----

[KMOLab] 使用 [Leo Editor] 的時間已經超過 10 年, 期間仍然找不到其他替代工具. 只能利用 [SciTE] 來補足 [Leo Editor] 在 parse 大檔案過程效率的不足.</t>
<t tx="leo.20200630113823.1"></t>
<t tx="leo.20200630113832.1"></t>
<t tx="leo.20200630114610.1"></t>
<t tx="leo.20200630115346.1"></t>
<t tx="leo.20200907071201.1"></t>
<t tx="leo.20200907071233.1">@language python
from markdown import markdown
from oauth2client import client
#from googleapiclient import sample_tools
import os
# 配合使用 credential token
import pickle
from googleapiclient.discovery import build
#from google_auth_oauthlib.flow import InstalledAppFlow
#from google.auth.transport.requests import Request

os.environ['TZ'] = 'Asia/Taipei'
with open('./../../mdecourse_blogger_token.dat', 'rb') as credentials_dat:
    credentials = pickle.load(credentials_dat)
service = build('blogger', 'v3', credentials=credentials)

def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &lt;h2&gt; 標題
content = content.replace("&lt;h2&gt;", "&lt;h2&gt;&lt;font size='4'&gt;")
content = content.replace("&lt;/h2&gt;", "&lt;/font&gt;&lt;/h2&gt;")
# g.es(content)

try:
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    #blog_id = blogs["items"][0]["id"]
    # blog_id for https://twcode4future.blogspot.com/
    blog_id = "3166335304502587571"
    # 設法取得原 post 的 id
    postid_outline = p.getLastChild()
    # 直接從標題取得 post 的 id 號碼
    post_id = postid_outline.h
    posts = service.posts()
    # 更新網誌文章時的 body
    body = {
    "kind": "blogger#post",
    "title": title,
    "content": content
    }
    # need to save postId to outline head
    update = posts.update(blogId=blog_id, postId=post_id, body=body, publish=True)
    update_doc = update.execute()
    # 使用 credential token 後, 無需刪除 blogger.dat
    #os.remove("blogger.dat")
    g.es("post_id 為", post_id)
    g.es("已經將更新資料送往 M Blogger!")
except(client.AccessTokenRefreshError):
    g.es("error")
</t>
<t tx="leo.20200907150705.1">@language python
from markdown import markdown
from oauth2client import client
#from googleapiclient import sample_tools
import os
# 配合使用 credential token
import pickle
from googleapiclient.discovery import build
#from google_auth_oauthlib.flow import InstalledAppFlow
#from google.auth.transport.requests import Request

os.environ['TZ'] = 'Asia/Taipei'
with open('./../../mdecourse_blogger_token.dat', 'rb') as credentials_dat:
    credentials = pickle.load(credentials_dat)
service = build('blogger', 'v3', credentials=credentials)

def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &lt;h2&gt; 標題
content = content.replace("&lt;h2&gt;", "&lt;h2&gt;&lt;font size='4'&gt;")
content = content.replace("&lt;/h2&gt;", "&lt;/font&gt;&lt;/h2&gt;")
# g.es(content)

try:
    '''
    users = service.users()
    # 取得使用者 profile 資料
    user = users.get(userId='self').execute()
    print('網誌名稱: %s' % user['displayName'])
    '''
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    # post_id is now blogs["items"][0]["id"]
    #blog_id = blogs["items"][0]["id"]
    # blog_id for https://twcode4future.blogspot.com/
    blog_id = "3166335304502587571"
    #for blog in blogs['items']:
        #print(blog['name'], blog['url'])
    posts = service.posts()
    # 新增網誌 post 時, 需要 post_id
    body = {
    "kind": "blogger#post",
    "id": blog_id,
    "title": title,
    # 利用 markdown 函式, 將 .md 的內文轉為 html, 作為 Blogger 的文章內容
    "content": content,
    "labels": tags
    }
    insert = posts.insert(blogId=blog_id, body=body)
    posts_doc = insert.execute()
    post_id = posts_doc["id"]
    #print(posts_doc)
    # 改用 credential token 後不會產生 blogger.dat
    #os.remove("blogger.dat")
    # 利用最後的 child 節點來儲存 post_id
    to_save_post_id = p.insertAsLastChild()   
    # 改為內文為空的節點, id 直接標在 head 標題 
    to_save_post_id.b = ""
    to_save_post_id.h = post_id
    # 因為新增節點, commander 必須 redraw
    c.redraw()
    g.es("post_id 為", post_id)
    g.es("已經將資料送往 C4FBlogger!")
except(client.AccessTokenRefreshError):
    g.es("error")

</t>
<t tx="leo.20200907151131.1"></t>
<t tx="leo.20210210034636.1"></t>
<t tx="leo.20210210040142.1"></t>
<t tx="leo.20210210040226.1"></t>
<t tx="leo.20210210041040.1">@language md
---
Title: 資料儲存的永續性
Date: 2021-02-10 11:10
Category: Weblog
Tags: 202102
Slug: data-sustainablity
Author: yen
---

假如將時間倒轉 20 年, 看看當時的電腦程式課程在教些什麼? 大家是如何上課, 結果應該會讓現在這些初出茅廬, 剛剛成年的大一生非常驚訝. 是的, 當年並沒有人手一機, 上課是需要抄筆記的......

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20210210041539.1">而且當時全球科技界正度過所謂的千禧年之禍, 利用電腦程式產生中文字仍處於 Big-5 的陰影下, 倚天中文仍然到處可見, 即使處在所謂的數位科技前緣, 某些人手上已經有小而美的易利信手機, 口袋裡也放著一個由 HTC 打造的頗有重量 HP [PDA], 但所謂數位資料的永續性, 距離仍然很遠, 因此二十年多年後, 當時能留下與上課有關的數位資料非常有限.

[PDA]: https://en.wikipedia.org/wiki/Personal_digital_assistant
[Openshift]: https://en.wikipedia.org/wiki/Heroku
[Heroku]: https://en.wikipedia.org/wiki/Heroku

之後就在 Google 逐漸成熟, 而 Facebook 騰空出世 7 年後的 2011年, Red Hat 推出可以免費使用的 [Openshift], 不僅能夠伺服 PHP 與 Python, 還可免費存放各種數位資料, 當時以為資料終於可以永續存放的假象, 到 2016 年夢想逐漸破滅, 還好 2016 年之後有 Github 接手, Heroku 也很意外地從 2007 年活到現在, 目前, Github 與 Heroku (只能儲存 500 MB), 加上 Gitlab 的同步資料備份與 Google Drive 上的大檔案存放, 全球網友前撲後繼用隱私換取數位資料免費存放的所謂永續性,  似乎終於有了眉目.

目前教育版的 Google Drive 仍不限容量, 但也許未來的某一天這樣的所謂永續仍會畫上休止符, 大家仍必須有所因應.

資料存至 Google Drive
----

從 &lt;https://github.com/mdecourse/cd2020pj1/blob/master/myflaskapp.py&gt; 可以看出如何利用 Google Drive API, 在網際環境中將數位檔案送到特定伺服器之外, 還能利用 AJAX 存備份至特定 Google Drive 目錄.

&lt;pre class="brush: python"&gt;
@app.route('/saveToDB' , methods=['POST'])
@login_required
def saveToDB():

    """axuploader.js 將檔案上傳後, 將上傳檔案名稱數列, 以 post 回傳到 Flask server.
    
    截至這裡, 表示檔案已經從 client 上傳至 server, 可以再設法通過認證, 將 server 上的檔案上傳到對應的 Google Drive, 並且在上傳後的 GDrive 目錄, 設定特定擷取權限 (例如: 只允許 @gm 用戶下載.
    以下則可將 server 上傳後的擷取目錄與 GDrive 各檔案 ID 存入資料庫, 而檔案擷取則分為 server 擷取與 GDrive 擷取等兩種 url 連結設定
    """

    if request.method == "POST":
        files = request.form["files"]
        # split files string
        files = files.split(",")
        # files 為上傳檔案名稱所組成的數列
        for i in range(len(files)):
            # 逐一將已經存在 server downloads 目錄的檔案, 上傳到 GDrive uploaded 目錄
            fileName = files[i]
            fileLocation = _curdir + "/downloads/" + fileName
            mimeType = mimetypes.MimeTypes().guess_type(fileLocation)[0]
            # for GDrive v2
            #gdriveID = uploadToGdrive(fileName, mimeType)
            # for GDrive v3
            gdriveID = uploadToGdrive3(fileName, mimeType)
            fileSize = str(round(os.path.getsize(fileLocation)/(1024*1024.0), 2)) + " MB"
            date = datetime.datetime.now().strftime("%b %d, %Y - %H:%M:%S")
            user = session.get("user")
            print(user + "|" + str(fileSize) + "|" + str(mimeType) + "|"  + gdriveID)
            # 逐一將上傳檔案名稱存入資料庫, 同時存入mimeType, fileSize 與 gdriveID
            # 資料庫欄位
            #g.db.execute('insert into grouping (user , date, fileName, mimeType, fileSize, memo) values (?, ?, ?, ?, ?, ?)',(user, date, fileName, mimeType, fileSize, "memo"))
            #g.db.commit()
            #flash('已經新增一筆 upload 資料!')
    return "Uploaded fileName and gdriveID save to database"
def uploadToGdrive(fileName, mimeType):
    gauth = GoogleAuth()
    # 必須使用 desktop 版本的 client_secrets.json
    gauth.LoadClientConfigFile("./../gdrive_desktop_client_secrets.json")
    drive = GoogleDrive(gauth)
    
    '''
    # View all folders and file in your Google Drive
    fileList = drive.ListFile({'q': "'root' in parents and trashed=false"}).GetList()
    for file in fileList:
      print('Title: %s, ID: %s' % (file['title'], file['id']))
      # Get the folder ID that you want
      # 檔案會上傳到根目錄下的 uploaded  目錄中
      if(file['title'] == "uploaded"):
          fileID = file['id']
    '''
    # GDrive 上 uploaded 目錄的 fileID
    with open("./../gdrive_uploaded_id.txt", 'r') as content_file:
        fileID = content_file.read()
    
    # 由上述目錄外的檔案讀取 uploaded 目錄對應 ID
    #fileID = "your_folder_file_ID"
    # 上傳檔案名稱為輸入變數
    #fileName = "DemoFile.pdf"
    filePath = _curdir + "/downloads/"
    # parents 為所在 folder, 亦即 uploaded 目錄, fileID 為 uploaded 目錄的 ID
    file1 = drive.CreateFile({"mimeType": mimeType, "parents": [{"kind": "drive#fileLink", "id": fileID}], "title":  fileName})
    file1.SetContentFile(filePath + fileName)
    file1.Upload() # Upload the file.
    # 傳回與上傳檔案對應的 GDrive ID, 將會存入資料庫 gdiveID 欄位
    return file1['id']
    #print('Created file %s with mimeType %s' % (file1['title'], file1['mimeType']))   
    #print("upload fileID:" + str(file1['id']))
    # 以下為下載檔案測試
    # file2 = drive.CreateFile({'id': file1['id']})
    #file2.GetContentFile('./test/downloaded_ModernC.pdf') # Download file as 'downloaded_ModernC.pdf under directory test'.
    
    '''
    file1.Trash()  # Move file to trash.
    file1.UnTrash()  # Move file out of trash.
    file1.Delete()  # Permanently delete the file.
    '''
def uploadToGdrive3(fileName, mimeType):
    # get upload folder id
    # GDrive 上 uploaded 目錄的 fileID
    with open("./../gdrive_uploaded_id.txt", 'r') as content_file:
        folderID = content_file.read()

    creds = None
    with open('./../gdrive_write_token.pickle', 'rb') as token:
        creds = pickle.load(token)
    # 讀進既有的 token, 建立 service
    driveService = build('drive', 'v3', credentials=creds)

    metadata = {
        'name': fileName,
        'mimeType': mimeType,
        # 注意: 必須提供數列格式資料
        'parents': [folderID]
        }

    filePath = _curdir + "/downloads/" + fileName
    media = MediaFileUpload(filePath,
                                            mimetype=mimeType,
                                            chunksize=1024*1024,
                                            resumable=True
                                            )

    gdFile = driveService.files().create(
        body=metadata,
        media_body=media,
        fields='id'
    ).execute()
    fileID = gdFile.get("id")

    return fileID
&lt;/pre&gt;

上述程式利用較新的 GDrive V3 上傳資料之前, 可攜系統必須安裝 google-api-python-client:

&lt;pre class="brush:python"&gt;
# for uploadToGDrive3
# pip install google-api-python-client
# https://github.com/googleapis/google-api-python-client
import pickle
from googleapiclient.discovery import build
from apiclient.http import MediaFileUpload
&lt;/pre&gt;

[Fossil SCM]: https://fossil-scm.org
[BD-R or BD-RE]: https://en.wikipedia.org/wiki/Blu-ray_Disc_recordable

Github, Gitlab 與 Fossil SCM
----

針對 Github 與 Gitlab 的操作, 可以參考 &lt;https://git-scm.com/book/en/v2&gt;, 但是 [Fossil SCM] 的參考資料則相對較少, 以下將針對 [Fossil SCM] 的應用稍加說明, 為了因應未來上述各種網際免費數位儲存資料系統的更迭, 在近端配置 [Fossil SCM], 並用 [BD-R or BD-RE] (25GB) 進行備份, 也是一個不錯的資料永續儲存方案.

[Fossil SCM] 的使用非常簡單, 只要配合操作系統從 &lt;https://fossil-scm.org/home/uv/download.html&gt; 下載相應版本, 並讓系統可以執行 fossil.exe (以 Windows 10 為例) 即可, 唯一要注意的是若操作過程牽涉兩個不同操作系統, 必須透過 fossil version 查驗雙方的版本是否相同.

有關 [Fossil SCM] 的先前參考資料, 可參閱 [Fossil SCM 簡介].

Ubuntu 安裝 fossil scm
----

使用 sudo apt install fossil 安裝 [Fossil SCM] 所取得的版本可以利用 fossil version 檢查. 若版本並非最新版本或與 Windows 10 所用的版本相同, 可以至 &lt;https://fossil-scm.org/home/uv/download.html&gt; 下載最新的 fossil 後, 以 sudo cp /home/user/fossil /usr/bin/, 然後再透過 fossil version 查驗是否已經更新為最新版本.

安裝 stunnel4
----

由於 [Fossil SCM] 並無 https 啟動功能的設置, 因此在實作上必須透過 stunnel SSL 代理主機啟動 https 伺服功能.

首先安裝 stunnel4:

sudo apt install stunnel4

接下來將系統環境設為 HTTPS:

sudo vi /etc/environment

加入 HTTPS=on

並且在 /etc/default/stunnel4 中加入 ENABLED=1

然後透過 sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt, 在 /etc/stunnel/ 目錄中建立所需的 localhost.key 與 localhost.crt

同時建立 /etc/stunnel/stunnel.conf 如下:

&lt;pre class="brush: jscript"&gt;
[https]
accept = your_IPv4_ip:443
accept = :::443
cert = /etc/stunnel/localhost.crt
key = /etc/stunnel/localhost.key
exec = /usr/bin/fossil
execargs = /usr/bin/fossil http /home/user/repository/ --https --nojail --notfound cd2021
&lt;/pre&gt;

實際配置下, 使用 :::443 並無法讓 stunnel 綁定至系統的 ipv6 網址, 必須使用:

&lt;pre class="brush: jscript"&gt;
[https]
accept = 140.xxx.xxx.xxx:443
accept = 2001:288:6004:xx::1:443
cert = /etc/stunnel/localhost.crt
key = /etc/stunnel/localhost.key
exec = /usr/bin/fossil
execargs = /usr/bin/fossil http /home/user/repository/ --https --nojail --notfound cd2021
&lt;/pre&gt;

似乎 stunnel 會自動取最後的 :443 作為 port, 而無需如 https://[ipv6 address]:443 中以 [] 隔開 ipv6 網址與埠號.

execargs = /usr/bin/fossil http /home/user/repository/ --https --nojail --notfound cd2021 設定的意思為 stunnel 代理啟動的指令為 fossil http, 指定 /home/yser/repository/ 作為倉儲目錄, 可以透過 URL 加上倉儲名稱伺服多個 repo.fossil 倉儲, 隨後的 --https 表示要使用 https 協定擷取資料, --nojail 表示不要使用 root 權限啟動, 且不進入 jail 模式, --notfound cd2021 表示內定  https URL 擷取的倉儲為 /home/user/repository/cd2021.fossil

啟動-停止-重新啟動 stunnel4.service
----

sudo systemctl start stunnel4.service

sudo systemctl stop stunnel4.service

sutod systemctl restart stunnel4.service


[Fossil SCM 簡介]: http://mde.tw/2017springcd/blog/intro-fossil-scm.html
</t>
<t tx="leo.20210210090616.1"></t>
<t tx="leo.20210210090621.1"></t>
<t tx="leo.20210210090739.1"></t>
<t tx="leo.20210210090743.1"></t>
<t tx="leo.20210210102942.1">@language md
---
Title: 2021 開春
Date: 2021-02-10 11:00
Category: Weblog
Tags: 202102
Slug: starting-2021
Author: yen
---

2021 年伊始, 機器學習的程式從原先簡單的演化, 進展到能夠有效控制具有亂數的決策系統, 科技的發展讓人類的工作更加兩極化, 一方可持續開發指使電腦軟硬體從事工作, 而另一方則幾乎必須完全按照電腦軟硬體的指示與命令行事.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20210210103150.1">這樣的發展似乎已經沒了退路.</t>
<t tx="leo.20210210113926.1">@language md
---
Title: Pelican 與 Blogger 內容同步2
Date: 2021-02-10 11:20
Category: Weblog
Tags: 202102
Slug: sync-pelican-and-blogger-content2
Author: yen
---

[cmsimde] 中的 Pelican blog 內容建議採用 config 目錄中的 pelican.leo 進行管理, 主要的資料管理架構採用 [Leo Editor] 中的 [@clean] 標題指令, 能夠與內文指令 [@others] 配合, 利用階層式的文章管理, 區隔網誌摘要與各段內容.

[cmsimde]: https://github.com/mdecourse/cmsimde
[@clean]: https://leoeditor.com/directives.html#clean-path
[@others]: https://leoeditor.com/directives.html#part-2-all-and-others

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others

</t>
<t tx="leo.20210210114545.1"></t>
<t tx="leo.20210210114619.1">Google Developer Console
----

為了能夠將 [Pelican blog] 在 [Leo Editor] 中的網誌文章推向 [Blogger], 必須要從 [Google developer console] 取得
與 [Blogger] 擷取權限對應的 secret json 檔案. 實際操作流程如下:

進入 Library - &gt; ENABLE APIS AND SERVICES -&gt; 啟用 Blogger API v3

設定 OAuth consent screen 

新增 Credentials -&gt; Desktop-type Oauth 2.0 client -&gt; Download JSON 即可取得 secret.json 檔案.


[Google developer console]: https://console.developers.google.com
[Pelican blog]: https://blog.getpelican.com/
[Blogger]: https://www.blogger.com
[Leo Editor]: https://leoeditor.com/

將 secrets.json 轉為 token.dat
----

轉換前必須確定系統已經安裝 google_auth_oauthlib

pip install google_auth_oauthlib

接著利用下列程式將 secrets.json 轉為 token.dat, 隨後使用者就可利用此一  token.dat 將 [Leo Editor] 中的網誌文章內容傳送到對應的 [Blogger].

下列程式在轉換過程會透過操作系統的內定瀏覽器讓使用者登入與 secrets.json 對應的帳號, 一旦通過認證就可以完成 secrets.json 轉為 token.dat 的流程.

&lt;pre class="brush: python"&gt;
# get secrets: https://console.developers.google.com
# https://developers.google.com/blogger/docs/3.0/using
# pip install google_auth_oauthlib
# under Mac command + b to execute
import pickle
import os
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request


SCOPES = ['https://www.googleapis.com/auth/blogger', ]

# we check if the file tBo store the credentials exists
if not os.path.exists('./../../yen_gm_blogger_token.dat'):

    flow = InstalledAppFlow.from_client_secrets_file('./../../yen_gm_blogger_secrets.json', SCOPES)
    credentials = flow.run_local_server()

    with open('yen_gm_blogger_token.dat', 'wb') as credentials_dat:
        pickle.dump(credentials, credentials_dat)
else:
    with open('yen_gm_blogger_token.dat', 'rb') as credentials_dat:
        credentials = pickle.load(credentials_dat)
service = build('blogger', 'v3', credentials=credentials)
g.es(service)
&lt;/pre&gt;

將 Pelican 文章轉往 Blogger
----

將 Pelican 文章轉投 Blogger 的過程包含新增與編輯, 新增的程式碼如下:

&lt;pre class="brush: python"&gt;
@language python
from markdown import markdown
from oauth2client import client
#from googleapiclient import sample_tools
import os
# 配合使用 credential token
import pickle
from googleapiclient.discovery import build
#from google_auth_oauthlib.flow import InstalledAppFlow
#from google.auth.transport.requests import Request

os.environ['TZ'] = 'Asia/Taipei'
with open('./../../yen_gm_blogger_token.dat', 'rb') as credentials_dat:
    credentials = pickle.load(credentials_dat)
service = build('blogger', 'v3', credentials=credentials)

def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &lt;h2&gt; 標題
content = content.replace("&lt;h2&gt;", "&lt;h2&gt;&lt;font size='4'&gt;")
content = content.replace("&lt;/h2&gt;", "&lt;/font&gt;&lt;/h2&gt;")
# g.es(content)

try:
    '''
    users = service.users()
    # 取得使用者 profile 資料
    user = users.get(userId='self').execute()
    print('網誌名稱: %s' % user['displayName'])
    '''
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    # post_id is now blogs["items"][0]["id"]
    #blog_id = blogs["items"][0]["id"]
    blog_id = "2403495118140401474"
    #for blog in blogs['items']:
        #print(blog['name'], blog['url'])
    posts = service.posts()
    # 新增網誌 post 時, 需要 post_id
    body = {
    "kind": "blogger#post",
    "id": blog_id,
    "title": title,
    # 利用 markdown 函式, 將 .md 的內文轉為 html, 作為 Blogger 的文章內容
    "content": content,
    "labels": tags
    }
    insert = posts.insert(blogId=blog_id, body=body)
    posts_doc = insert.execute()
    post_id = posts_doc["id"]
    #print(posts_doc)
    # 改用 credential token 後不會產生 blogger.dat
    #os.remove("blogger.dat")
    # 利用最後的 child 節點來儲存 post_id
    to_save_post_id = p.insertAsLastChild()   
    # 改為內文為空的節點, id 直接標在 head 標題 
    to_save_post_id.b = ""
    to_save_post_id.h = post_id
    # 因為新增節點, commander 必須 redraw
    c.redraw()
    g.es("post_id 為", post_id)
    g.es("已經將資料送往 KBlogger!")
except(client.AccessTokenRefreshError):
    g.es("error")
&lt;/pre&gt;

完成上述文章轉投至 Blogger 之後, [Blogger] 會傳回該文章的 post id, 而新增程式會將此 id 放在該筆 @clean 文章節點的最末端, 由於該  post id 節點只有標題而無內文, 因此即便內縮成為 @clean 的子節點, 也不會在文章中增加任何資料, 但若該網誌內容同步推向一個以上的 [Blogger], 則使用者需要將該 post if 內縮外, 還需要在此 post id 節點的上屬節點增加標註, 說明該 post id 所屬的網誌標題或代號.

至於當該文章內容經過編修後, 使用者若希望將新內容推向遠端同步 [Blogger], 則必須將原先新增的 [Blogger] post id 移至該 @clean 文章的最末端, 以便讓程式可以更新與此 post id 對應的 [Blogger] 文章內容.

可用於編輯 [Blogger] 文章的程式碼如下:
    
&lt;pre class="brush: python"&gt;
@language python
from markdown import markdown
from oauth2client import client
#from googleapiclient import sample_tools
import os
# 配合使用 credential token
import pickle
from googleapiclient.discovery import build
#from google_auth_oauthlib.flow import InstalledAppFlow
#from google.auth.transport.requests import Request

os.environ['TZ'] = 'Asia/Taipei'
with open('./../../yen_gm_blogger_token.dat', 'rb') as credentials_dat:
    credentials = pickle.load(credentials_dat)
service = build('blogger', 'v3', credentials=credentials)

def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &lt;h2&gt; 標題
content = content.replace("&lt;h2&gt;", "&lt;h2&gt;&lt;font size='4'&gt;")
content = content.replace("&lt;/h2&gt;", "&lt;/font&gt;&lt;/h2&gt;")
# g.es(content)

try:
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    #blog_id = blogs["items"][0]["id"]
    blog_id = "2403495118140401474"
    # 設法取得原 post 的 id
    postid_outline = p.getLastChild()
    # 直接從標題取得 post 的 id 號碼
    post_id = postid_outline.h
    posts = service.posts()
    # 更新網誌文章時的 body
    body = {
    "kind": "blogger#post",
    "title": title,
    "content": content
    }
    # need to save postId to outline head
    update = posts.update(blogId=blog_id, postId=post_id, body=body, publish=True)
    update_doc = update.execute()
    # 使用 credential token 後, 無需刪除 blogger.dat
    #os.remove("blogger.dat")
    g.es("post_id 為", post_id)
    g.es("已經將更新資料送往 K Blogger!")
except(client.AccessTokenRefreshError):
    g.es("error")
&lt;/pre&gt;
</t>
<t tx="leo.20210210122043.1"></t>
<t tx="leo.20210210122050.1"></t>
<t tx="leo.20210210122108.1"></t>
<t tx="leo.20210210122111.1"></t>
<t tx="leo.20210211095825.1">@language md
---
Title: Fossil SCM on Ubuntu
Date: 2021-02-11 11:00
Category: Weblog
Tags: 202102
Slug: fossil-scm-on-ubuntu
Author: yen
---

[Fossil SCM] 是一套完整的[軟體組態管理系統] ([Software Configuration Management]), 以 ANSI C 編寫, 其中利用 [TCL] 作為 Scripting 語言. 接下來將要說明如何在 Ubuntu 20.04 中安裝與配置 [Fossil SCM].

[Fossil SCM]: https://www.fossil-scm.org
[TCL]: https://en.wikipedia.org/wiki/Tcl
[軟體組態管理系統]: https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86
[Software Configuration Management]: https://en.wikipedia.org/wiki/Software_configuration_management

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20210211100816.1">這裡所要介紹的 [Fossil SCM] 為 &lt;http://fossil.kmol.info&gt; (只配置 IPv6 網路協定), http 網際伺服器前端採用 [nginx], https 代理伺服器採用 [stunnel], 主要伺服的 [Software Configuration Management] 套件則為 [Fossil SCM].

安裝 [nginx]
----

在 Ubuntu 20.04 中安裝 [nginx] 非常簡單, 只要執行 sudo apt install nginx 即可.

[nginx] 的基本設定檔案位於 /etc/nginx/sites-available/default

安裝 [nginx] 有兩個目的, 一方面回應 &lt;http://fossil.kmol.info&gt;, 也就是 port 80 的 WWW 伺服器. 而另外一方面則是配合 &lt;https://certbot.eff.org/lets-encrypt/ubuntufocal-nginx&gt; 以手動模式取得 [stunnel] https 伺服所需要的 fullchain.pem 與 privkey.prm 等兩個檔案.

安裝 [Fossil SCM]
----

在 Ubuntu 20.04 安裝 [Fossil SCM] 也非常簡單, 只要執行 sudo apt install fossil 即可. 但是所安裝的版本可能不是最新版, 由於安裝的 fossil 執行檔案位於 /usr/bin/fossil, 假如希望與 Windows 10 64 位元操作系統中的 [Fossil SCM] 對應, 可以至 &lt;https://fossil-scm.org/home/uv/download.html&gt; 下載 Linux 最新版本的 fossil, 然後以 sudo cp fossil /urs/bin/ 即可. 若要查驗 [Fossil SCM] 的版本, 可以使用 fossil version 指令.

[Fossil SCM] 整個系統就只有一個 fossil 執行檔案, 而倉儲檔案則只全部壓縮在一個 [SQLite] 資料庫檔案中.

接下來為了配置一套可以伺服多個 [Fossil SCM] 倉儲的 Ubuntu 20.04 系統, 在 /home/user/ 目錄下建立 repository 目錄, 之後的所有要從遠端擷取的 [Fossil SCM] 倉儲都可以放在此一用戶目錄下. 至於要在此目錄下建立一個內定的 [Fossil SCM] 倉儲, 可以進入 /home/user/repository 目錄後 (這裡的 user 為 Ubuntu 20.04 下的用戶帳號名稱), 以 fossil init cd2021.fossil 建立一個 [Fossil SCM] 倉儲, 執行完後系統就會直接在命令列中顯示用來管理此一倉儲的用戶 (會使用建立倉儲的帳號, 也就是 user) 登入管理的密碼.

使用者可以選擇將此一與 user 對應的管理密碼記起來, 或者之後再使用 sqlite3 指令進入 cd2021.fossil 查詢.

假如使用者需要在 Ubuntu 環境中直接對 [Fossil SCM] 倉儲改版, 則建議在 /home/user/repository 目錄中再建立一個 wd 目錄 (為 working directory 的縮寫), 之後可以將位於 /home/user/repository 目錄中的各個 .fossil 內容, 在 /home/user/repository/wd 目錄中展開, 若以 /home/user/repository/cd2021.fossil 為例, 展開後將位於 /home/user/repository/wd/cd2021.

安裝 [stunnel]
----

安裝 [stunnel] 也很簡單, 只要執行 sudo apt install stunnel4 即可, 安裝後若要隨系統開機啟動, 則需要 sudo vi /etc/default/stunnel4, 並在檔案中加入 ENABLED=1 後存檔.

另外, 還需要 sudo vi /etc/environment, 並在檔案中加入 HTTPS=on 後存檔.

接下來為了由 [stunnel] 代理 [Fossil SCM] 的 https 伺服, 必須加入 /etc/stunnel/stunnel.conf

&lt;pre class="brush: jscript"&gt;
[https]
accept = 140.130.your_ipv4.ip:443
accept = 2001:288:6004:your:ipv6::ip:443
cert = /etc/stunnel/fullchain.pem
key = /etc/stunnel/privkey.pem
exec = /usr/bin/fossil
execargs = /usr/bin/fossil http /home/user/repository/ --https --nojail --notfound cd2021
&lt;/pre&gt;

上述的 fullchain.pem 與 privkey.pem 由於尚未配置 [certbot], 必須要取得合法的數位簽章檔案後, 再利用:

sudo systemctl start stunnel4.service 

啟動 [stunnel].

sudo systemctl stop stunnel4.service

關閉 [stunnel], 或利用:

sudo systemctl restart stunnel4.service

重新啟動 [stunnel].

擷取 fullchain.pem 與 privkey.pem
----

這個步驟主要按照 &lt;https://certbot.eff.org/lets-encrypt/ubuntufocal-nginx&gt; 中的指令操作, 由於 Ubuntu 20.04 已經內建 snap, 因此只要執行:

sudo snap install core; sudo snap refresh core

sudo snap install --classic certbot

sudo ln -s /snap/bin/certbot /usr/bin/certbot

sudo certbot certonly --nginx

就可以在 /etc/letsencrypt/live/fossil.kmol.info/ 目錄中找到 fullchain.pem 與 privkey.pem 等兩個數位簽章檔案, 接著將此兩個檔案複製至 /etc/stunnel/ 目錄, 以便配合 /etc/stunnel/stunnel.conf 隨電腦開機啟動.

因為 [certbot] 的數位簽章每 90 天都要更新一次, 屆時若要手動更新可以先模擬執行:

sudo certbot renew --dry-run

nginx http 跳轉 https
----

最後一個步驟是讓 [nginx] 所伺服的 &lt;http://fossil.kmol.info&gt; 能夠自動跳轉到 [Fossil SCM] 與 [stunnel] 結合的 &lt;https://fossil.kmol.info&gt;

修改 /etc/nginx/sites-available/default 中的設定如下:

&lt;pre class="brush: jscript"&gt;
server {
listen 80;
server_name fossil.kmol.info;
rewrite ^/(.*)$ https://fossil.kmol.info/$1 permanent;
}
&lt;/pre&gt;


[nginx]: https://nginx.org/
[stunnel]: https://www.stunnel.org/
[SQLite]: https://www.sqlite.org
[certbot]: https://certbot.eff.org/
</t>
<t tx="leo.20210211110217.1"></t>
<t tx="leo.20210211110222.1"></t>
<t tx="leo.20210211110239.1"></t>
<t tx="leo.20210211110243.1"></t>
<t tx="leo.20210211133326.1">@language md
---
Title: Fossil SCM 使用案例
Date: 2021-02-11 11:10
Category: Weblog
Tags: 202102
Slug: fossil-scm-use-case
Author: yen
---

請注意: &lt;http://fossil.kmol.info&gt; 僅支援 IPv6 網路協定.

[Fossil SCM] 的 &lt;https://fossil-scm.org/home/doc/trunk/www/embeddeddoc.wiki&gt; 可以與靜態網頁結合應用, 唯一必須注意的是 &lt;https://fossil-scm.org/home/doc/trunk/www/defcsp.md&gt; 議題.

[Fossil SCM]: https://www.fossil-scm.org

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20210211134529.1">[Fossil SCM] documentation 功能
----
先前已經建議 [Fossil SCM] 的倉儲可以放在 /home/user/repository/ 目錄中, 以這裡的範例分別為 /home/user/repository/cd2021.fossil 與 /home/user/repository/lab.fossil, 而這兩個倉儲的展開內容分別位於 /home/user/repository/wd/cd2021 與 /home/user/repository/wd/lab 等目錄.

透過 [Fossil SCM] 的 &lt;https://fossil-scm.org/home/help/http&gt; 指令與 [stunnel] 的結合運用可以伺服為:

&lt;http://fossil.kmol.info/cd2021/doc/trunk/index.html&gt;

與

&lt;http://fossil.kmol.info/lab/doc/trunk/index.html&gt;

而這兩個 [Fossil SCM] 倉儲的靜態網頁與 &lt;https://mde.tw/cd2021&gt; 及 &lt;https://mde.tw/lab&gt; 內容保持同步. 且 [Fossil SCM] 的靜態網頁可以直接將網址中的 trunk (表示為最新版本) 換為 [Fossil SCM] 倉儲內容的對應版本號, 就可以直接顯示各舊版本的靜態網頁內容, 這一個功能至今連 &lt;https://pages.github.com/&gt; 或 &lt;https://docs.gitlab.com/ee/user/project/pages/&gt; 都還無法直接在網際介面中完成.

[Fossil SCM] open, add 與 commit
----

之前已經提過, 建立 [Fossil SCM] 倉儲的方法:

fossil init cd2021.fossil

而這個指令若直接在 /home/user/repository/ 目錄中執行, 則可以建立 cd2021.fossil 空倉儲.

這裡的規劃是將這些倉儲以 fossil open 指令, 在 /home/user/repository/wd 目錄中設法展開內容, 而且以倉儲的名稱作為展開後的目錄, 並將展開內容置入.

例如:

/home/user/repository/cd2021.fossil 可以透過:

在 /home/user/repository/wd/cd2021/ 目錄中執行 fossil open ./../../cd2021.fossil 而將內容展開.

而 /home/user/repository/lab.fossil 則在 /home/user/repository/wd/lab 目錄中展開內容.

若從 Github 以:

git clone --recurse-submodules https://github.com/mdecourse/cd2021.git 

將 cd2021 倉儲內容取下, 而且放入 /home/user/repository/wd/cd2021/ 目錄中.

使用者就可以在 /home/user/repository/wd/cd2021/ 目錄中執行:

fossil add .

fossil commit -m "add cd2021 git repository content"

則 [Fossil SCM] 會將 /home/user/repository/wd/cd2021/ 已經改版的內容壓進 /home/user/repository/cd2021.fossil 倉儲中, 並透過 [Fossil SCM] http 將靜態網頁以 project documentation 功能伺服到 &lt;https://fossil.kmol.info/cd2021/doc/trunk/index.html&gt;.

而根據網站內容, 必須將 https://fonts.googleapis.com 放入 settings - default-csp 設定欄位中, [Fossil SCM] doc 網站才會允許 default-csp 設定的網站進行跨網站擷取所需的資料.

採取相同的操作步驟, 就可以將 &lt;https://mde.tw/lab&gt; 網站資料同步至 &lt;http://fossil.kmol.info/lab/doc/trunk/index.html&gt;

[stunnel]: https://www.stunnel.org/</t>
<t tx="leo.20210211141441.1"></t>
<t tx="leo.20210211141444.1"></t>
<t tx="leo.20210211141509.1"></t>
<t tx="leo.20210211141512.1"></t>
<t tx="leo.20210212045441.1">一開始, 利用 &lt;https://github.com/mdecourse/cmstemplate&gt; 作為樣板, 建立一個 &lt;https://github.com/mdecourse/fosgit&gt; 倉儲, 並且分別在 Ubuntu 與 Windows 10 中進行操作, 目標是分別利用 [Fossil SCM] 與 Github 管理 &lt;https://mde.tw/fosgit&gt; 與 &lt;http://fossil.kmol.info/fosgit/doc/trunk/index.html&gt; 兩個網站的對應倉儲.

建立 fosgit 倉儲
----

在 Github 登入後, 新增 fosgit 倉儲時, 在上方 template 選單, 選擇以 &lt;https://github.com/mdecourse/cmstemplate&gt; 作為 template, 意即要直接利用 CMSiMDE 建立一個動態網站與靜態網站, 名稱為 fosgit.

完成後的倉儲位於 &lt;https://github.com/mdecourse/fosgit&gt;, 透過 Github 的設定將 main 分支設為 Github Pages 的 root, 接著就可以設法將倉儲以:

git clone --recurse-submodules https://github.com/mdecourse/fosgit.git

取下倉儲資料到 Ubuntu 或 Windows 10 操作系統中, 之所以需要使用 --recurse-submodules 選項的原因是 cmstemplate 倉儲帶有子模組, 使用者可以直接透過上述指令取下包含子模組的倉儲所有資料.

Ubuntu 端操作
----

由於 fosgit 倉儲在 [Fossil SCM] 端希望透過 &lt;http://fossil.kmol.info/fosgit&gt; 進行管理, 為了方便, 可以直接以 ssh 登入 fossil.kmol.info 主機進行操作.

首先就是在 /home/user/repository/ 目錄中, 以  fossil init fosgit.fossil 建立 fosgit.fossil 空的倉儲檔案.

接著進入 /home/user/repository/wd/ 目錄中, 以 git clone --recurse-submodules https://github.com/mdecourse/fosgit.git 將 Github 端的倉儲 clone 至 /home/user/repository/wd/fosgit 目錄.

Fossil SCM .fslckout
----
由於 Ubuntu [Fossil SCM] 倉儲的內容存在 .fslckout 檔案中, 因此  /home/user/repository/wd/fosgit 目錄中雖然已經有與 Github 遠端倉儲對應的 .git 目錄, 但還需要能與 &lt;http://fossil.kmol.info/fosgit&gt; 對應的 .fslckout, 為了取得此一資料檔案. 可以進入 fossil.kmol.info 主機中的 /home/user/repository/ 目錄, 以 fossil init fosgit.fossil 建立, 隨後則進入 /home/user/repository/wd/fosgit 目錄執行 fossil open ./../../fosgit.fossil, 將 fosgit.fossil 對應的 .fslckout 放入  /home/user/repository/wd/fosgit 目錄.

這時, 因為 &lt;http://fossil.kmol.info/fosgit&gt; settings 已經勾選 dotfiles (V), 因此 [Fossil SCM] 倉儲會導入 .git 目錄, 同時 [Fossil SCM] 的版本資料 .fslckout (或隨後的 _FOSSIL_) 也會被 Github 納管.

[Fossil SCM] addremove 指令
----

上述的規劃, 若從 cmsimde/ 目錄中執行 python wsgi.py, 可以在近端對倉儲內容作變更, 其中可能包括刪除倉儲中的某些檔案. 這時若要讓系統自動將已經刪除的檔案納入版次管理, 可以使用 [git addremove] 指令.

[git addremove]: https://fossil-scm.org/home/help/addremove</t>
<t tx="leo.20210212070240.1"></t>
<t tx="leo.20210212070247.1"></t>
<t tx="leo.20210212070300.1"></t>
<t tx="leo.20210212070342.1"></t>
<t tx="leo.20210212104928.1">@language md
---
Title: Fossil SCM 與 Github 整合
Date: 2021-02-12 11:00
Category: Weblog
Tags: 202102
Slug: fossil-scm-and-github-integration
Author: yen
---

請注意: &lt;http://fossil.kmol.info&gt; 僅支援 IPv6 網路協定.

為了實際了解 [Fossil SCM] 與 Github 的同一倉儲內容資料, 應該如何整合, 特別建立了一個 fosgit 倉儲作為測試.

[Fossil SCM]: https://www.fossil-scm.org

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20210216053228.1">@language md
---
Title: 2021 Spring 課程規劃
Date: 2021-02-16 11:00
Category: Weblog
Tags: 202102
Slug: 2021-spring-course-planning
Author: yen
---

請注意: &lt;http://fossil.kmol.info&gt; 僅支援 IPv6 網路協定.

每年的 Spring [KMOLab] 共開兩門課程, 網際內容管理與協同產品設計實習, 基本的課程規劃仍以承接 Fall 的計算機程式及電腦輔助設計實習為主.

[Fossil SCM]: https://www.fossil-scm.org
[Github]: https://github.com/
[Gitlab]: https://gitlab.com/
[Heroku]: https://www.heroku.com/
[Blogger]: https://www.blogger.com/
[KMOLab]: http://mde.tw

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others
</t>
<t tx="leo.20210219033033.1">重新導入 [Fossil SCM]
----

2021 年除了使用各種免費雲端儲存空間與分散式版次管理系統外, 特別又將能簡易配置在自架伺服器上的 [Fossil SCM] 拿了出來. 主要原因是 [Fossil SCM] 在功能提升與 IPv6 的環境下已經有大幅進步. 因此各種課程相關資料除了放在 [Github], [Gitlab] 與 [Heroku] (只限存 500 MB), 也將同步存入近端工作站室中的實體或虛擬主機 [Fossil SCM] 系統中. (例如: &lt;http://mde.tw/cd2021&gt; 與 &lt;http://fossil.kmol.info/cd2021/doc/trunk/index.html&gt; 為同步資料, 其倉儲分別為 &lt;https://github.com/mdecourse/cd2021&gt; 與 &lt;http://fossil.kmol.info/cd2021&gt;)

五專部網際內容管理課程規劃
----

Spring 的網際內容管理課程分別開設在五專一精密機械工程科與四技一機械設計工程系, 因為五專一是高中一年級入學的下學期課程, 上學期只上過計算機概論, 因此五專的網際內容管理課程就從 [Blogger] 的網際內容管理系統導入作為開端.

[Blogger] 是與 Google 帳號整合的 Blog 系統, 而 Blog 則是一種依照發佈時間排序的內容記錄, 五專課程一開始就是要求每一位學員利用學校配發的"學號@gm.nfu.edu.tw"建立自己的網際內容管理課程網誌, 並且將上學期的計算機概論課程摘要一一紀錄, 除了讓學員熟悉如何使用 [Blogger] 之外, 也讓學員能夠多多練習英文與中文打字, 尤其是除了中文注音輸入之外, 至少再學一套較有未來性的中文輸入法.

五專的網際內容管理系統除了 [Blogger] 之外, 將從如何整理各學員的 [Blogger] 網際連結切入, 讓學員對於 [HTML] 與 [全球資訊網] 能有初步認識, 其中將會包含如何利用 [CMSiMDE] 在  [Github] , [Gitllab], [Heroku] 與 [Fossil SCM] 中建立個人課程網頁系統. 並且讓學員逐步熟悉電腦與網路的設定與應用, 同時透過 Windows 10 64 位元操作系統上的可攜程式環境, 讓學員了解英文與程式應用的重要性.

四技部網際內容管理課程規劃
----

四技部的網際內容管理, 除了包含上述五專部的課程內容之外, 將要從 [nfulist] 程式的架構導入, 讓學員應用近端與雲端程式擷取學校教務主機中的資料. 其次還希望各學員能夠在自己的電腦上配置學校所能取得的合法 CAD 與 CAE 套件, 並且有能力採用網際程式 API 的模式延伸這些封閉套件的功能, 至少有能力可以根據 &lt;http://mde.tw/cad2020/content/HW1_SW.html&gt; 的導引, 結合初步的網際協同程式 &lt;https://github.com/mdecourse/cd2020pj1&gt;, 開發各種與機械協同設計相關的網際延伸應用, 或者設法[改寫 CMSiMDE].

協同產品設計實習課程規劃
----

2021 年的協同產品設計實習所採用的規劃是三段式協同的步驟, 從兩人一組, 四人一組到最後八人一組的設計流程, 讓各學員實際了解協同設計的基本元素是人, 工具與時間, 傳統的設計工具若沒有網路的串連, 較難產生同步協同效益, 但是網路與同步協同模式也帶來許多問題.

2020 年的疫情讓全球各企業許多員工被迫必須[在家上班], 而 work from home 的模式包含協同產品設計流程中的同步與非同步協同, 幾乎所有的成員溝通都必須透過網路與視訊工具達成. (例如: &lt;http://mde.tw/cd2020/content/Covid-19.html&gt; 與 &lt;http://mde.tw/cd2020/content/Online%20course.html&gt;), 而這個學期的協同產品設計實習重點除了 [Onshape], [Coppeliasim], [Webots] 與 [Fossil SCM] 外, 也將納入 [Ethercalc] 的 [API 應用] 以及 [Jitsi] 視訊會議系統的使用.

[HTML]: https://developer.mozilla.org/zh-TW/docs/Learn/Getting_started_with_the_web/HTML_basics
[全球資訊網]: https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91
[CMSiMDE]: https://github.com/mdecourse/cmsimde
[nfulist]: https://github.com/mdecourse/nfulist
[改寫 CMSiMDE]: http://mde.tw/wcm2021/content/CMSiMDE.html
[在家上班]: https://en.wikipedia.org/wiki/Telecommuting
[Onshape]: https://onshape.com
[Coppeliasim]: https://www.coppeliarobotics.com/
[Webots]: https://cyberbotics.com/
[Ethercalc]: https://github.com/audreyt/ethercalc
[API 應用]: http://mde.tw/cd2021/content/Programming.html
[Jitsi]: https://meet.pdis.tw/
</t>
<t tx="leo.20210219033110.1"></t>
<t tx="leo.20210219033115.1"></t>
<t tx="leo.20210219033130.1"></t>
<t tx="leo.20210219033133.1"></t>
<t tx="leo.20210219075408.1">@language md
---
Title: 2021 Pelican 設定修改
Date: 2021-02-19 11:00
Category: Weblog
Tags: 202102
Slug: 2021-kmolab-pelican-setup-modification
Author: yen
---

請注意: &lt;http://fossil.kmol.info&gt; 僅支援 IPv6 網路協定.

利用 [Leo Editor] 開啟 [CMSiMDE] 中的 config/pelican.leo, 然後利用 control + i 插入一個新的節點, 將節點標題改為 @clean 20210219.md, 表示要利用 @clean 指令在 markdown 目錄中新增一個 20210219.md 的 Markdown 格式檔案.

[Fossil SCM]: https://www.fossil-scm.org
[Github]: https://github.com/
[Gitlab]: https://gitlab.com/
[Heroku]: https://www.heroku.com/
[Blogger]: https://www.blogger.com/
[KMOLab]: http://mde.tw
[Leo Editor]: https://leoeditor.com/
[CMSiMDE]: https://github.com/mdecourse/cmsimde
[Pelican Blog]: https://blog.getpelican.com/

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20210219075856.1">接著從先前的網誌中複製網誌文章的標頭格式資料, 修改標題與日期, 並且留意 slug 中必須要採用唯一的檔案名稱, 然後就可以先寫網誌的摘要, 之後再利用 @others 標註將隨後子節點中的內文區全部整合到 20200219.md 檔案中.

然後就可以開始寫特定主題的網誌內容.

slug 名稱必須唯一
----

假如你曾經見過網路上的網路文章除了英文標題外, 隨後還有一串不短的數字, 這一串數字就是與前面的文章主題結合, 然後可能用做該文章儲存的檔案名稱, 主要用來確認該主題加上數字的字串在系統中具有唯一性.

所謂同步
----

其實在各網誌間的所謂同步, 並非及時同步, 而是在各種可能的情況下儘量讓多方的資料內容保持相同. 那麼在完全同步之間的影響因素就是時間, 因為將資料從一系統轉到另一個系統需要時間. 以 [CMSiMDE] 上的 [Pelican Blog] 轉到 [Blogger], 需要在 [Leo Editor] 以程式按鈕執行, 而實際操作過程需要將滑鼠停留在網誌文章節點, 然後點擊新增 [Blogger] 或編輯 [Blogger] 的程式按鈕, 一旦 [Pelican Blog] 的網誌文章正確存入對應的 [Blogger] 系統後, [Blogger] 會傳回 blog id, 並且透過程式安排將此一 blog id 存為該網誌文章的子節點標題, 而且是沒有內容的文章標題, 因此這些用來標註所屬 [Blogger] 與 blog id 的資料並不會影響 @others 導入子節點文章內容的功能.

由於目前的程式只會從網誌文章的最後一個節點存取 blog id, 因此若將同一篇網誌文章同步公開到多麼 [Blogger], 新增或編輯時除了要注意滑鼠是否停留在文章主節點外, 還必須在新增與編輯過程手動搬遷這些 blog id.
</t>
<t tx="leo.20210219082217.1"></t>
<t tx="leo.20210219082223.1"></t>
<t tx="leo.20210219082240.1"></t>
<t tx="leo.20210219082242.1"></t>
<t tx="leo.20210222144701.1">@language md
---
Title: 2021 工作流程
Date: 2021-02-22 11:00
Category: Weblog
Tags: 202102
Slug: 2021-kmolab-prefered-working-flow
Author: yen
---

請注意: &lt;http://fossil.kmol.info&gt; 僅支援 IPv6 網路協定.

2021 年起的工作流程已經逐步確立, 其中為了因應 G Suite for Education 改名為 Google Workspace for Education 後, 免費的 GDrive 已經不再提供 unlimited 使用, 因此 @gm 上的儲存空間將只提供當學期所使用的下載服務.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20210222151517.1">其實在網際網路上, 本來就沒有免費使用的服務, 差別只在於連線上網過程所使用的各種資源, 到底是誰在付出代價?

2018 年起 [KMOLab] 所開設的課程已經全面使用 [CMSiMDE] 建立動態與靜態網站, 其中的動態網站主要用於近端或網際的網站內容編輯, 而靜態網站則使用  [Github], [Gitlab], [Heroku] 與 [Fossil SCM] 進行同步伺服, 意即每一個與 [KMOLab] 有關的課程內容資料, 遠端可以有四個同步備份, 而近端則是工作目錄所在電腦, 則可以具有與遠端版本相同或相近的多個分散式備分內容.

雲端的同步資料中只有 [Heroku] 可以執行 Python, 但能夠免費使用的總容量限制在 500 MB 以內, 因此大多僅用於 Python 網際程式開發測試或跳板之用.

至於 [Github] 與 [Gitlab] 的競爭其實已經告一段落, 等塵埃落定, 勝出的一方將會與 Google 蹲點 10 年的 GDrive 商品一樣 (2012-2022), 不再提供用來打擊對手的優渥免費教育使用方案.

這樣的認知其實在受到 [Openshift] 中途拆免費使用者的台之後, 相比之下, GDrive 仍然維持每個帳號大約 15GB 的免費儲存量, 好像已經厚道, 但, 真正的原因可能是: 普羅大眾的網際儲存大數據, 仍然具有價值.

期望 [Github] 不要改變使用方針
----

以目前的情況來看, [Github] 對於上課專用的小 project, 在  2026 年之前免費存放 50 MB (目前的 limit 為 100MB) 以下的檔案, 然後總倉儲容量不要超過 1 GB ([Github] 目前[最大容忍量]為 5GB), 應該沒有太大問題, 另外一個限制則是每個目錄下最多只能有 1000 個檔案.

[KMOLab] 建立倉儲可以將 &lt;https://github.com/mdecourse/cmstemplate&gt; 當作 template 直接建立靜態網站與動態網站, 其中的靜態網站以 Github Pages 建立, 而動態網站則需要 Python 3 加上 flask flask_cors lxml bs4 markdown pelican leo 等模組.

針對將 [Github] 中的倉儲同步至 [Gitlab], 也同時要啟用 Gitlab Pages, 則倉儲中額外需要 &lt;https://raw.githubusercontent.com/mdecourse/cad2020/master/.gitlab-ci.yml&gt; 進行設定. 而雙方倉儲的同步設定位於近端, 可以利用 git remote add 指令輕易達成, 一般是將推送到 [Gitlab] 的 git remote add 名稱設為 gitlab, 只要提交推送至 [Github] 後, 以 git push gitlab 就可以將同步資料的版本送到 [Gitlab].

至於將靜態網站資料送到 [Heroku] 的設定, 則是透過 &lt;https://github.com/mdecourse/cad2020/blob/master/index.php&gt; 將倉儲的靜態內容以 PHP 伺服進行跳址傳送.

同步至 [Fossil SCM] 倉儲
----

將 [Github] 倉儲同步至 [Fossil SCM] 倉儲的目的, 其實就是考量若上述三個免費雲端儲存服務都面臨停用後, 在只有自架主機的情況下, 可以只使用 [Fossil SCM] 管理版本資料, 或者自行安裝 &lt;https://gitlab.com/gitlab-org/gitlab&gt;, 仍然可以在近端主機或遠端主機環境下的 [Fossil SCM] 與 [Gitlab] 倉儲維持與先前相同的工作流程.f

在此為了避免 [Github] 與 [Fossil SCM] 倉儲雙向同步下, 可能造成 __FOSSIL__ 或 .fslckout 檔案的合併問題, 特別讓 [Fossil SCM] 倉儲保有 [Github] 倉儲的版本資料 (也就是 .git 目錄內容), 但 [Github] 倉儲則不儲存 __FOSSIL__ 或 .fslckout 檔案.

實際的作法是以 [Github] 倉儲中的改版為主, 在 [Fossil SCM] 倉儲端僅透過 git pull 取得最新的 [Github] 倉儲內容, 然後再勾選 [Fossil SCM] 倉儲端設定的 dotfiles 選項, [Fossil SCM] 倉儲就能納入 [Github] 倉儲的版本資料.

基本的操作流程如下:

github 利用 cmstemplate 建立 [CMSiMDE] 倉儲
github 端完成靜態 Github Pages 設定
fossil 端, 在對應的 wd 目錄, 以 git clone --recurse-submodules 取下 github 端的倉儲內容
fossil 端 wd 中設法利用 fossil open 開啟從 fossil init 所建立的 fossil 倉儲
將 fossil 空白的 __FOSSIL__ 或 .fslckout 檔案複製至 wd/倉儲名稱目錄下
利用 fossil add . 或 fossil addremove 將 git pull 從遠端取回的版本資料進行新增
再利用 fossil push 與 autosync 功能, 將改版資料送到 fossil 端.
最後則將 fossil 端的 default-csp 欄位設為 https://fonts.googleapis.com, 以便讓靜態網頁可以正常透過 doc/trunk/index.html 取得.



[最大容忍量]: https://docs.github.com/en/github/managing-large-files/what-is-my-disk-quota
[Fossil SCM]: https://www.fossil-scm.org
[Github]: https://github.com/
[Gitlab]: https://gitlab.com/
[Heroku]: https://www.heroku.com/
[Blogger]: https://www.blogger.com/
[KMOLab]: http://mde.tw
[Leo Editor]: https://leoeditor.com/
[CMSiMDE]: https://github.com/mdecourse/cmsimde
[Pelican Blog]: https://blog.getpelican.com/
[KMOLab]: http://mde.tw
[Openshift]: https://en.wikipedia.org/wiki/OpenShift

</t>
<t tx="leo.20210222162539.1"></t>
<t tx="leo.20210222162542.1"></t>
<t tx="leo.20210222162602.1"></t>
<t tx="leo.20210222162607.1"></t>
<t tx="leo.20210224100246.1">@language md
---
Title: 2021 nuklear
Date: 2021-02-24 11:00
Category: Weblog
Tags: 202102
Slug: 2021-kmolab-using-nuklear
Author: yen
---

[Nuklear] 是一套以 C 建立的 GUI 套件, 這裡希望透過 [Msys2] 導入. 所完成的程式可以在 Windows 10 與 Ubuntu 中執行.

[Nuklear]: https://github.com/Immediate-Mode-UI/Nuklear
[Msys2]: https://www.msys2.org/

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20210224101026.1">安裝 nuklear
----

從 [Nuklear] 取得 nuklear.h 放入 Y:\msys64\mingw64\include 目錄便完成安裝.

Msys2 加裝 glew 與 glfw
----

啟動 Y:\msys64\mingw64.exe, 然後執行:

pacman -S mingw-w64-x86_64-glew

pacman -S mingw-w64-x86_64-glfw

直接進入 Y:\tmp\Nuklear\demo\glfw_opengl2, 以

gcc main.c -std=c99 -pedantic -O2 -o demo.exe -lglfw3 -lopengl32 -lm -lGLU32

建立 demo.exe 配合 Y:\msys64\mingw64\bin 目錄中的 glfw3.dll 就可以執行.

若是在 IPv6 協定機器中, pacman 安裝需要透過 proxy server, 可在  Y:\msys64\etc\wgetrc 中以

https_proxy = http://[2001:288:6004:XX::69]:3128/
http_proxy = http://[2001:288:6004:XX::69]:3128/
ftp_proxy = http://[2001:288:6004:XX::69]:3128/

進行設定.</t>
<t tx="leo.20210224102432.1"></t>
<t tx="leo.20210224102437.1"></t>
<t tx="leo.20210224102501.1"></t>
<t tx="leo.20210224102509.1"></t>
<t tx="leo.20210306102210.1">@language md
---
Title: 2021 cmsimde 修改
Date: 2021-03-06 11:00
Category: Weblog
Tags: 202103
Slug: 2021-kmolab-cmsimde-modification-add-three-bats
Author: yen
---

[cmsimde] 由 [KMOLab] 編寫, 是一套用於課程教學使用的網際內容管理系統, 從 2013 年底起配合各相關課程的內容與教學進度拼湊而成. 原始的內容分頁方式採自 [cmsimple], 也就是利用 content.htm 中的 H1~H3 標註分頁, 經過多年的修修改改, 其中納入 [Pelican] 與 [Reveal.js] 的應用. 

[cmsimde]: https://github.com/mdecourse/cmsimde
[KMOLab]: http://mde.tw
[cmsimple]: https://www.cmsimple.org/en/
[Pelican]: https://blog.getpelican.com/
[Reveal.js]: https://revealjs.com/


&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20210306102233.1">由於使用過程牽涉動態網站與靜態網站的分散式版次管理, 使用者必須在命令提示字元中進出 cmsimde 目錄, 因此經常造成初學者弄亂倉儲中 [cmsimde] 子模組的版次, 而無法讓 [Github Pages] 中的靜態網頁正常轉檔. 這時可以採[刪除重建子模組] ([操作影片]) 或[重新 checkout cmsime 版本] 的方式進行修正. 有鑑於學員發生錯誤的次數實在太多, 因此促成本次的 [cmsimde] 用法修改.

[Github Pages]: https://pages.github.com/
[刪除重建子模組]: http://mde.tw/cad2020/content/W5Video.html
[操作影片]: https://drive.google.com/file/d/1TvkSOMRAUaGE4xL2b_5xOb4xbm8O_pi0/view
[重新 checkout cmsime 版本]: http://mde.tw/cp2020/content/cmsimde%20%E5%95%8F%E9%A1%8C.html

在倉儲目錄開啟動態網站
----

要修正上述使用者可能在 cmsimde 子模組目錄進行倉儲改版推送所造成的問題, 就是不需要讓使用者以命令列進出 cmsimde 目錄, 只要使用者是透過 [cmstemplate], 以 [Github] [template] 功能建立倉儲, 就無需處理 git submodule add 指令與 up_dir 目錄內容的複製. 或許就能避開上述可能造成的問題.

要讓使用者在倉儲目錄開啟 [cmsimde] 動態網站, 只需要新增一個 cms.bat, 內容為:

&lt;pre class="brush=js"&gt;
python cmsimde/wsgi.py
&lt;/pre&gt;

但由於是在倉儲目錄中執行此一 batch file, 所以用來建立 https 數位簽章用的 localhost.crt 與 localhost.key 檔案必須透過下列 portablegit/bin/sh.exe Shell 指令完成:

&lt;pre class="brush: javascript"&gt;
openssl req -x509 -nodes -days 365 -newkey rsa:4096 -keyout localhost.key -out localhost.crt
&lt;/pre&gt;

也就是 localhost.crt 與 localhost.key 必須從 cmsimde 子模組的根目錄移至 up_dir 目錄中, 並且也將 cms.bat 放入 up_dir 目錄.

另外又建立 up.bat 用於手動以 git submodule add 時, 必須將 up_dir 目錄內容複製至倉儲根目錄的流程:

&lt;pre class="brush: javascript"&gt;
@echo off
robocopy up_dir ./../ /E
&lt;/pre&gt;

最後針對採 openssh 對 [Github] 推送的需要 (無需輸入使用者的帳號與密碼), 建立一個 acp.bat (Add, Commit, Push):

&lt;pre class="brush: javascript"&gt;
echo off
set message=%1
git add .
git commit -m %message%
git push
&lt;/pre&gt;

執行時只需要將提交訊息字串放在 acp.bat 執行指令後面即可.

[cmstemplate]: https://github.com/mdecourse/cmstemplate
[Github]: https://github.com/
[template]: https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-template-repository</t>
<t tx="leo.20210306110551.1"></t>
<t tx="leo.20210306110554.1"></t>
<t tx="leo.20210306110610.1"></t>
<t tx="leo.20210306110613.1"></t>
<t tx="leo.20210306152423.1">@language md
---
Title: 2001年讀書心得
Date: 2021-03-06 12:00
Category: Weblog
Tags: 202103
Slug: 2021-kmolab-wth-is-this
Author: yen
---

現在還寫得出這種文章嗎?哈!! 當然不行, 絕對不可能!!

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20210306152445.1">2001 年在當時校長要求全校一級主管寫的大學教育政策白皮書讀後心得報告

科技大學的本質在教導學生獲得知識的能力，二十一世紀知識經濟最大的特色，在於必須將知識迅速化為商品，由於市場全球化的影響，未能即時將本身所擁有的知識，快速轉化為商品，並被市場接受的企業，終將難逃被時代淘汰的命運，企業如此，教育界也正面臨同樣的挑戰。

教育部將大學的競爭力，視為國家競爭力的重要指標，全國各大學面對社會多元化的需求與全民終身學習的發展趨勢，如何在「大學教育政策白皮書」的基本方針下，強化各校的競爭力，建立各校的重點特色，便成為各大學今後所賴以生存的重要關鍵。

事實上，「大學教育政策白皮書」中所提到的觀點，或許是台灣一般大學與科技大學所共同面臨的問題，但，就基本體制上，仍然要有所區分，方能貫徹彼此的教育目標，為社會的現在與未來，提供充足的人力資源。吾人以為，一般大學的最高目標在追求學術的卓越，而科技大學則必須掌握技術的領先，學術強調的是其具備未來的主導性，卓越的學術指的是高瞻遠矚，是未來有用的技術；而技術的領先是要培養能馬上為企業所用的科技尖兵，是能馬上將知識轉化為商品的創新發明家。也許，隨著科技進化的速度日益增快，學術與技術的區隔，也就變得越來越小，但一般大學與科技大學應有的角色與定位，仍不失為各大學爭取重點特色時，所應強調的重點。

最後，談到本校在通過改名為科技大學後，如何在「大學教育政策白皮書」的指導方針下，爭取市場定位，並積極發展出屬於自己的特色，吾人以為，必須要先從小處做起，慢慢往大處做；必須要先由內做起，然後再漸漸往外落實。小處在哪裡，必須先用科學化與合理化來管理學校的每一個角落，然後才能談替企業診斷，為財團解憂。必須要先在校內建立起知識經濟的體系，然後才有可能與社會上全民學習的脈動相結合。未來，全球化經濟發展的趨勢或許很難臆測，但本校單類多科的包袱，如何逐步轉化為本校的重點特色，將是一項嚴酷的考驗，成敗的關鍵，就看現在。</t>
<t tx="leo.20210306153256.1"></t>
<t tx="leo.20210306153302.1"></t>
<t tx="leo.20210306153326.1"></t>
<t tx="leo.20210306153329.1"></t>
<t tx="leo.20210314151746.1">@language md
---
Title: 機械還能唸嗎?
Date: 2021-04-27 11:00
Category: Mechanical
Tags: 202104
Slug: 2021-kmol-about-mechanical-engineering
Author: yen
---

許多人都在問: 機械這個領域還能唸嗎?

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others
</t>
<t tx="leo.20210317023310.1"></t>
<t tx="leo.20210317023351.1"></t>
<t tx="leo.20210317023355.1"></t>
<t tx="leo.20210317102957.1"></t>
<t tx="leo.20210511091839.1">@language md
---
Title: 都是中文模式惹的禍
Date: 2021-05-11 11:00
Category: Error
Tags: 202105
Slug: 2021-kmol-all-errors-come-to-using-chinese-mode
Author: yen
---

前幾天有一位學生問, 為甚麼在他的筆電無法開啟 FreeCAD?

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20210511092657.1">原因有二, 其一是將 FreeCAD 解開於中文目錄名稱下, 其二則是使用中文帳號名稱登入 Windows. 只要將這兩個地方改為英文就可以順利開啟 FreeCAD.

另外一個錯誤是, 當使用者在 Windows 10, 處於中文輸入模式下, 首次開啟 Leo Editor 時, 由於 Leo Editor 跳出的視窗等待使用者輸入用戶辨識字串時, 不接受中文輸入, 且按下 shift 希望轉為英文輸入模式時, Leo Editor 會判定使用者無法輸入有效的字串而進入無限迴圈. 

要避開 Leo Editor 在中文模式下無法正確開啟的方法就是, 首次開啟 Leo Editor 時要先將輸入模式調整為英文模式, 如此就可以順利建立 home/.leo/.leoID.txt 必要檔案.



</t>
<t tx="leo.20210524012816.1"></t>
<t tx="leo.20210524012836.1"></t>
<t tx="leo.20210524012857.1"></t>
<t tx="leo.20210524012907.1"></t>
<t tx="leo.20210524091059.1">https://mdecourse.blogspot.com/ 

login 

get secrets from https://console.developers.google.com

執行 create_credential token 時,  Python 3.8 會自動取用系統的 Proxy, 必須關閉才能正確取得 token

</t>
<t tx="leo.20210524201113.1">@language md
---
Title: 可攜程式系統製作
Date: 2021-05-24 11:00
Category: Portable
Tags: 202105
Slug: 2021-kmol-portable-programming-system
Author: yen
---

每隔一段期間, 都要重新根據最新版本製作 Windows 環境的可攜程式系統. 這裡紀錄一下詳細的製作過程.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20210524201409.1">安裝 gcc
----

因為 [msys2] 所下載的 .exe 檔案無法直接解開壓縮, 必須透過安裝才可以取得 [msys2] 的基本系統檔案. 而目前所下載配置的是 20210419 的版本. 根據網路上 [msys2 說明], 基本的 C++ 編譯環境, 可以啟動 mingw64.exe 後, 利用:

&lt;pre class="brush: jscript"&gt;
pacman -Syu

pacman -Sy

pacman -S mingw-w64-x86_64-toolchain
&lt;/pre&gt;

安裝 [msys2] 環境下的 gcc 系統.

可攜啟動批次檔案
----

&lt;pre class="brush: jscript"&gt;
@echo off
set Disk=y
subst %Disk%: "data"

%Disk%:

set HomePath=%Disk%:\home_ipv6
set HomeDrive=%Disk%:\home_ipv6
set Home=%Disk%:\home_ipv6
set USERPROFILE=%Disk%:\home_ipv6

REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"

set PYTHONPATH=%Disk%:\Python395\DLLs;%Disk%:\Python395\Lib;%Disk%:\Python395\Lib\site-packages;
set PYTHONHOME=%Disk%:\Python395

REM for putty
set GIT_SSH=%Disk%:\putty\plink.exe

REM for Java and Android SDK
set java_home=%Disk%:\java\jdk8u222-b10
set ANDROID_SDK_home=%Disk%:\home_ipv6
set GRADLE_USER_home=%Disk%:\home_ipv6
set ANDROID_SDK_ROOT=%Disk%:\android\sdk
set ANDROID_Home=%Disk%:\android\sdk
set REPO_OS_OVERRIDE=windows

REM for Range3
REG IMPORT %Disk%:\range3.reg

REM 設定跟 Python 有關的命令搜尋路徑
set path_python=%Disk%:\Python395;%Disk%:\Python395\Scripts;
REM 設定跟Git 有關的命令搜尋路徑
set path_git=%Disk%:\portable_2.31.1\bin;
REM 設定 msys2 64 位元的執行路徑
set path_msys2=%Disk%:\msys64_20210419\mingw64\bin;
REM set for LaTeX
set path_miketex=%Disk%:\miktex-portable\texmfs\install\miktex\bin\x64;
REM Flutter path
set path_flutter=%Disk%:\flutter\bin;%java_home%\bin;%Disk%:\Android\sdk;%Disk%:\Android\sdk\tools;%Disk%:\Android\sdk\tools\bin;%Disk%:\Android\sdk\emulator;%Disk%:\Android\sdk\platform-tools;%Disk%:\flutter\bin\cache\dart-sdk\bin;%Disk%:\vscode;
set path_node=%Disk%:\node-v14.15.4-win-x64;
set path_tcc=%Disk%:\tmp\tcc\win32;
rem set path_tcc=%Disk%:\tcc;
set path_heroku=%Disk%:\heroku\bin;
set path_postgresql=%Disk%:\postgresql13\bin;
set path_range=%Disk%:\Range3\bin;
set path_lua=%Disk%:\lua-5.4.3\;

REM 加入 PostgreSQL 所需的環境變數設定

@SET PGDATA=%Disk%:\postgresql13\data
@SET PGDATABASE=postgres
@SET PGUSER=postgres
@SET PGPORT=5432
@SET PGLOCALEDIR=%Disk%:\postgresql13\share\locale

REM for heroku login
REM can not use with fossil scm
REM set HTTP_PROXY=http://kmolab:kmolab10@a.kmol.info:3128
REM set HTTPS_PROXY=http://kmolab:kmolab10@a.kmol.info:3128

path=%Disk%:;%path_python%;%path_git%;%path_msys2%;%path_miketex%;%path_flutter%;%path_node%;%path_tcc%;%path_heroku%;%path_postgresql%;%path_range%;%path_lua%;%path%;

start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe

start /MIN %Disk%:\wScite502\SciTE.exe
start /MIN %Disk%:\wScite502\SciTE.exe

Exit
&lt;/pre&gt;

可攜關閉批次檔
----

&lt;pre class="brush: jscript"&gt;
@echo off
set Disk=y
path=%PATH%;

taskkill /IM python.exe /F
taskkill /IM pythonw.exe /F
taskkill /IM adb.exe /F
taskkill /IM scite.exe /F
taskkill /IM range.exe /F

REM 終止虛擬硬碟與目錄的對應
subst %Disk%: /D
REM 關閉 cmd 指令視窗
taskkill /IM cmd.exe /F

EXIT
&lt;/pre&gt;

home_ipv6 目錄
----

為了配合 Windows 尋找隨身程式系統 home_ipv6 目錄下的 Desktop, 因此額外建立此一目錄, 以免 Windows 操作系統跳出警告訊息.

編譯 Lua
----

從 [Lua] 下載原始碼, 解開壓縮後可直接進行編譯:

&lt;pre class="brush: jscript"&gt;
mingw32-make mingw
&lt;/pre&gt;

編譯 SciTE
----

首先必須確認 y:\portable\bin 中 sh.exe 已經改名, 因為 shell 指令將取自 MSYS2 系統中的對應指令.

分別 git clone scite 與 scintilla, 兩個目錄並列.

git clone https://github.com/mirror/scite.git 

git clone https://github.com/mirror/scintilla.git

cd scintilla\win32

mingw32-make

get Scintilla.dll and SciLexer.dll under scintilla\bin

cd scite\win32

mingw32-make

get SciTE.exe under scite\bin

need extra libgcc_s_seh-1.dll, libstdc++-6.dll and libwinpthread-1.dll along with Scintilla.dll and SciLexer.dll to execute SciTE.exe

編譯 Solvespace
----

[Solvespace] 是一套小巧開源的 3D 參數繪圖軟體

編譯 Range3
----

為了 compile Range3, Msys2 除了mingw-w64-x86_64-toolchain 還必須加裝:

pacman -Sy mingw-w64-x86_64-qt5
pacman -Sy mingw-w64-x86_64-qt5-static
pacman -Sy mingw-w64-x86_64-ffmpeg

接著編譯 Range3:

start Y:\msys64\mingw64.exe

cd /y/tmp/range3

./scripts/build.sh --clean &amp;&amp; ./scripts/create_package.sh

而為了讓 svg 格式的 icons 能夠正確顯示, 必須納入 Qt5Svg.dll

安裝 RoboDK
----

[RoboDK] 目前應該是最適合用於工業機械手臂在線與離線模擬的套件.

安裝 CoppeliaSim
----

[CoppeliaSim] 儘管使用授權沒有 [Webots] 寬廣, 但是容量不到 500MB 只有 [Webots] 的 1/5 是其最大的優點.



[CoppeliaSim]: https://www.coppeliarobotics.com/
[Solvespace]: https://github.com/solvespace/solvespace
[RoboDK]: https://robodk.com/
[Lua]: http://www.lua.org/
[msys2]: https://www.msys2.org/
[msys2 說明]: https://michaelchen.tech/windows-programming/mingw-msys/</t>
<t tx="leo.20210531064143.1">@language md
---
Title: 為何需要分散式版次管理系統?
Date: 2021-05-31 12:00
Category: DVCS
Tags: 202105
Slug: 2021-kmol-why-we-need-distributed-version-control-system
Author: yen
---

上過 [KMOLab] 課程的學員應該就知道, 過去幾年由知識管理與最佳化應用實驗室所開列的課程 ,  已經不舉行點狀的考試, 而是透過分散式版次管理系統中的倉儲紀錄與網站內容進行評分.

[KMOLab]: http://mde.tw

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20210531064521.1">學習歷程必須有第三方公證
----

原因很簡單: 各學員歷程的累積帶有時間註記與每次改版的詳細記錄, 從一個倉儲的改版歷程, 可以看出特定學員投入該課程主題的心力, 至於雲端網站內容無遠弗屆, 可以讓任何人從任何地方擷取, 進行學習或引為警惕.

學習歷程的公正性源自第三方的公證, 同一份解題資料出現在同一課程的不同學員倉儲與網頁中, 可以輕易透過電腦程式進行比對, 從建立的時間與內容改版歷程, 判定學習價值的高低. 假如採取點狀的文書報告進行評量, 在缺乏資料創建歷程細節的佐證, 評閱者將會很難分辨內容產生的順序與因果關係.

只有將資料利用雲端分散存放, 才有機會永續
----

分散式版次管理的功能, 不僅在於版次管理, 另外一個目的是將資料分散在不同的雲端主機上, 參與協同的組員每人近端都有一份版本, 而雲端則再同步幾處, 如此可以降低資料在單一主機上丟失的風險.

分散式版次管理應該是使用電腦與網路的基本技能
----

當任何人在 2005 年 Git 與許多能夠免費使用的分散式版次管理系統出現之後, 利用電腦建立第一份文字資料開始, 就應該要使用分散式版次管理來存放歷程資料.



</t>
<t tx="leo.20210531071000.1"></t>
<t tx="leo.20210531071007.1"></t>
<t tx="leo.20210531071030.1"></t>
<t tx="leo.20210531071033.1"></t>
<t tx="leo.20210531083628.1">@language md
---
Title: 挖礦者與 Gitlab Pages
Date: 2021-05-31 11:00
Category: Gitlab
Tags: 202105
Slug: 2021-kmol-crypto-miner-and-gitlab-pages
Author: yen
---

現在 是 2021年 5 月的最後一天, 對於許多現代人來說, 往後的日子, 不會再跟之前相同了.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20210531084219.1">2021 年 5 月 14 日 Gitlab 宣布: 由於 CI/CD 受到加密挖礦者的濫用, 即日起新建帳號, 要免費使用連續整合與部署者, 必須先付上信用卡或簽帳卡號付費進行認證.

這項消息代表由於少數人的絕私行為, 讓原先利用這項免費資源產生 Gitlab Pages 的使用者, 通通遭殃.

幾乎在同一時間, Github 也發出許多禁止特定帳號公開存取 Github Pages 的 Flag, 原因是: 利用學號當作帳號的用戶, 被認定是一人申請多個帳號, 疑似違反使用規定.

這些問題恐怕就此斷送許多原先可以免費使用雲端資源的機會, 往後的教育單位若沒有自行扛起這樣的責任, 網際大美好的日子, 應該就此結束, 不會再回來了.

後記: 利用 Pelican 建立 CMSiMDE 中的 blog, 同時利用 Python 與 Leo Editor 將網誌同步到 Blogger, 過程中必須要確定系統已經安裝所需的模組:

pip install google-api-python-client oauth2client

並且 CMSiMDE 中的 pelican.leo 也要讀取 tmp 目錄上的認證檔案.

並且在 Windows 10 安裝 Python 模組時還必須暫時關閉 Web based Proxy 設定, 整個環節只有一點沒有做到, 資料就無法如預期出現在多個網誌系統中.

</t>
<t tx="leo.20210531091041.1"></t>
<t tx="leo.20210531091052.1"></t>
<t tx="leo.20210531091114.1"></t>
<t tx="leo.20210531091117.1"></t>
<t tx="leo.20210531091132.1"></t>
<t tx="leo.20210531091135.1"></t>
<t tx="leo.20210531091148.1"></t>
<t tx="leo.20210531091150.1"></t>
<t tx="leo.20210607091721.1">@language md
---
Title: Github account flagged 之後
Date: 2021-06-07 11:00
Category: github
Tags: 202106
Slug: 2021-kmol-after-github-account-being-flagged
Author: yen
---

目前[KMOLab] 的所有課程都架構在 [Github] 與 [Gitlab] 的網際雲端服務之上, 幾個禮拜前由於大量用戶透過免費的 CI/CD 服務進行數位貨幣挖礦, 導致許多採取學號連號建立的 Github 帳號莫名被禁用, 而 2021.05.14 之後所建立的 [Gitlab] 帳號也必須提供簽帳卡或信用卡號, 經過認證才能使用 CI/CD 服務.

[KMOLab]: http://mde.tw
[Github]: https://github.com
[Gitlab]: https://gitlab.com

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20210607092640.1">面對這個突如其來的事件, 不僅這些被禁用的帳號倉儲無法公開顯示提交歷程 (有些帳號向 [Github] 反應後已經解禁, 但仍有帳號無法解禁), 必須透過 CI/CD 轉為 Github Pages 或 Gitlab Pages 的服務也無法執行. 因此只能在工作站室中的伺服器設法提供類似的服務補救.

自行架構網際伺服器
----

由於在 2017 年, 曾經利用電腦輔助設計室汰換電腦時所移出的許多舊電腦, 執行過 [gogs] 與 [Fossil SCM] 服務, 這時正好可以利用 [gogs] 展開原先推送到 [Github] 的倉儲提交歷程, 而 [Fossil SCM] 伺服器中的 [Project Documentation] 功能則正好可以用來取代 Github Pages, 讓使用者展示倉儲中各版本的靜態網頁.

理論上很簡單, 只要分別下載 [gogs] 與 [Fossil SCM] 的套件, 然後設法找一台虛擬主機安裝配置即可.
但若希望透過程式方法, 幫這許多用戶設定帳號與密碼, 就必須要建立一組網際程式套件, 讓各學員自行登入系統建立所需的帳號或倉儲.

[gogs] 伺服器原本就提供使用者自行註冊帳號的功能, 因此問題較小, 比較大的問題是: [gogs] 好像只支援 IPv4,  因為時間緊迫, 沒有多花時間在這上面, 只能找了一個 IP, 設定符號名稱, 利用 [Stunnel] 與 [Letsencrypt] 讓 [gogs] 伺服器可以採 https 協定上線, 如此使用者就能自行登錄帳號, 將 [Github] 倉儲的提交歷程在 [gogs] 伺服器中展開.

Fossil SCM 網際登錄 app
----

任務解決了一半, 接下來則希望建立一組網際程式, 採用 Google Oauth2 讓使用者透過學校配發的 @gm 帳號登入, 然後自選管理密碼後, [Fossil SCM] 伺服器就能設法配置好能讓使用者提交推送的 [Github] 倉儲, 展示出 [CMSiMDE] 倉儲中的靜態網頁.

初步建立 fossilapp 的流程請參考: &lt;http://mde.tw/cd2021/content/fossilapp.html&gt;.


[gogs]: https://gogs.io/
[Fossil SCM]: https://www.fossil-scm.org
[Stunnel]: https://www.stunnel.org/
[Letsencrypt]: https://letsencrypt.org/
[CMSiMDE]: https://github.com/mdecourse/cmsimde.git
[Project Documentation]: https://www.fossil-scm.org/home/doc/trunk/www/embeddeddoc.wiki</t>
<t tx="leo.20210607101634.1"></t>
<t tx="leo.20210607101639.1"></t>
<t tx="leo.20210607101653.1"></t>
<t tx="leo.20210607101659.1"></t>
<t tx="yen.20170108171733.1"></t>
<t tx="yen.20170108171733.2">@language python
import os

os.system("pelican markdown -o blog -s local_publishconf.py")
g.es("admin pelican 近端執行完畢")


</t>
<t tx="yen.20170108171733.5"></t>
<t tx="yen.20170108171733.71"></t>
<t tx="yen.20170108171733.81"></t>
<t tx="yen.20170108171733.83">sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt

</t>
<t tx="yen.20170108171930.1">@language python
import os
import subprocess
import threading
import http.server, ssl

def domake():
    # build directory
    os.chdir("./../")
    server_address = ('localhost', 5443)
    httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print(os.getcwd())
    print("5443 https server started")
    httpd.serve_forever()

# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()</t>
<t tx="yen.20170108171939.1">@language python
import os
import subprocess
import threading
import socket
import http.server, ssl

class HTTPServerV6(http.server.HTTPServer):
    address_family = socket.AF_INET6
  
def domake():
    # build directory
    os.chdir("./../")
    ipv6_address = '::1'
    server_address = (ipv6_address, 6443)
    #httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd = HTTPServerV6(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print("6443 https server started")
    httpd.serve_forever()

# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()</t>
<t tx="yen.20170224232341.1"></t>
<t tx="yen.20200512160924.1">@language md
---
Title: 打造 Windows 隨身程式系統
Date: 2020-05-12 11:00
Category: Windows
Tags: Portable_system
Slug: create-portable-win-prog-sys
Author: yen
---

在 Windows 操作系統上開發套件, 不僅希望這個套件能夠在 Mac OS X 與 Linux 上運行, 而且整個程式環境都能放入一個 USB 隨身碟, 在任何一台乾淨的 64 位元 Windows 10 操作系統中都能正常運行. 不受限制, 因此需要打造一個隨身程式系統.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others
</t>
<t tx="yen.20200516092143.1">@language md
---
Title: gitlab 與 github 整合運用
Date: 2020-05-16 11:00
Category: git
Tags: Github Pages
Slug: use-github-and-gitlab-pages
Author: yen
---

由於 [github] 遲遲不推出支援 IPv6 網站的連線功能, 目前若要在電腦輔助設計室直接透過純 IPv6 網路連線使用 git 分散式版次管理系統, 可以將 [Github Pages] 上的 [CMSiMDE] 網站, 同步一份倉儲資料到 [Gitlab Pages].

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others
</t>
<t tx="yen.20200516203207.1">@language md
---
Title: Virtualbox Ubuntu 虛擬主機網路設定
Date: 2020-05-16 12:00
Category: ubuntu
Tags: Virtualbox
Slug: virtualbox-ubuntu-nat-network
Author: yen
---

利用 [Virtualbox] 建立 Ubuntu 20.04 伺服器的虛擬主機, 可以讓使用者透過便捷的網路設定, 了解不同主機連線配置的特性外, 也能同時測試跨操作系統平台套件在 Windows 與 Ubuntu 環境執行的差異.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others
</t>
<t tx="yen.20200517131340.1">try to integrate pelican with blogger
    
需要安裝兩個程式庫
    
    pip install google-api-python-client oauth2client
    
OAuth 2.0 client IDs 程式類別選擇 other
    
使用者完成 client_secrets.json 設定後, 必須將檔案存在倉儲目錄外部


    
</t>
<t tx="yen.20200517131657.1">@language python
'''
可攜程式系統執行前, 必須額外安裝:

pip install google-api-python-client

pip install oauth2client
'''
__author__ = 'mdecourse At gmail.com'

import sys
from oauth2client import client
from googleapiclient import sample_tools

argv = ""
# 認證並建立服務
service, flags = sample_tools.init(
  argv, 'blogger', 'v3', __doc__, "./../../client_secrets.json",
  scope='https://www.googleapis.com/auth/blogger')

try:
    users = service.users()
    # 取得使用者 profile 資料
    user = users.get(userId='self').execute()
    print('網誌名稱: %s' % user['displayName'])
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    # blog id is now blogs["items"][0]["id"]
    for blog in blogs['items']:
        print(blog['name'], blog['url'])
    posts = service.posts()
    # 新增網誌 post 時, 需要 blog id
    '''
    body = {
    "kind": "blogger#post",
    "id": blogs["items"][0]["id"],
    "title": "透過 Python 程式新增網誌文章",
    "content":"使用 Google Blogger API 可以利用程式新增網誌文章內容",
    "labels": "test"
    }
    insert = posts.insert(blogId=blogs["items"][0]["id"], body=body)
    posts_doc = insert.execute()
    print(posts_doc)
    '''
    # 更新網誌文章時的 body
    body = {
    "kind": "blogger#post",
    "title": "透過 Python 程式修改網誌文章",
    "content":'''使用 Google Blogger API 可以利用程式修改網誌文章內容. http://mde.tw/cd2019
    '''
    }
    # need to save postId to outline head
    update = posts.update(blogId=blogs["items"][0]["id"], postId="1234567", body=body, publish=True)
    update_doc = update.execute()
    print(update_doc)
except(client.AccessTokenRefreshError):
    print("error")</t>
<t tx="yen.20200517132439.1"></t>
<t tx="yen.20200517142620.1">當利用 syntaxhighlighter 引用 html 標註時, 必須先使用 CMSiMDE 編輯器將資料轉為 html_entities 格式後, 再導入 pre 標註, 以免產生額外的對應關閉標註符號.</t>
<t tx="yen.20200517194513.1">https://github.com/googleapis/google-api-python-client/blob/master/googleapiclient/sample_tools.py

def init(
    argv, name, version, doc, filename, scope=None, parents=[], discovery_filename=None
):
  Args:
    argv: list of string, the command-line parameters of the application.
    name: string, name of the API.
    version: string, version of the API.
    doc: string, description of the application. Usually set to __doc__.
    file: string, filename of the application. Usually set to __file__.
    parents: list of argparse.ArgumentParser, additional command-line flags.
    scope: string, The OAuth scope used.
    discovery_filename: string, name of local discovery file (JSON). Use when discovery doc not available via URL.</t>
<t tx="yen.20200517195613.1">http://project.mde.tw/blog/yen-pelican-jing-tai-wang-ye-yu-wordpress-de-zheng-he-fang-an.html

other ref
    http://www.easonhsu.idv.tw/2017/01/use-blogger-python-api-to-publish-from.html</t>
<t tx="yen.20200517200253.1"># new-to-wp button
#coding: utf-8
import xmlrpc.client
import datetime
import os
 
def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的 body pan 內容, 第1行為 @language python
    # 用跳行符號分割
    data_list = data.split("\n")
    #第2行為 title
    title= data_list[1]
    #第3行為 category
    category = data_list[2]
    #第4行為 tags
    tags = data_list[3]
    # 有多項資料的 content 型別為數列
    # 再將第7行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[6:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Wordpress 的 &lt;!---more---&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    content = content.replace('~~~python', '[code lang="python"]')
    content = content.replace('~~~', '[/code]')
    return title, category, tags, content
 
os.environ['TZ'] = 'Asia/Taipei'
 
#################################
filepath = "/your/wordpress/username/and/passwrod.txt"
wordpress = "your.wordpress.site.domain"
fo = open(filepath, "r+")
data = []
for line in fo.readlines():
    data.append(line)
fo.close()
 
# 從網誌節點的 parent().h 取得 wp_url
# 從網誌節點的 parent().b 取得帳號與密碼對應的文字檔案路徑
wp_url = "https://"+wordpress+"/xmlrpc.php"
wp_username = data[0]
wp_password = data[1]
#################################
wp_blogid = "0"
 
status_draft = 0
status_published = 1
 
server = xmlrpc.client.ServerProxy(wp_url)
 
# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 指定時間出版
'''
date_created = xmlrpc.client.DateTime(datetime.datetime.strptime("2013-01-01 00:00",
"%Y-%m-%d %H:%M"))
'''
# 以現在時間出版, 考慮與 Server 時間差八個小時 (480 分鐘), 因此要在 8 個小時前發表
date_created = xmlrpc.client.DateTime(datetime.datetime.strptime((datetime.datetime.now()- \
datetime.timedelta(minutes=480)).strftime('%Y-%m-%d %H:%M'),"%Y-%m-%d %H:%M"))
categories = [category_str.split(":")[1]]
# 請注意, 因為 tags 用逗點隔開, 因此必須透過 split() 再分開成為 list 資料
# 先用 : 斷開標投頭的 Tags:, 然後再透過逗點隔開, 將標註轉為數列資料
tags = tags_str.split(":")[1].split(",")
data = {'title': title, 'description': content, 'dateCreated': date_created, 'categories': categories, 'mt_keywords': tags}
 
post_id = server.metaWeblog.newPost(wp_blogid, wp_username, wp_password, data, status_published)
# 利用最後的 child 節點來儲存 post_id
to_save_post_id = p.insertAsLastChild()   
# 改為內文為空的節點, id 直接標在 head 標題 
to_save_post_id.b = ""
to_save_post_id.h = post_id
# 因為新增節點, commander 必須 redraw
c.redraw() 
 
g.es("post_id 為", post_id)
g.es("已經送出資料!")</t>
<t tx="yen.20200517200409.1"># edit-to-wp
#coding: utf-8
import xmlrpc.client
import datetime
import os
 
def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的 body pan 內容, 第1行為 @language python
    # 用跳行符號分割
    data_list = data.split("\n")
    #第2行為 title
    title= data_list[1]
    #第3行為 category
    category = data_list[2]
    #第4行為 tags
    tags = data_list[3]
    # 有多項資料的 content 型別為數列
    # 再將第7行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[6:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Wordpress 的 &lt;!---more---&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    content = content.replace('~~~python', '[code lang="python"]')
    content = content.replace('~~~', '[/code]')
    return title, category, tags, content
 
os.environ['TZ'] = 'Asia/Taipei'
 
#################################
filepath = "/your/wordpress/username/and/passwrod.txt"
wordpress = "your.wordpress.site.domain"
fo = open(filepath, "r+")
data = []
for line in fo.readlines():
    data.append(line)
fo.close()
 
wp_url = "https://"+wordpress+"/xmlrpc.php"
wp_username = data[0]
wp_password = data[1]
#################################
wp_blogid = "0"
 
status_draft = 0
status_published = 1
 
server = xmlrpc.client.ServerProxy(wp_url)
 
# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 指定時間出版
'''
date_created = xmlrpc.client.DateTime(datetime.datetime.strptime("2013-01-01 00:00",
"%Y-%m-%d %H:%M"))
'''
# 以現在時間出版, 考慮與 Server 時間差八個小時 (480 分鐘), 因此要在 8 個小時前發表
date_created = xmlrpc.client.DateTime(datetime.datetime.strptime((datetime.datetime.now()- \
datetime.timedelta(minutes=480)).strftime('%Y-%m-%d %H:%M'),"%Y-%m-%d %H:%M"))
categories = [category_str.split(":")[1]]
# 請注意, 因為 tags 用逗點隔開, 因此必須透過 split() 再分開成為 list 資料
tags = tags_str.split(":")[1].split(",")
data = {'title': title, 'description': content, 'dateCreated': date_created, 'categories': categories, 'mt_keywords': tags}
 
# 設法取得原 post 的 id
origin_post = p.getLastChild()
# 直接從標題取得 post 的 id 號碼
post_id = origin_post.h
status = server.metaWeblog.editPost(post_id, wp_username, wp_password, data, status_published)
 
if status:
    g.es("資料已經更新!")
else:
    g.es("有問題, 資料沒有更新!")</t>
<t tx="yen.20200517200437.1"># get-from-wp
#coding: utf-8
import xmlrpc.client
# 導入 html 模組, 使用 html.unescape 轉換 html 特殊符號
import html
 
#################################
filepath = "/your/wordpress/username/and/passwrod.txt"
wordpress = "your.wordpress.site.domain"
fo = open(filepath, "r+")
data = []
for line in fo.readlines():
    data.append(line)
fo.close()
 
# 從網誌節點的 parent().h 取得 wp_url
# 從網誌節點的 parent().b 取得帳號與密碼對應的文字檔案路徑
wp_url = "https://"+wordpress+"/xmlrpc.php"
wp_username = data[0]
wp_password = data[1]
#################################
 
server = xmlrpc.client.ServerProxy(wp_url)
 
# 設法透過上述網誌網址, 帳號與密碼, 以及文章 id, 取回 categories, tags, 文章標題, 文章內容等資
 
# 從最後的 child 節點來取 post_id
origin_post = p.getLastChild()
post_id = origin_post.h
# 取回與 post_id 對應的網誌文章內容
blog_content = server.metaWeblog.getPost(post_id, wp_username, wp_password)
title = blog_content["title"]
# 這裡要利用 html.unescape 轉回特殊符號
description = html.unescape(blog_content["description"])
mt_text_more = html.unescape(blog_content["mt_text_more"])
if mt_text_more != "":
    post_content = description + "\n&lt;!--more--&gt;\n"+mt_text_more
else:
    post_content = description
# 所取回的 categories 為 list
categories = blog_content["categories"]
# 所取回的 tags 為以逗點隔開的字串
mt_keywords = blog_content["mt_keywords"]
# 取回文章作者
author = blog_content["wp_author_display_name"]
p.h = title
categories_str = ""
for category in categories:
    # 假如不是最後一個
    if category != categories[len(categories)-1]:
        categories_str += category + ", "
    else:
        # 這是最後一個
        categories_str += category
line1 = "@language md\n"
line2 = "Title: " +title + "\n"
line3 = "Category: " + categories_str + "\n"
line4 = "Tags: " + mt_keywords + "\n"
line5 = "Author: " + author + "\n@others\n"
post_content = post_content.replace('&lt;!--more--&gt;', '\n&lt;!-- PELICAN_END_SUMMARY --&gt;\n')
post_content = post_content.replace('[code lang="python"]', '~~~python')
post_content = post_content.replace('[/code]', '~~~')
p.b = line1 + line2 + line3 + line4 + line5 + post_content + "\n"
# 因為節點資料更新, commander 必須 redraw
c.redraw() 
g.es("資料已經取回")</t>
<t tx="yen.20200517233108.1">from markdown import markdown

print(markdown("# Hello World"))
# &lt;h1&gt;Hello World&lt;/h1&gt;</t>
<t tx="yen.20200517233837.1">這裡可以針對不同的網誌 credential 將同一份資料推向不同的 Blogger 網誌</t>
<t tx="yen.20200518055330.1">@language python
from markdown import markdown
from oauth2client import client
#from googleapiclient import sample_tools
import os
# 配合使用 credential token
import pickle
from googleapiclient.discovery import build
#from google_auth_oauthlib.flow import InstalledAppFlow
#from google.auth.transport.requests import Request

os.environ['TZ'] = 'Asia/Taipei'
with open('./../../yen_gm_blogger_token.dat', 'rb') as credentials_dat:
    credentials = pickle.load(credentials_dat)
service = build('blogger', 'v3', credentials=credentials)

def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &lt;h2&gt; 標題
content = content.replace("&lt;h2&gt;", "&lt;h2&gt;&lt;font size='4'&gt;")
content = content.replace("&lt;/h2&gt;", "&lt;/font&gt;&lt;/h2&gt;")
# g.es(content)

try:
    '''
    users = service.users()
    # 取得使用者 profile 資料
    user = users.get(userId='self').execute()
    print('網誌名稱: %s' % user['displayName'])
    '''
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    # post_id is now blogs["items"][0]["id"]
    #blog_id = blogs["items"][0]["id"]
    blog_id = "2403495118140401474"
    #for blog in blogs['items']:
        #print(blog['name'], blog['url'])
    posts = service.posts()
    # 新增網誌 post 時, 需要 post_id
    body = {
    "kind": "blogger#post",
    "id": blog_id,
    "title": title,
    # 利用 markdown 函式, 將 .md 的內文轉為 html, 作為 Blogger 的文章內容
    "content": content,
    "labels": tags
    }
    insert = posts.insert(blogId=blog_id, body=body)
    posts_doc = insert.execute()
    post_id = posts_doc["id"]
    #print(posts_doc)
    # 改用 credential token 後不會產生 blogger.dat
    #os.remove("blogger.dat")
    # 利用最後的 child 節點來儲存 post_id
    to_save_post_id = p.insertAsLastChild()   
    # 改為內文為空的節點, id 直接標在 head 標題 
    to_save_post_id.b = ""
    to_save_post_id.h = post_id
    # 因為新增節點, commander 必須 redraw
    c.redraw()
    g.es("post_id 為", post_id)
    g.es("已經將資料送往 KBlogger!")
except(client.AccessTokenRefreshError):
    g.es("error")

</t>
<t tx="yen.20200518070950.1">@language md
---
Title: CMSiMDE 部署
Date: 2020-05-09 11:00
Category: Github
Tags: Deployment
Slug: 2020-lab-get-started
Author: yen
---

[CMSiMDE] 所能伺服的內容包含網站, 網誌與簡報, 而網站又分為動態系統與靜態系統, 動態網站建置主要的目的在方便進行 html 文件的編輯, 而靜態網站系統則主要為了能在一般的 WWW 伺服器上進行部署. 

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others
</t>
<t tx="yen.20200518071032.1">@language md
---
Title: 倉儲資料維護與管理
Date: 2020-05-11 11:00
Category: Github
Tags: CMSiMDE
Slug: manage-your-cmsimde-site
Author: yen
---

[cd2020] 是 2020 春季協同產品設計實習的課程網站, 而 [cd2020pj1] 則是與協同設計課程相關的程式專案, 兩者都採用 [CMSiMDE] 建立網站. 其中 [cd2020] 是典型的動態與網站架構, 而 [cd2020pj1] 則除了網站還包含 Flask 協同產品設計程式的開發.

[cd2020]: http://mde.tw/cd2020
[cd2020pj1]: http://mde.tw/cd2020pj1
[CMSiMDE]: https://github.com/mdecourse/cmsimde

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others

</t>
<t tx="yen.20200518101418.1">網站
----

[CMSiMDE] 的網站編輯採用 Flask 框架編寫, 目前所需要的模組包含 flask, flask_cors, lxml, bs4 與 markdown. 使用者可以選擇將 [CMSiMDE] 當作 submodule 或者單獨部署在倉儲內容中的 cmsimde 目錄後, 再將 cmsimde 目錄中的 up_dir 目錄內容複製到倉儲主目錄即可.

[CMSiMDE] 倉儲資料包含引擎內容 (也就是 cmsimde 中的資料) 與使用者內容 (也就是 up_dir 中的資料) 等兩類, 許多的網際功能都是配合歷年上課時敲敲打打修改而成, 因此整體架構相當鬆散, 就所謂的網際內容管理功能而言, 只能算勉強堪用, 還有很大的修改空間.

[CMSiMDE]: https://github.com/mdecourse/cmsimde

網誌
----

[CMSiMDE] 的網誌系統採用 [Pelican], 編輯網誌的架構採用 [Leo Editor] 管理, 而網誌專案檔位於 config 目錄中的 pelican.leo.

[Leo Editor] 其實是一套值得大力推廣的整合開發系統與文件編輯器, 但可能因為曲高因此和寡, 真正能夠運用上手的全球用戶, 數量始終偏低. 但是其大綱編輯模式非常適合處理複雜的工程設計流程所產生的各種文字資料, 因此非常希望 Python 新手能夠以看懂 [Leo Editor] 的設計架構與處理問題的細節作為遠大的目標.

[Pelican]: https://github.com/getpelican/pelican
[Leo Editor]: https://github.com/leo-editor/leo-editor

簡報
----

[CMSiMDE] 的網誌簡報採用 [reveal.js]. 而簡報的編輯檔案也是採用 [Leo Editor], 簡報專案位於 config 目錄中的 reveal.leo.

[reveal.js]: https://github.com/hakimel/reveal.js/

網站建構流程
----

[CMSiMDE] 的網站建構流程, 可以從建立初始的 [Github] 倉儲開始. 亦即在 [Github] 建立一個僅含 README.md 檔案的倉儲, 然後 git clone 該倉儲到近端後, 以命令列進入該倉儲後再以 

&lt;pre class="brush: jscript"&gt;
git submodule add https://github.com/mdecourse/cmsimde.git cmsimde
&lt;/pre&gt;

將 [CMSiMDE] 倉儲內容納為子模組, 且命名為 cmsimde 目錄. 接下來將 cmsimde 目錄中, 名稱為 up_dir 的目錄內容, 複製到倉儲的根目錄中. 若近端隨身系統或操作系統已經安裝 Python3 與相應的 flask, flask_cors, lxml, bs4, markdown 等模組後, 就可以在命令列中, 進入 cmsimde 子目錄, 以:

&lt;pre class="brush: jscript"&gt;
python wsgi.py
&lt;/pre&gt;

 假如是在 OS X 或 Linux 操作系統, 則必須使用 Python 3 指令:
 
 &lt;pre class="brush: jscript"&gt;
python3 wsgi.py
&lt;/pre&gt;

在近端啟動動態網站, 以瀏覽器 https://localhost:9443 開啟.

[Github]: https://github.com

網站內容管理
----

[CMSiMDE] 的動態網際內容管理, 將所有網頁內容存入 config 目錄中的 content.htm 檔案, 而在每一次使用者儲存新檔案之前,  會將舊版的 content.htm 複製至 content_backup.htm, 之所以如此是因為 [CMSiMDE] 採用 [bs4], 對 config/content.htm 內容進行分頁, 而分頁是依據 content.htm 由上到下的 h1, h2 與 h3 標註內容而定. 並在將動態網站內容 content.htm 以動態編輯器中的 generate pages 功能 (使用 [lxml] 模組功能) 轉為 content 目錄中的各分頁內容時, 可能因分頁失敗而讓整個 content.htm 內容丟失 (這就是非常需要改進的地方之一), 所以才設計 content_backup.htm 的複製進行及時補救.

[bs4]: https://pypi.org/project/beautifulsoup4/
[lxml]: https://pypi.org/project/lxml/
[Github Pages]: https://pages.github.com/

另外, 在 [CMSiMDE] 將操作系統不允許作為檔案名稱的特殊符號自動移除之前 (例如 ":" 號), 使用者應該避免在 h1, h2 與 h3 等標題中使用特殊符號.

Github Pages
----

將 [CMSiMDE] 的動態系統轉為靜態後, 所有靜態頁面的內容存入 content 目錄, 使用者可以將此目錄內容部署到 [Github Pages] 上, 或其他能夠伺服 WWW html 檔案的系統即可完成網站的建立.

但是一般為了方便, 通常將包含動態系統與靜態網站內容的整個倉儲資料, 直接交由 [Github] 管理.  只要將倉儲的 master 分支設為 [Github Pages] 的根目錄, 就可以交由 [Github Pages], 由倉儲主分支倉儲中的 index.html 進行網站導引.

假如使用者將近端的動態網頁內容轉為靜態後, 希望在近端檢視靜態網站內容, 可以在近端倉儲根目錄利用:

&lt;pre class="brush: jscript"&gt;
python http-server.py
&lt;/pre&gt;

或在 OS X 及 Linux 操作系統中以:

&lt;pre class="brush: jscript"&gt;
python3 http-server.py
&lt;/pre&gt;

啟動 https://localhost:8444 近端的靜態網頁伺服系統.

Ubuntu 20.04 自架主機
----

上述利用 [Github Pages] 伺服 [CMSiMDE] 靜態網頁內容的配置流程非常簡單, 但若是要將 [CMSiMDE] 靜態網頁與動態網站系統部署在自架的 Ubuntu 20.04 主機, 則操作系統除了要安裝前述的 python3, flask, flask_cors, bs4, lxml, markdown 之外, 還需要運用 [nginx], [uwsgi], [openssl] 進行配置.

[nginx]: https://nginx.org/en/
[uwsgi]: https://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html
[openssl]: https://www.openssl.org/

其中, [openssl] 用來建立網站認證用的 key 與 certificate, [nginx] 負責建立 WWW 伺服, 而 [uwsgi] 則負責用來開機執行 [CMSiMDE] 中的 wsgi.py 伺服程式.

利用 [openssl] 建立 cmsimde.key 與 cmsimde.crt 的指令如下:

&lt;pre class="brush: jscript"&gt;
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout cmsimde.key -out cmsimde.crt
&lt;/pre&gt;

與 [uwsgi] 有關的 Ubuntu 系統安裝則包括:

&lt;pre class="brush: jscript"&gt;
// 安裝 pip3
sudo apt install python3-pip
// 安裝 python 編譯開發系統
sudo apt install build-essential python3-dev
// 安裝 uwsgi 模組
sudo pip3 install uwsgi
// 安裝 nginx 伺服套件與 uwsgi python3 plugin 程式庫
sudo apt install nginx uwsgi-plugin-python3
&lt;/pre&gt;

/etc/nginx/sites-available/default

&lt;pre class="brush: jscript"&gt;
# for lab.mde.tw static site, use nginx to serve
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	root /home/user_account/labmdetw;
	index index.html index.htm;
	server_name _;
	
	location /static {
            alias /home/user_account/labmdetw/cmsimde/static/;
        }
        location /downloads {
            alias /home/user_account/labmdetw/downloads/;
        }

        location /images {
            alias /home/user_account/labmdetw/images/;
        }

        location /blog {
            alias /home/user_account/labmdetw/blog/;
        }

        location /reveal {
            alias /home/user_account/labmdetw/reveal/;
        }

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

}

# https://lab.mde.tw use nginx to serve
server {
    listen 443 ssl;
    listen [::]:443 ssl;
	root /home/user_account/labmdetw;
	index index.html index.htm;
	server_name _;
	
	location /static {
            alias /home/user_account/labmdetw/cmsimde/static/;
        }
        location /downloads {
            alias /home/user_account/labmdetw/downloads/;
        }

        location /images {
            alias /home/user_account/labmdetw/images/;
        }

        location /blog {
            alias /home/user_account/labmdetw/blog/;
        }

        location /reveal {
            alias /home/user_account/labmdetw/reveal/;
        }
 
    location / {
	# First attempt to serve request as file, then
	# as directory, then fall back to displaying a 404.
	try_files $uri $uri/ =404;
    }

    ssl_certificate /etc/nginx/nginx.crt;
    ssl_certificate_key /etc/nginx/nginx.key;
    ssl_session_timeout 5m;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
    ssl_prefer_server_ciphers on;
    try_files $uri $uri/ =404;
}

# dynamic https://lab.mde.tw:7443 use nginx for ssl and uwsgi for wsgi serving
server {
 
    listen 7443 ssl;
    listen [::]:7443 ssl;
 
    location /static {
        alias /home/user_account/labmdetw/cmsimde/static/;
    }
 
    location / {
        include uwsgi_params;
        uwsgi_pass  127.0.0.1:9443;
    }
 
    ssl_certificate /etc/nginx/nginx.crt;
    ssl_certificate_key /etc/nginx/nginx.key;
    ssl_session_timeout 5m;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
    ssl_prefer_server_ciphers on;
    try_files $uri $uri/ =404;
}
&lt;/pre&gt;

 uwsgi_ini/uwsgi.ini
 
&lt;pre class="brush:js;auto-links:false"&gt;
[uwsgi]
socket = 127.0.0.1:9443
uid = user_account
gid = user_account
plugins-dir = /usr/lib/uwsgi/plugins/
plugin = python3
master = true
process = 4
threads = 2
chdir = /home/user_account/labmdetw/cmsimde
wsgi-file = /home/user_account/labmdetw/cmsimde/wsgi.py
&lt;/pre&gt;

啟動 uwsgi 指令, 將會逐一啟動 wsgi_ini 目錄中個別 .ini 檔案:

&lt;pre class="brush: jscript"&gt;
sudo /usr/bin/uwsgi --emperor /home/user_account/wsgi_ini
&lt;/pre&gt;

最後則設定 Ubuntu 系統服務, 用來啟動 uwsgi:

/etc/systemd/system 的 cmsimde.service 服務啟動檔案內容:

&lt;pre class="brush: jscript"&gt;
[Unit]
Description=uWSGI to serve CMSiMDE
After=network.target
  
[Service]
User=user_account
Group=user_account
WorkingDirectory=/home/user_account/uwsgi_ini
ExecStart=/usr/local/bin/uwsgi --emperor /home/user_account/uwsgi_ini
  
[Install]
WantedBy=multi-user.target
&lt;/pre&gt;

接著將 cmsimde 服務設為隨系統開機啟動:

sudo systemctl enable cmsimde

若要取消 cmsimde 服務隨系統開機啟動:

sudo systemctl disable cmsimde

手動啟動 cmsimde.service 服務

sudo systemctl start cmsimde

手動停止 cmsimde.service 服務

sudo systemctl stop cmsimde</t>
<t tx="yen.20200518105911.1">當要從遠端 git clone [cd2020] 倉儲時, 牽涉到系統使用何種協定連線, https 或 ssh?

因為不同的連線協定有不同的設定檔案, 而且預計連線的主機並不一定就能提供服務, 因此能否順利完成 git clone 牽涉許多細節. 而這些細節並非一成不變, 而必須按照邏輯順序, 一一查驗才能得到期望中的結果.

首先, 因為 [cd2020] 網站的倉儲位於 https://github.com/mdecourse/cd2020.git, 其中帶有 cmsimde 子模組, 因此若要將此倉儲從遠端 git clone 到近端作為工作目錄, 最好的方式就是透過 --recurse-submodules 參數, 將子模組一起 clone 到近端.

&lt;pre class="brush: jscript"&gt;
git clone --recurse-submodules https://github.com/mdecourse/cd2020.git
&lt;/pre&gt;

由於 KMOLab 的課程鼓勵學員在 Windows 10 操作系統中, 使用隨身程式系統, 而不要被微軟綁定, 因為使用者必須了解所開發的程式必須能在 Mac OS X 與許多 Linux 操作系統執行, Windows 10 不應該是工程師唯一的操作系統.

因此, 從隨身系統中的 start.bat 啟動後, Windows 10 就只是機械設計工程師的暫時宿主, 隨時都要準備離開, 所以啟動後必須注意所處的網路連線環境, 假如是在 IPv4 網路環境, 可以直接對 github.com 連線, 但是身處純 IPv6 網路環境中, 目前仍必須透過支援 IPv4 與 IPv6 的網路代理主機, 才能利用 git 或 ssh 對 github.com 連線.

以 https 對 github.com 連線, 代理主機的設定是透過:

&lt;pre class="brush: jscript"&gt;
git config --global http.proxy=http://[2001::_your_ipv6_proxy]:3128
&lt;/pre&gt;

假如採 ssh 對 github.com 連線, 則代理主機的設定必須檢查 putty.exe 中 github.com session 中 Connections - Proxy 的代理主機設定.

一旦完成 [cd2020] 網站倉儲的 git clone, 使用者就可以使用隨身系統中的命令列視窗, 進入 [cd2020] 倉儲中的 cmsimde 目錄, 以:

&lt;pre class="brush: jscript"&gt;
python wsgi.py
&lt;/pre&gt;

開啟動態網站系統, 並利用瀏覽器連線到 https://localhost:9443 進行動態網站內容的維護, 完成後再利用 generate pages 按鈕將動態網站中的 config/content.htm 轉為 content 目錄中的靜態網頁, 之後再新增, 提交, 推送到遠端, 以完成倉儲改版的流程.</t>
<t tx="yen.20200518105955.1">啟動批次檔案
----

從以下這個 start.bat 批次啟動檔案, 大致可以看出此一可攜程式系統所包含的內容:

&lt;pre class="brush: jscript"&gt;
@echo off
set Disk=y
subst %Disk%: "data"

%Disk%:

set HomePath=%Disk%:\home_no_proxy
set HomeDrive=%Disk%:\home_no_proxy
set Home=%Disk%:\home_no_proxy
set USERPROFILE=%Disk%:\home_no_proxy

REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"

set PYTHONPATH=%Disk%:\Python38\DLLs;%Disk%:\Python38\Lib;%Disk%:\Python38\Lib\site-packages;
set PYTHONHOME=%Disk%:\Python38

REM for Java and Android SDK
set java_home=%Disk%:\java\jdk8u222-b10
set ANDROID_SDK_home=%Disk%:\home_no_proxy
set GRADLE_USER_home=%Disk%:\home_no_proxy
set ANDROID_SDK_ROOT=%Disk%:\android\sdk
set ANDROID_Home=%Disk%:\android\sdk
set REPO_OS_OVERRIDE=windows

REM 設定跟 Python 有關的命令搜尋路徑
set path_python=%Disk%:\Python38;%Disk%:\Python38\Scripts;
REM 設定跟Git 有關的命令搜尋路徑
set path_git=%Disk%:\portablegit\bin;
REM 設定 msys2 64 位元的執行路徑
set path_msys2=%Disk%:\msys64\mingw64\bin;
REM set for LaTeX
set path_miketex=%Disk%:\miktex-portable\texmfs\install\miktex\bin\x64;
REM Flutter path
set path_flutter=%Disk%:\flutter\bin;%java_home%\bin;%Disk%:\Android\sdk;%Disk%:\Android\sdk\tools;%Disk%:\Android\sdk\tools\bin;%Disk%:\Android\sdk\emulator;%Disk%:\Android\sdk\platform-tools;%Disk%:\flutter\bin\cache\dart-sdk\bin;%Disk%:\vscode;

path=%Disk%:;%path_python%;%path_git%;%path_msys2%;%path_miketex%;%path_flutter%;%path%;

start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe

start /MIN %Disk%:\wScite\SciTE.exe
start /MIN %Disk%:\wScite\SciTE.exe

Exit
&lt;/pre&gt;

關閉隨身系統的批次檔案 stop.bat, 只將 python, scite 與 dos 命令列關閉, 若需要關閉其他可能開啟的套件, 可以自行加入:

&lt;pre class="brush: jscript"&gt;
@echo off
set Disk=y
path=%PATH%;

taskkill /IM python.exe /F
taskkill /IM pythonw.exe /F

taskkill /IM scite.exe /F

REM 終止虛擬硬碟與目錄的對應
subst %Disk%: /D
REM 關閉 cmd 指令視窗
taskkill /IM cmd.exe /F

EXIT
&lt;/pre&gt;

此一隨身系統安裝配置以 [MSYS2] 與 [Flutter] 較具挑戰性.

[MSYS2]: https://www.msys2.org/
[Flutter]: https://flutter.dev/

[MSYS2]
----

首先與 [MSYS2] 的代理主機設定位於 Y:\msys64\etc\wgetrc. 接下來為了可以編譯 C++ 程式, 必須安裝

&lt;pre class="brush: jscript"&gt;
pacman -S mingw-w64-x86_64-gcc
&lt;/pre&gt;

與

&lt;pre class="brush: jscript"&gt;
pacman -S mingw-w64-x86_64-toolchain
&lt;/pre&gt;

而列出 [MSYS2] 中所安裝的模組:

&lt;pre class="brush: jscript"&gt;
pacman -Q
&lt;/pre&gt;

為了編譯 [Range3], 必須額外安裝:

&lt;pre class="brush: jscript"&gt;
pacman -S mingw-w64-x86_64-ffmpeg

pacman -S mingw-w64-x86_64-qt5

pacman -S mingw-w64-x86_64-qt5-static
&lt;/pre&gt;

編譯 Range3
----

git clone https://github.com/Range-Software/range3.git

start Y:\msys64\mingw64.exe

cd \y\tmp\fem_ex\range3

./scripts/build.sh --clean &amp;&amp; ./scripts/create_package.sh

而為了讓 svg 格式的 icons 能夠正確顯示, 必須納入 Qt5Svg.dll

Flutter
----

至於現階段 [Flutter] 的安裝配置問題源自 [Android] sdk 的最新版 tools 與最新版的 [Flutter] 並不相容. 具體原因是: 目前的 [Flutter] 必須使用舊版的 [Android] sdk 中的舊版 tools.

[Android]: https://developer.android.com/studio

使用者若從 [Android] 官方網站下載 tools 工具, 試圖與 [Flutter] 配合, 將會在執行:

&lt;pre class="brush: jscript"&gt;
flutter doctor
&lt;/pre&gt; 

時將出現 Android sdk licenses 尚未完成.  但是若再以:

&lt;pre class="brush: jscript"&gt;
flutter doctor --android-licenses
&lt;/pre&gt; 

就會出現 Java setting 錯誤.

解決方案
----

處理上述 [Flutter] 與最新版 [Android] 無法相容的問題, 必須借助:

&lt;pre class="brush: jscript"&gt;
sdkmanager --sdk_root=y:\android\sdk tools
&lt;/pre&gt;

安裝舊版的 [Android] sdk tools, 問題是 sdkmanager 工具就位於 tools 目錄中, 因此必須先將新版的 tools 目錄改名為 tools_new, 並配合將 tools_new/bin 設為 start.bat 中的 PATH, 可攜系統啟動後, 以:

&lt;pre class="brush: jscript"&gt;
sdkmanager --sdk_root=y:\android\sdk tools
&lt;/pre&gt;

安裝舊版的 [Android] sdk tools 後, 再將 PATH 路徑改為舊版 tools/bin.

之後再以

&lt;pre class="brush: jscript"&gt;
flutter doctor --android-licenses
&lt;/pre&gt; 

同意使用授權後, 就可以接續進行 Flutter 套件的開發.</t>
<t tx="yen.20200518110043.1">機械設計工程師的網站
----

身為使用分散式版次管理系統的機械設計工程師團隊, 除了自行建立的 Linux 伺服器主機之外, [Github Pages] 是目前用來建立靜態網頁的最佳平台. 但是截至目前只支援 IPv4 網路協定連線的 [github], 在上課時僅支援 IPv6 上線的情況下, 造成了許多不便. 因為所有的資料封包都必須透過雙支援的代理主機傳訊.

[github]: https://github.com
[gitlab]: https://gitlab.com
[Github Pages]: https://pages.github.com/
[Gitlab Pages]: https://docs.gitlab.com/ee/user/project/pages/
[CMSiMDE]: https://github.com/mdecourse/cmsimde.git

為了讓使用者可以在純 IPv6 環境下, 將 [CMSiMDE] 的靜態網頁部署在廣域雲端平台上, 準備將倉儲資料同步一份到 [Gitlab Pages].

開放作風的 gitlab
----

[github] 雖然比 [gitlab] 早創立幾年, 但是 [gitlab] 的開源與大器作風, 讓帳面價值達到 76 億美元的 [github] 失色許多.

[Github Pages] 將用戶設定的靜態網頁資料分支, 以直覺但隱藏流程的方式進行, 導致許多情況下, 用戶無法就網頁資料轉檔流程進行除錯.

gitlab-ci.yml
----

而 [Gitlab Pages] 則選擇讓使用自行透過 gitlab-ci.yml 的 YAML 檔案, 自行控制網頁的轉檔流程.

以 [CMSiMDE] 網際內容管理中的靜態網頁而言, 只要在倉儲資料根目錄中, 加入一個 gitlab-ci.yml 檔案, 內容如下:

&lt;pre class="brush: jscript"&gt;
pages:
  stage: deploy
  script:
  - mkdir .public
  - cp -r * .public
  - mv .public public
  artifacts:
    paths:
    - public
  only:
  - master
variables:
  GIT_SUBMODULE_STRATEGY: recursive
&lt;/pre&gt;

就可以順利將倉儲資料中的主分支靜態網頁, 部署在 https://帳號.gitlab.io/倉儲名稱 網址中. 其中最重要的設定參數:

&lt;pre class="brush: jscript"&gt;
GIT_SUBMODULE_STRATEGY: recursive
&lt;/pre&gt;

就是表明要求 [gitlab] 在將倉儲轉為網頁的過程, 同時以 recursive 的方式將其中的 submodule 目錄, 也納入網頁的內容.

git remote add
----

針對目前已經部署在 [github] 的靜態網頁倉儲, 使用者先在主分支的根目錄中, 新增提交推送一個上述的 gitlab-ci.yml 設定檔案, 然後建立與 [github] 帳號對應的 [gitlab] 帳號之後, 新增一個與 [github] 倉儲的同名空專案, 也就是連 README.md 都不建立的 public 空倉儲, 然後在近端倉儲主分支工作目錄中, 以:

&lt;pre class="brush: jscript"&gt;
git remote add gitlab https://gitlab.com/帳號/同名倉儲.git
&lt;/pre&gt;

新增一個網址代號 gitlab, 指到上述 [gitlab] 系統中的空同名倉儲網址.

接下來就可以透過:

&lt;pre class="brush: jscript"&gt;
git push gitlab
&lt;/pre&gt;

將 [github] 倉儲中的主分支資料, 同步一份到 [gitlab], 並且在 gitlab-ci.yml 的設定導引下, 自動產生相應的 [Gitlab Pages] 靜態網頁. 而其網址就是: https://帳號.gitlab.io/倉儲名稱

最後, 假如之後的倉儲改版以 [gitlab] 為主, 只要在近端主分支的工作目錄中, 以:

&lt;pre class="brush: jscript"&gt;
git remote add github https://github.com/帳號/同名倉儲.git
&lt;/pre&gt;

建立一個 github 代號倉儲連結, 就可以透過:

&lt;pre class="brush: jscript"&gt;
git push github
&lt;/pre&gt;

將 [github] 當作 [gitlab] 倉儲的備份網站.</t>
<t tx="yen.20200518110131.1">修課學員只要登入 ＠gm 帳號後, 就可下載 [Ubuntu 20.04 虛擬主機] (或下載 [Ubuntu 20.04 W12 虛擬主機]), 並匯入 Windows 10 環境所安裝的 [Virtualbox].

接下來就必須了解如何使用虛擬主機的 NAT Network 網路設定.

讓虛擬主機連上廣域網路
----

能直接讓 [Virtualbox] 虛擬主機連上網路的設定, 可以選擇 NAT, NAT Network 與 Bridged 等三種設定. 詳細的說明可以參考 [Virtualbox Network Setting], [Virtualbox 5.1.22 User Manual], [Virtualbox 6.1.8 User Manual] 中的說明.

假如需要利用 Python 程式透過 COM 操控 [Virtualbox] 中的虛擬主機, 則可以參考 [Virtualbox 5.1.22 Programming Guide] 與 [Virtualbox 6.1.8 Programming Guide] 中的說明.

在目前的網際內容管理與協同產品設計課程應用上, 以 NAT Network 的設置最合需求. 因為 Ubuntu 20.04 虛擬主機可以透過 Windows 10 Host 的 IPv4 或 IPv6 網路設定連外. 同時 Ｗindows 10 上的瀏覽器與 Python 程式可以透過內部網路對虛擬主機連線.

使用 NAT Network 讓虛擬主機上網的另外一個好處是: Host 上 [Virtualbox] 的網路設定可以動態生效, 亦即 Ubuntu 20.04 可以一直保持在開機狀態, 使用者在 Host 端更動 [Virtualbox] 的 NAT Network 設定後, 即刻可以在 Ubuntu 虛擬主機上進行配合調適, 無需如 Bridged 或 Host Only 虛擬主機的網路設定, 必須關機後才能修改所使用的網路設定.

NAT Network 上的 IPv4 與 IPv6 設定
----

由於在電腦輔助設計室使用純 IPv6 協定上網, 因此採用 NAT Network 設定的 [Virtualbox] 虛擬主機, 也必須能夠透過 IPv6 進行設定.

NAT Network 的 DHCP 能同時支援 IPv4 與 IPv6, 但是在 GUI 介面只列出 IPv4 的 DHCP 內定使用 10.0.2.0/24 IP 位址, IPv6 的部分則需要透過指令才可列出:

&lt;pre class="brush: jscript"&gt;
C:\Users\kmol2019&gt;"C:\Program Files\Oracle\VirtualBox\VBoxManage" list natnetworks
NetworkName:    NatNetwork
IP:             10.0.2.1
Network:        10.0.2.0/24
IPv6 Enabled:   Yes
IPv6 Prefix:    fd17:625c:f037:2::/64
DHCP Enabled:   Yes
Enabled:        Yes
loopback mappings (ipv4)
        127.0.0.1=2
&lt;/pre&gt;

換言之, 在 [Virtualbox] 採用 NAT Network 設定的虛擬主機, 其 IPv4 gateway 預設為 10.0.2.1, 而 IPv6 的 gateway 則為 fd17:625c:f037:2::1, 了解此一訊息之後, 使用者就可以利用 Ｗindows 10 中的批次檔案 setnatnetwork.bat 來設定後續的網路內容, 主要讓 [cd2020pj1] 啟動後的 8443 與 7443 埠號伺服器, 能夠從 Host 瀏覽器中連線:

[cd2020pj1]: https://github.com/mdecourse/cd2020pj1.git

&lt;pre class="brush: jscript"&gt;
"C:\Program Files\Oracle\VirtualBox\VBoxManage" natnetwork modify --netname NatNetwork --port-forward-4 "ssh:tcp:[127.0.0.1]:22:[10.0.2.4]:22"

"C:\Program Files\Oracle\VirtualBox\VBoxManage" natnetwork modify --netname NatNetwork --port-forward-4 "coppeliasim:tcp:[127.0.0.1]:19999:[10.0.2.4]:19999"

"C:\Program Files\Oracle\VirtualBox\VBoxManage" natnetwork modify --netname NatNetwork --port-forward-4 "cmsimde1:tcp:[127.0.0.1]:8443:[10.0.2.4]:8443"

"C:\Program Files\Oracle\VirtualBox\VBoxManage" natnetwork modify --netname NatNetwork --port-forward-4 "cmsimde2:tcp:[127.0.0.1]:7443:[10.0.2.4]:7443"

"C:\Program Files\Oracle\VirtualBox\VBoxManage" natnetwork modify --netname NatNetwork --port-forward-6 "ssh:tcp:[::1]:22:[fd17:625c:f037:2:a00:27ff:fef6:9b8a]:22"

"C:\Program Files\Oracle\VirtualBox\VBoxManage" natnetwork modify --netname NatNetwork --port-forward-6 "cmsimde1:tcp:[::1]:8443:[fd17:625c:f037:2:a00:27ff:fef6:9b8a]:8443"

"C:\Program Files\Oracle\VirtualBox\VBoxManage" natnetwork modify --netname NatNetwork --port-forward-6 "cmsimde2:tcp:[::1]:7443:[fd17:625c:f037:2:a00:27ff:fef6:9b8a]:7443"
&lt;/pre&gt;

其中 Ubuntu 20.04 虛擬主機的 netplan 網路設定為:

&lt;pre class="brush: jscript"&gt;
network:
    ethernets:
        enp0s3:
            dhcp4: true 
            dhcp6: true 
            nameservers:
                addresses:
                     - 2001:b000:168::1
    version: 2
&lt;/pre&gt;

表示兩種網路協定都採用 DHCP, 但是 IPv6 必須設定 DNS 伺服器, 因為學校 DHCP6 所設定的 DNS 無法正確運作的緣故.

[Ubuntu 20.04 虛擬主機]: https://drive.google.com/open?id=1Ff-mPk9kww_04RxkkiS0lb_2Y9z8Ek1Z

[Ubuntu 20.04 W12 虛擬主機]: https://drive.google.com/open?id=13Gqwyj0CGR6wa9dZg_BmlCLv5cNYWQJ_

[Virtualbox]: https://www.virtualbox.org/

[Virtualbox Network Setting]: https://drive.google.com/open?id=1U8hVabo24eBrkuau5Ev0Za8XC9k_Bzux

[Virtualbox 5.1.22 User Manual]: https://drive.google.com/open?id=1xRxWmYOw4tQuRAFecsAEOlqu62xPUvMc

[Virtualbox 5.1.22 Programming Guide]: https://drive.google.com/open?id=1DsVpKWUoDHO-AWnuFxafQ-kYR53_kCT6

[Virtualbox 6.1.8 User Manual]: https://drive.google.com/open?id=1MX1XT1hlOWYVIZ8bKbtlrTAWBCgRRnSL

[Virtualbox 6.1.8 Programming Guide]: https://drive.google.com/open?id=1jTmj2oWSO8aCpF6DW1rIAYz3iqYQtjPp

[Virtualbox download]: https://download.virtualbox.org/virtualbox/
</t>
<t tx="yen.20200518110700.1">@language python
from markdown import markdown
from oauth2client import client
#from googleapiclient import sample_tools
import os
# 配合使用 credential token
import pickle
from googleapiclient.discovery import build
#from google_auth_oauthlib.flow import InstalledAppFlow
#from google.auth.transport.requests import Request

os.environ['TZ'] = 'Asia/Taipei'
with open('./../../yen_gm_blogger_token.dat', 'rb') as credentials_dat:
    credentials = pickle.load(credentials_dat)
service = build('blogger', 'v3', credentials=credentials)

def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &lt;h2&gt; 標題
content = content.replace("&lt;h2&gt;", "&lt;h2&gt;&lt;font size='4'&gt;")
content = content.replace("&lt;/h2&gt;", "&lt;/font&gt;&lt;/h2&gt;")
# g.es(content)

try:
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    #blog_id = blogs["items"][0]["id"]
    blog_id = "2403495118140401474"
    # 設法取得原 post 的 id
    postid_outline = p.getLastChild()
    # 直接從標題取得 post 的 id 號碼
    post_id = postid_outline.h
    posts = service.posts()
    # 更新網誌文章時的 body
    body = {
    "kind": "blogger#post",
    "title": title,
    "content": content
    }
    # need to save postId to outline head
    update = posts.update(blogId=blog_id, postId=post_id, body=body, publish=True)
    update_doc = update.execute()
    # 使用 credential token 後, 無需刪除 blogger.dat
    #os.remove("blogger.dat")
    g.es("post_id 為", post_id)
    g.es("已經將更新資料送往 K Blogger!")
except(client.AccessTokenRefreshError):
    g.es("error")
</t>
<t tx="yen.20200518115111.1"></t>
<t tx="yen.20200518115329.1"></t>
<t tx="yen.20200518115347.1"></t>
<t tx="yen.20200518115404.1"></t>
<t tx="yen.20200518115421.1"></t>
<t tx="yen.20200518115509.1">@language md
---
Title: 同步 Pelican 與 Blogger 網誌內容
Date: 2020-05-18 11:00
Category: Weblog
Tags: Pelican, Blogger
Slug: sync-pelican-and-blogger-content
Author: yen
---

在先前的 [CMSiMDE] 架構中, 曾經設法讓 [Pelican 與 Ｗordpress 的內容同步], 相同的概念, 也可以在 [Leo Editor] 中, 讓 Pelican 的網誌文章與 Google Blogger 保持同步.

&lt;!-- PELICAN_END_SUMMARY --&gt;

[CMSiMDE]: https://github.com/mdecourse/cmsimde.git
[Pelican 與 Ｗordpress 的內容同步]: http://project.mde.tw/blog/yen-pelican-jing-tai-wang-ye-yu-wordpress-de-zheng-he-fang-an.html
[Leo Editor]: https://leoeditor.com/

@others
</t>
<t tx="yen.20200518120231.1">按鈕與節點標題
----

[Leo Editor] 中可以設置按鈕執行 Python 程式, 其中搭配節點的標題內容存取, 可以應用在 Pelican 與 Blogger 的網誌內容同步.

由於目前使用的 Pelican, 在 markdown 目錄中編寫 .md 檔案, 然後再設法以 Pelican 指令與設定檔, 將所有的 .md 檔案轉為 blog 目錄中的網誌內容. 其中, 若能將個別的 .md 檔案先轉為 html 後, 再利用 Google Blogger API 的 Python 程式將各網誌 html 檔案送至對應帳號下的 Blogger 網誌系統, 將可以將一份內容分別同步到 Pelican 與 Blogger.


新增 Blogger 文章
----

 add_to_blogger 按鈕程式:
 
&lt;pre class="brush: python"&gt;
from markdown import markdown
from oauth2client import client
from googleapiclient import sample_tools
import os

argv = ""
# 認證並建立服務
# name of the api is "blogger", version is "v3"
# description of the api is __doc__
# file name of the application: location of client_secrets.json
service, flags = sample_tools.init(
  argv, 'blogger', 'v3', __doc__, "./../../client_secrets.json",
  scope='https://www.googleapis.com/auth/blogger')


def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    # 但是只換第一個
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;', 1)
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &amp;lt;h2&amp;gt;標題
content = content.replace("&amp;lt;h2&amp;gt;", "&amp;lt;h2&amp;gt;&amp;lt;font size='4'&amp;gt;")
content = content.replace("&amp;lt;/h2&amp;gt;", "&amp;lt;/font&amp;gt;&amp;lt;/h2&amp;gt;")
# g.es(content)

try:
    '''
    users = service.users()
    # 取得使用者 profile 資料
    user = users.get(userId='self').execute()
    print('網誌名稱: %s' % user['displayName'])
    '''
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    # post_id is now blogs["items"][0]["id"]
    blog_id = blogs["items"][0]["id"]
    #for blog in blogs['items']:
        #print(blog['name'], blog['url'])
    posts = service.posts()
    # 新增網誌 post 時, 需要 post_id
    body = {
    "kind": "blogger#post",
    "id": blog_id,
    "title": title,
    # 利用 markdown 函式, 將 .md 的內文轉為 html, 作為 Blogger 的文章內容
    "content": content,
    "labels": tags
    }
    insert = posts.insert(blogId=blog_id, body=body)
    posts_doc = insert.execute()
    post_id = posts_doc["id"]
    #print(posts_doc)
    os.remove("blogger.dat")
    # 利用最後的 child 節點來儲存 post_id
    to_save_post_id = p.insertAsLastChild()   
    # 改為內文為空的節點, id 直接標在 head 標題 
    to_save_post_id.b = ""
    to_save_post_id.h = post_id
    # 因為新增節點, commander 必須 redraw
    c.redraw()
    g.es("post_id 為", post_id)
    g.es("已經將資料送往 Blogger!")
except(client.AccessTokenRefreshError):
    g.es("error")
&lt;/pre&gt;

編輯 Blogger 文章
----

edit_to_blogger 按鈕程式:

&lt;pre class="brush: python"&gt;
from markdown import markdown
from oauth2client import client
from googleapiclient import sample_tools
import os

argv = ""
# 認證並建立服務
# name of the api is "blogger", version is "v3"
# description of the api is __doc__
# file name of the application: location of client_secrets.json
service, flags = sample_tools.init(
  argv, 'blogger', 'v3', __doc__, "./../../client_secrets.json",
  scope='https://www.googleapis.com/auth/blogger')


def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &amp;lt;h2&amp;gt;標題
content = content.replace("&amp;lt;h2&amp;gt;", "&amp;lt;h2&amp;gt;&amp;lt;font size='4'&amp;gt;")
content = content.replace("&amp;lt;/h2&amp;gt;", "&amp;lt;/font&amp;gt;&amp;lt;/h2&amp;gt;")
# g.es(content)

try:
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    blog_id = blogs["items"][0]["id"]
    # 設法取得原 post 的 id
    postid_outline = p.getLastChild()
    # 直接從標題取得 post 的 id 號碼
    post_id = postid_outline.h
    posts = service.posts()
    # 更新網誌文章時的 body
    body = {
    "kind": "blogger#post",
    "title": title,
    "content": content
    }
    # need to save postId to outline head
    update = posts.update(blogId=blog_id, postId=post_id, body=body, publish=True)
    update_doc = update.execute()
    os.remove("blogger.dat")
    g.es("post_id 為", post_id)
    g.es("已經將更新資料送往 Blogger!")
except(client.AccessTokenRefreshError):
    g.es("error")
&lt;/pre&gt;

從 Blogger 取回內容
----

在 [Pelican 與 Ｗordpress 的內容同步] 中, 可以從 Wordpress 取回網誌內容, 然後新增到 Pelican, 在此因為網誌文章的建立以 [CMSiMDE] 倉儲中的 Pelican 網誌為主, Blogger 只是附屬備份網誌, 所以就不再從新增的 Google Blogger 取回網誌文章.

參考資料
----

&lt;a href="https://developers.google.com/blogger"&gt;https://developers.google.com/blogger&lt;/a&gt;
</t>
<t tx="yen.20200521095531.1"></t>
<t tx="yen.20200528095926.1">@language md
---
Title: 網際內容管理 Ｗ13
Date: 2020-05-28 11:00
Category: WCM
Tags: Pelican, Blogger, Ubuntu
Slug: wcm-w13-ubuntu-and-blogs
Author: yen
---

之所以在機械設計工程系開設網際內容管理課程, 起源於多年前的所謂製商整合科技教育改進計畫, 當時參與的科系有機械設計系, 自動化工程系, 工業管理系與資訊管理系, 同時開設的課程還有協同產品設計實習, 基因演算與產品生命週期管理.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20200529220132.1">網際內容管理課程目標
----

這項計畫與其他所謂的跨領域學程的命運沒有太大的差異, 計畫補助經費結束, 大家各自回巢, 留下一堆陳年資訊系統設備, 還有這門網際內容管理與協同產品設計實習.

網際內容管理課程開設在機械科系的主要任務, 是要鼓勵工程師善用全球資訊網的無遠弗屆, 與其他領域工程師執行協同設計, 自 2012 年起 [Onshape] 已經成功在曾經開發 [Solidworks] 的基礎上, 證明瀏覽器, 平板電腦與手機, 都可以是機械設計工程師開發產品的平台, 無需受限於單機安裝, 必須自行看顧版本更新, 徹底脫離沒有產品資料管理系統, 就無法協同進行產品開發的舊時代.

當然, [Onshape] 雖然定位為電腦輔助機械設計與分析管理平台, 但是真正能夠編寫 Web based 程式前後端, 並且與 [Parasolid] 核心程式庫進行圖形介面與觸控互動, 絕非出自通常只上過一門 [計算機程式] 課程的機械工程師, 而是來自一群號稱 Full stack web developers 的資訊科系研究工程師.

[計算機程式]: http://mde.tw/lab/content/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A8%8B%E5%BC%8F.html
[Onshape]: https://www.onshape.com/
[Solidworks]: https://www.solidworks.com/
[Parasolid]: https://en.wikipedia.org/wiki/Parasolid
[Featurescript]: https://cad.onshape.com/FsDoc/
[CMSiMDE]: https://github.com/mdecourse/cmsimde.git
[Pelican]: https://github.com/getpelican/pelican
[Blogger]: https://www.blogger.com/
[Leo Editor]: https://leoeditor.com/
[節點指令]: https://leoeditor.com/directives.html
[clean]: https://leoeditor.com/directives.html#clean-path
[Markdown]: https://en.wikipedia.org/wiki/Markdown
[button]: https://leoeditor.com/customizing.html?highlight=button
[html]: https://en.wikipedia.org/wiki/HTML
[google-api-python-client]: https://github.com/googleapis/google-api-python-client
[oauth2client]: https://github.com/googleapis/oauth2client

儘管如此, 對於必須在 [Onshape] 上利用 [Featurescript] 進行各種 2D 與 3D 零組件客製設計的機械工程師, 仍需具備一定程度的網際程式能力.

因此, 在四技部的網際內容管理課程, 定位為接續計算機程式課程, 預計培養未來在電腦輔助設計實習與協同產品設計實習等課程, 負責建置實體與虛擬主機, 搭建網際機械設計管理系統的協同人員, 而五專部的網際內容管理課程, 則定位在承接計算機概論課程, 讓高一程度的學員, 能夠了解網際軟硬體的基本架構外, 也能夠利用分散式版次管理建立網站, 管理網誌並利用基本的程式方法, 讓 Google [Blogger] 與 [CMSiMDE] 中的 [Pelican] 網誌內容同步.

[Leo Editor]
----

要讓兩套架構完全不同的網誌系統內容同步, 可以採取各種程式方法, 這裡是透過 [Leo Editor] 大綱編輯程式中的節點按鈕與節點編輯特性完成.

[Leo Editor] 允許使用者透過不同的 [節點指令], 進行特定文字檔案的編輯管理, 其中的 [clean] 節點指令, 最適合用來編輯 [Pelican] Blog 的 [Markdown] 文章內容, 因為 [clean] 允許將一篇文章以從屬架構的節點內容分割, 當使用者利用 [button] 中的 Python 程式段, 試圖將 [Pelican] 網誌的文章從 [Markdown] 格式,  轉為 [html] 檔案, 並且通過 Google [Blogger] API 的 credential 認證, 將網誌的 [html] 格式文章, 轉貼到對應的 [Blogger] 系統之後, 可以取得該網誌的 id, 並將此 id 儲存在該 [Pelican] [Markdown] 文章編輯大綱中, [clean] 節點下層的最末端, 之後的內容改版, 就可以依據此一 [Blogger] 文章 id, 循相同的授權模式, 將改版內容送至 Google [Blogger].

按鈕程式所需模組
----

為了利用 [button] 中的 Python 程式將文章發佈至 Google [Blogger], 可攜程式系統需要安裝 [google-api-python-client] 與 [oauth2client] 模組.

pip install google-api-python-client oauth2client

接下來則是取得與所要同步的 Google [Blogger] 認證檔案.</t>
<t tx="yen.20200529224039.1">@language python
# get secrets: https://console.developers.google.com
# https://developers.google.com/blogger/docs/3.0/using
# pip install google_auth_oauthlib
# under Mac command + b to execute
import pickle
import os
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request


SCOPES = ['https://www.googleapis.com/auth/blogger', ]

# we check if the file tBo store the credentials exists
if not os.path.exists('./../../yen_gm_blogger_token.dat'):

    flow = InstalledAppFlow.from_client_secrets_file('./../../yen_gm_blogger_secrets.json', SCOPES)
    credentials = flow.run_local_server()

    with open('yen_gm_blogger_token.dat', 'wb') as credentials_dat:
        pickle.dump(credentials, credentials_dat)
else:
    with open('yen_gm_blogger_token.dat', 'rb') as credentials_dat:
        credentials = pickle.load(credentials_dat)
service = build('blogger', 'v3', credentials=credentials)
g.es(service)</t>
<t tx="yen.20200608161509.1">@language md
---
Title: 高風險聯網設備
Date: 2020-06-04 11:00
Category: Network
Tags: Security
Slug: high-risk-networking-devices
Author: yen
---

前幾天, 感謝校方送來一份通知, 列出系上共有 40 多台所謂的高風險聯網設備. 其中有 8 台 Linux 代理主機必須配合更新套件, 並且限定可連線管理的 IP 位址範圍.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others

</t>
<t tx="yen.20200608161548.1">
Ubuntu 伺服器
----

設計系目前共有三台實體虛擬主機與一台虛擬代理主機, 四台符號名稱伺服器,  以及兩台虛擬的 WWW 伺服器主機. 

其中系上的符號名稱伺服器原先安裝 Ubuntu 18.04, 必須升級為 20.04, 四台符號名稱伺服器與 WWW 伺服器則需要限制 ssh 的連線範圍.

針對非開發版本的 Ubuntu 18.04 可以參考 https://www.linuxtechi.com/upgrade-ubuntu-18-04-lts-to-ubuntu-20-04-lts/ 升級為 20.04.

舊版的 nginx, 若要升級為較新版本, 則可參考 https://devopscraft.com/how-to-compile-nginx-from-source-on-ubuntu-20-04/ 自行編譯安裝.

ufw 防火牆
----

以代理主機而言, 除了限制可連線 ssh 的 IP 範圍外, 還需要讓同區段的電腦可以對 3128 埠號連線;

&lt;pre class="brush: js"&gt;
    sudo -s 
    ufw status
    ufw allow from your_ipv4_or_ipv6_ip
    ufw allow from 2001:288::/16 to any port 22
    ufw deny 22
    ufw allow from 2001:288::/16 to any port 3128
    ufw deny 3128
    ufw enable
&lt;/pre&gt;

其次, 若要刪除原先 ufw 的設定可以使用 ufw reset, 若要暫時關閉 ufw, 採用 ufw disable.

符號名稱的部分, 需要限制 port 22 連線外, 必須讓所有主機都能對 port 53 連線:

&lt;pre class="brush: js"&gt;
    sudo -s 
    ufw status
    ufw allow from your_ipv4_or_ipv6_ip
    ufw allow from 2001:288::/16 to any port 22
    ufw deny 22
    ufw allow 53
    ufw enable
&lt;/pre&gt;

WWW 伺服器若採用 port 80 與 443 配置, 則需要對所有主機開放, port 5443 若執行 Fossil SCM, 也必須開放, 其他也是對 port 22 有連線範圍的限制.

&lt;pre class="brush: js"&gt;
    sudo -s 
    ufw status
    ufw allow from your_ipv4_or_ipv6_ip
    ufw allow from 2001:288::/16 to any port 22
    ufw deny 22
    ufw allow 80
    ufw allow 443
    ufw allow 5443
    ufw enable
&lt;/pre&gt;

最後, 則是附上[電腦輔助設計室電腦規劃] 與 [網路安全] 參考資料.

[電腦輔助設計室電腦規劃]: https://github.com/mdecourse/wcms2018/issues/7
[網路安全]: http://www.linuxfromscratch.org/blfs/view/svn/postlfs/security.html



</t>
<t tx="yen.20200608161847.1"></t>
<t tx="yen.20200608204806.1"></t>
<t tx="yen.20200608205522.1">@language python
from markdown import markdown
from oauth2client import client
#from googleapiclient import sample_tools
import os
# 配合使用 credential token
import pickle
from googleapiclient.discovery import build
#from google_auth_oauthlib.flow import InstalledAppFlow
#from google.auth.transport.requests import Request

os.environ['TZ'] = 'Asia/Taipei'
with open('./../../yen_gm_blogger_token.dat', 'rb') as credentials_dat:
    credentials = pickle.load(credentials_dat)
service = build('blogger', 'v3', credentials=credentials)

def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &lt;h2&gt; 標題
content = content.replace("&lt;h2&gt;", "&lt;h2&gt;&lt;font size='4'&gt;")
content = content.replace("&lt;/h2&gt;", "&lt;/font&gt;&lt;/h2&gt;")
# g.es(content)

try:
    '''
    users = service.users()
    # 取得使用者 profile 資料
    user = users.get(userId='self').execute()
    print('網誌名稱: %s' % user['displayName'])
    '''
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    # post_id is now blogs["items"][0]["id"]
    #blog_id = blogs["items"][0]["id"]
    blog_id = "7949497010793271992"
    #for blog in blogs['items']:
        #print(blog['name'], blog['url'])
    posts = service.posts()
    # 新增網誌 post 時, 需要 post_id
    body = {
    "kind": "blogger#post",
    "id": blog_id,
    "title": title,
    # 利用 markdown 函式, 將 .md 的內文轉為 html, 作為 Blogger 的文章內容
    "content": content,
    "labels": tags
    }
    insert = posts.insert(blogId=blog_id, body=body)
    posts_doc = insert.execute()
    post_id = posts_doc["id"]
    #print(posts_doc)
    # 改用 credential token 後不會產生 blogger.dat
    #os.remove("blogger.dat")
    # 利用最後的 child 節點來儲存 post_id
    to_save_post_id = p.insertAsLastChild()   
    # 改為內文為空的節點, id 直接標在 head 標題 
    to_save_post_id.b = ""
    to_save_post_id.h = post_id
    # 因為新增節點, commander 必須 redraw
    c.redraw()
    g.es("post_id 為", post_id)
    g.es("已經將資料送往 MBlogger!")
except(client.AccessTokenRefreshError):
    g.es("error")

</t>
<t tx="yen.20200608205624.1">@language python
from markdown import markdown
from oauth2client import client
#from googleapiclient import sample_tools
import os
# 配合使用 credential token
import pickle
from googleapiclient.discovery import build
#from google_auth_oauthlib.flow import InstalledAppFlow
#from google.auth.transport.requests import Request

os.environ['TZ'] = 'Asia/Taipei'
with open('./../../yen_gm_blogger_token.dat', 'rb') as credentials_dat:
    credentials = pickle.load(credentials_dat)
service = build('blogger', 'v3', credentials=credentials)

def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &lt;h2&gt; 標題
content = content.replace("&lt;h2&gt;", "&lt;h2&gt;&lt;font size='4'&gt;")
content = content.replace("&lt;/h2&gt;", "&lt;/font&gt;&lt;/h2&gt;")
# g.es(content)

try:
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    #blog_id = blogs["items"][0]["id"]
    blog_id = "7949497010793271992"
    # 設法取得原 post 的 id
    postid_outline = p.getLastChild()
    # 直接從標題取得 post 的 id 號碼
    post_id = postid_outline.h
    posts = service.posts()
    # 更新網誌文章時的 body
    body = {
    "kind": "blogger#post",
    "title": title,
    "content": content
    }
    # need to save postId to outline head
    update = posts.update(blogId=blog_id, postId=post_id, body=body, publish=True)
    update_doc = update.execute()
    # 使用 credential token 後, 無需刪除 blogger.dat
    #os.remove("blogger.dat")
    g.es("post_id 為", post_id)
    g.es("已經將更新資料送往 M Blogger!")
except(client.AccessTokenRefreshError):
    g.es("error")
</t>
<t tx="yen.20200608205920.1"></t>
<t tx="yen.20200608210003.1"></t>
<t tx="yen.20200611213634.1">@language md
---
Title: 代理主機維護策略
Date: 2020-06-11 11:00
Category: Network
Tags: Proxy
Slug: stratege-for-proxy-servers
Author: yen
---

昨天又失去一台 HP 代理主機, 也就是編號 42 的 Squid Proxy Server. 因此目前只剩下 4, 53 與 69 等三台.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20200611214052.1">雙協定支援代理主機的需求
----

也許大家會存疑, 機械設計科系為何需要自行安裝維護網路代理主機？假如根據學校多年前回覆, 之所以拆掉校級的代理主機設置, 原因是聯外頻寬已經很足夠, 因此不需要網路代理主機.

但是, 這種假設是, 系上的 IPv4 數量足夠, 而大部分的外部伺服器都已經支援 IPv6, 但是對於平日電腦總數量超過 300 台的機械設計系, 希望上課時讓每一位學員都能將課程資料存取於 Github.com, 這兩個條件都不存在.

因此, 從電腦輔助設計室上課的需求來看, 採用 IPv4 NAT 的模式, 並無足夠的頻寬讓 至少 50 台電腦快速直接對 Github.com 連線, 而如眾所知, Github.com 目前尚不支援 IPv6 網路協定.

因此, 2-3 台能夠同時支援 IPv4 與 IPv6 網路協定的代理主機, 似乎是可行的方案之一.

維護全時運作主機的可能方案
----

假如以電腦輔助設計室每週 40 堂課計算, 其中只有至多 14 堂課需要使用網路代理主機, 理論上並沒有必要全時讓這些代理主機運作, 而只要維持一台連內 (69), 一台連外 (4), 其餘的 IPv4 伺服器 IP 位址, 可以交由每班中至多 5 個分組的組長, 以虛擬主機 bridged 網路的方式各自管理分組中的代理主機, 其中可能的編號將有 (24, 32, 34, 39, 42）等五台.

其中, 因為在上學期的課程有大一的計算機程式與大二的電腦輔助設計實習課程, 而下學期的課程則有大一的網際內容管理與大二的協同產品設計實習, 正好可以在各課程中安排學長與學弟妹共同維護這五台代理主機的互動傳承內容.

Squid 代理主機的安裝
----

以 Ubuntu 20.04 伺服器主機為例, 安裝 Squid Proxy 伺服器:

sudo apt install squid

接下來, 利用 /etc/squid/squid.conf 進行配置:

&lt;pre class="brush: jscript"&gt;
# 定義可以連線電腦網路位置範圍或特定 IP
acl cad_lab src 192.130.17.0/24
acl cad_lab src 192.127.237.33
acl cad_lab src 2001:288::/64

# 定義可以連線通過的埠號
acl SSL_ports port 443
acl Safe_ports port 80 # http
acl Safe_ports port 88
acl Safe_ports port 89
 
#acl Safe_ports port 21 # ftp
acl SSL_ports port 8843
acl SSL_ports port 5443
acl SSL_ports port 8443
acl Safe_ports port 8443
 
acl SSL_ports port 9443
acl Safe_ports port 9443
 
acl SSL_ports port 22
acl Safe_ports port 22
 
acl Safe_ports port 443 # https
acl Safe_ports port 1025-65535 # unregistered ports
acl Safe_ports port 280 # http-mgmt
acl Safe_ports port 488 # gss-http
acl Safe_ports port 591 # filemaker
acl Safe_ports port 777 # multiling http
acl CONNECT method CONNECT

# 除了前面定義的安全埠號外, 一律拒絕連線
# Deny requests to certain unsafe ports
http_access deny !Safe_ports

# 除了前面定義的安全埠號外, 一律不准連線
# Deny CONNECT to other than secure SSL ports
http_access deny CONNECT !SSL_ports
 
# 只允許前面定義的網路 IP 電腦連線, 其餘一律禁止
http_access allow cad_lab
http_access deny all
# Only allow cachemgr access from localhost
http_access allow localhost manager
http_access deny manager
 
#http_access allow localnet
http_access allow localhost
 
# And finally deny all other access to this proxy
http_access deny all
 
# Squid normally listens to port 3128
http_port 3128
 
#cache_dir ufs /var/spool/squid 100 16 256
icp_port 3130
icp_access allow all
 
cache_dir ufs /var/spool/squid 2000 16 256
cache_peer 192.130.17.4 sibling 3128 3130
cache_peer 192.130.17.42 sibling 3128 3130
cache_peer 192.130.17.53 sibling 3128 3130

 
#
# Add any of your own refresh_pattern entries above these.
#
refresh_pattern ^ftp: 1440 20% 10080
refresh_pattern ^gopher: 1440 0% 1440
refresh_pattern -i (/cgi-bin/|\?) 0 0% 0
refresh_pattern (Release|Packages(.gz)*)$ 0 20% 2880
refresh_pattern . 0 20% 4320

max_filedesc 40960
cache_mem 4000 MB
&lt;/pre&gt;

修改 /etc/squid/squid.conf 後, 以:

sudo systemctl restart squid 重新啟動.

假如要讓 Virtualbox 虛擬主機與 Windows 10 host 啟動開啟虛擬代理主機, 可以設定使用 [VBoxVmService], 但是 5.X 的 Virtualbox 必須與 VBoxVmService  5.X 版配合, 而 6.X 的版本也必須互動升級配置.

[VBoxVmService]: https://github.com/onlyfang/VBoxVmService

後記:

42 是一台 HP ML 30 gen9 的機器,  2017 安裝的 Ubuntu 在前幾天停止運作後, 直接將 Host 裝上 Win 10, 因無法從 USB 安裝, 只能用 blueray  dvd 重新安裝, 然後外部設為 39, 然後將虛擬 proxy 伺服器設為 42,  目前仍然加入服役中.
</t>
<t tx="yen.20200611221636.1"></t>
<t tx="yen.20200611221647.1"></t>
<t tx="yen.20200611221718.1"></t>
<t tx="yen.20200611223454.1"></t>
<t tx="yen.20210427094921.1">答案是: 能, 但不是像現在用大量課程轟炸式的唸法, 而應該是解題導向式的唸法, 應該是大量注入電腦科技, 網路技術, 讓年輕人及早了解各種理論實際用途的唸法.

辦得到嗎? 可以, 但是工程學院必須不分系才行, 每個既有科系的課程與研究團隊, 必須跟餐廳裡的自助攤位一樣, 各自端出最具專長的教學, 讓負責解題的學生自行組合.

學生想要設計一台自行車, 從腳踏改為電動, 再加上太陽能, 下坡自動充電, 可以上路擷取路面實況與環境影像, 回到室內可以採虛擬或擴增實境模式, 成為運動健身器材. 過程中所需要的零組件都能從學校的福利材料部門中簽單領取. 上課時則針對整體設計製造所牽涉的原理進行協同研討......

哈哈! 不要作夢了! 

</t>
<t tx="yen.20210427104206.1"></t>
<t tx="yen.20210427104221.1"></t>
<t tx="yen.20210427104259.1"></t>
<t tx="yen.20210427104308.1"></t>
<t tx="yen.20210427105116.1">local-blog 必須 go to script 後再點按 button

add-to-kblogger 或 edit-to-kblogger 
則必須滑鼠停在 ＠clean 主 outline 上

add-to 可以直接點按, 但 edit-to 則需要有 blog id 在 ＠clean 最後 outline 上</t>
<t tx="yen.20210612072134.1"></t>
<t tx="yen.20210612072138.1">@language md
---
Title: 工作站電腦關機
Date: 2021-06-12 11:00
Category: workstation
Tags: 202106
Slug: 2021-kmol-workstation-shutdown
Author: yen
---

早上第二校區斷電一個小時, 稍早已經將所有遠端的電腦通通關機.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20210612072513.1">為什麼沒有 online UPS 設置? 說來話長! 

但說短話也行: 這就是愛用國貨的代價.

接下來要問的是: 我們能夠在沒有自架主機的環境中上課嗎?

計算機程式
----

利用 &lt;http://mde.tw/lab/content/Python.html&gt; 可以直接利用網頁練習基本的 Python 語法, 其他的程式主題可以在 &lt;https://mde.tw/cmstemplate&gt; 中的 Windows 10 可攜程式系統中執行練習. 若再配合 &lt;https://kaggle.com&gt;, 各學員所寫的程式碼可以在網路上進行分享與協同.

因此在沒有自架主機的情況下, 要發布下載項目, 可以掛到 @gm 帳號下的 Google Drive, 5T 的容量配合上課應該已經足夠.

線上示範或學員操作的影片則一律存入 Google Meet 對應的 G Drive 空間, 另外還可以配合 OBS + Youtube 直播進行互動或錄製開會影片.

結論是: 在沒有自架主機進行計算機程式的線上課程, 沒有任何問題. 但是評分呢? 假如 Github Education 能夠讓所有的帳號使用基本倉儲存放與 Github Pages, 那麼原先上課所採用的歷程資料評量依然可行, 但期中與期末的評分將會花上三堂課, 規劃在線上輪流由組員進行直播, 報告自己在學習過程中的各項操作內容與成果, 然後設法建置一個 Google Form 讓所有的學員在時效內針對各學員的報告內容評分.

網際內容管理
----

假如各學員的電腦記憶體大於 8GB, 應該仍然可以透過 Virtualbox 在 Windows 10 操作系統中安裝虛擬主機, 只是一般用戶的電腦要設定為連外 IPv6 位址, 或許會碰到一些挑戰, 假如可以分組只在上課時段, 由分組虛擬主機設法上網, 針對各種網際伺服器的安裝配置進行實習.

靜態網頁的部分仍然可以在 Github Pages 與 Heroku 平台上展示, 至於網際 Python 也可以送到 Heroku 執行,  牽涉 PostgreSQL 資料庫的系統也能視情況導入. 唯一無法進行展示的就是 Fossil SCM, 因為沒有主機代管, Stunnel 就無法配合安裝. 但仍可設法在各分組的虛擬主機上進行配置實習.

所以結論是: 在沒有自架主機進行計算機程式的線上課程, 有些挑戰, 但是仍有機會克服.

電腦輔助設計實習
----
 
 假如完全採用 Onshape  繪圖, 之後將零組件轉入 RoboDK, CoppeliaSim 與 Webots 進行機電資模擬, 而且相關機制與計算機程式及網際內容管理相同, 那麼加上協同產品設計實習等這兩門課程, 在沒有自架主機的情況下, 可以全時讓所有學員在線上課.
 
假如再恢復實體上課
----
 
假如所有學員都能夠在遠端進行上列的線上課程, 那麼實體回到電腦輔助設計室上課, 在不啟動工作站室中伺服器的情況下, 可不可能僅用一台虛擬代理主機讓 60 台電腦採用純 IPv6 網路設定穩穩上網? 一台壓力可能比較大, 教室中必須要有一台安裝四片網卡的電腦, 啟動四台虛擬代理主機, 使用四個 IPv4 網址並設定 domain names, 這樣應該就能在上課時段採同步啟動這四台虛擬代理主機的情況下, 實體上課.

真的需要上滿 18 週?
----

台灣已經有些學校一個 semester 採行 16 週, 其實以目前的學習密度而言, 16 週仍然太長, 假如我們能夠決定, 一個學期 14 週就已經足夠. 前面五週熱身, 第六週進行任務交付, 隨後的六週執行分組協同任務, 然後在最後兩週進行同儕線上成果發表及評分.
</t>
<t tx="yen.20210612075943.1"></t>
<t tx="yen.20210612080009.1"></t>
<t tx="yen.20210612080509.1"></t>
<t tx="yen.20210612080545.1"></t>
<t tx="yen.20210612081616.1"></t>
<t tx="yen.20210612081616.10"></t>
<t tx="yen.20210612081616.100">@language md
---
Title: Fossil SCM on Ubuntu
Date: 2021-02-11 11:00
Category: Weblog
Tags: 202102
Slug: fossil-scm-on-ubuntu
Author: yen
---

[Fossil SCM] 是一套完整的[軟體組態管理系統] ([Software Configuration Management]), 以 ANSI C 編寫, 其中利用 [TCL] 作為 Scripting 語言. 接下來將要說明如何在 Ubuntu 20.04 中安裝與配置 [Fossil SCM].

[Fossil SCM]: https://www.fossil-scm.org
[TCL]: https://en.wikipedia.org/wiki/Tcl
[軟體組態管理系統]: https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86
[Software Configuration Management]: https://en.wikipedia.org/wiki/Software_configuration_management

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20210612081616.101">這裡所要介紹的 [Fossil SCM] 為 &lt;http://fossil.kmol.info&gt; (只配置 IPv6 網路協定), http 網際伺服器前端採用 [nginx], https 代理伺服器採用 [stunnel], 主要伺服的 [Software Configuration Management] 套件則為 [Fossil SCM].

安裝 [nginx]
----

在 Ubuntu 20.04 中安裝 [nginx] 非常簡單, 只要執行 sudo apt install nginx 即可.

[nginx] 的基本設定檔案位於 /etc/nginx/sites-available/default

安裝 [nginx] 有兩個目的, 一方面回應 &lt;http://fossil.kmol.info&gt;, 也就是 port 80 的 WWW 伺服器. 而另外一方面則是配合 &lt;https://certbot.eff.org/lets-encrypt/ubuntufocal-nginx&gt; 以手動模式取得 [stunnel] https 伺服所需要的 fullchain.pem 與 privkey.prm 等兩個檔案.

安裝 [Fossil SCM]
----

在 Ubuntu 20.04 安裝 [Fossil SCM] 也非常簡單, 只要執行 sudo apt install fossil 即可. 但是所安裝的版本可能不是最新版, 由於安裝的 fossil 執行檔案位於 /usr/bin/fossil, 假如希望與 Windows 10 64 位元操作系統中的 [Fossil SCM] 對應, 可以至 &lt;https://fossil-scm.org/home/uv/download.html&gt; 下載 Linux 最新版本的 fossil, 然後以 sudo cp fossil /urs/bin/ 即可. 若要查驗 [Fossil SCM] 的版本, 可以使用 fossil version 指令.

[Fossil SCM] 整個系統就只有一個 fossil 執行檔案, 而倉儲檔案則只全部壓縮在一個 [SQLite] 資料庫檔案中.

接下來為了配置一套可以伺服多個 [Fossil SCM] 倉儲的 Ubuntu 20.04 系統, 在 /home/user/ 目錄下建立 repository 目錄, 之後的所有要從遠端擷取的 [Fossil SCM] 倉儲都可以放在此一用戶目錄下. 至於要在此目錄下建立一個內定的 [Fossil SCM] 倉儲, 可以進入 /home/user/repository 目錄後 (這裡的 user 為 Ubuntu 20.04 下的用戶帳號名稱), 以 fossil init cd2021.fossil 建立一個 [Fossil SCM] 倉儲, 執行完後系統就會直接在命令列中顯示用來管理此一倉儲的用戶 (會使用建立倉儲的帳號, 也就是 user) 登入管理的密碼.

使用者可以選擇將此一與 user 對應的管理密碼記起來, 或者之後再使用 sqlite3 指令進入 cd2021.fossil 查詢.

假如使用者需要在 Ubuntu 環境中直接對 [Fossil SCM] 倉儲改版, 則建議在 /home/user/repository 目錄中再建立一個 wd 目錄 (為 working directory 的縮寫), 之後可以將位於 /home/user/repository 目錄中的各個 .fossil 內容, 在 /home/user/repository/wd 目錄中展開, 若以 /home/user/repository/cd2021.fossil 為例, 展開後將位於 /home/user/repository/wd/cd2021.

安裝 [stunnel]
----

安裝 [stunnel] 也很簡單, 只要執行 sudo apt install stunnel4 即可, 安裝後若要隨系統開機啟動, 則需要 sudo vi /etc/default/stunnel4, 並在檔案中加入 ENABLED=1 後存檔.

另外, 還需要 sudo vi /etc/environment, 並在檔案中加入 HTTPS=on 後存檔.

接下來為了由 [stunnel] 代理 [Fossil SCM] 的 https 伺服, 必須加入 /etc/stunnel/stunnel.conf

&lt;pre class="brush: jscript"&gt;
[https]
accept = 140.130.your_ipv4.ip:443
accept = 2001:288:6004:your:ipv6::ip:443
cert = /etc/stunnel/fullchain.pem
key = /etc/stunnel/privkey.pem
exec = /usr/bin/fossil
execargs = /usr/bin/fossil http /home/user/repository/ --https --nojail --notfound cd2021
&lt;/pre&gt;

上述的 fullchain.pem 與 privkey.pem 由於尚未配置 [certbot], 必須要取得合法的數位簽章檔案後, 再利用:

sudo systemctl start stunnel4.service 

啟動 [stunnel].

sudo systemctl stop stunnel4.service

關閉 [stunnel], 或利用:

sudo systemctl restart stunnel4.service

重新啟動 [stunnel].

擷取 fullchain.pem 與 privkey.pem
----

這個步驟主要按照 &lt;https://certbot.eff.org/lets-encrypt/ubuntufocal-nginx&gt; 中的指令操作, 由於 Ubuntu 20.04 已經內建 snap, 因此只要執行:

sudo snap install core; sudo snap refresh core

sudo snap install --classic certbot

sudo ln -s /snap/bin/certbot /usr/bin/certbot

sudo certbot certonly --nginx

就可以在 /etc/letsencrypt/live/fossil.kmol.info/ 目錄中找到 fullchain.pem 與 privkey.pem 等兩個數位簽章檔案, 接著將此兩個檔案複製至 /etc/stunnel/ 目錄, 以便配合 /etc/stunnel/stunnel.conf 隨電腦開機啟動.

因為 [certbot] 的數位簽章每 90 天都要更新一次, 屆時若要手動更新可以先模擬執行:

sudo certbot renew --dry-run

nginx http 跳轉 https
----

最後一個步驟是讓 [nginx] 所伺服的 &lt;http://fossil.kmol.info&gt; 能夠自動跳轉到 [Fossil SCM] 與 [stunnel] 結合的 &lt;https://fossil.kmol.info&gt;

修改 /etc/nginx/sites-available/default 中的設定如下:

&lt;pre class="brush: jscript"&gt;
server {
listen 80;
server_name fossil.kmol.info;
rewrite ^/(.*)$ https://fossil.kmol.info/$1 permanent;
}
&lt;/pre&gt;


[nginx]: https://nginx.org/
[stunnel]: https://www.stunnel.org/
[SQLite]: https://www.sqlite.org
[certbot]: https://certbot.eff.org/
</t>
<t tx="yen.20210612081616.102"></t>
<t tx="yen.20210612081616.103"></t>
<t tx="yen.20210612081616.104"></t>
<t tx="yen.20210612081616.105"></t>
<t tx="yen.20210612081616.106">@language md
---
Title: Fossil SCM 使用案例
Date: 2021-02-11 11:10
Category: Weblog
Tags: 202102
Slug: fossil-scm-use-case
Author: yen
---

請注意: &lt;http://fossil.kmol.info&gt; 僅支援 IPv6 網路協定.

[Fossil SCM] 的 &lt;https://fossil-scm.org/home/doc/trunk/www/embeddeddoc.wiki&gt; 可以與靜態網頁結合應用, 唯一必須注意的是 &lt;https://fossil-scm.org/home/doc/trunk/www/defcsp.md&gt; 議題.

[Fossil SCM]: https://www.fossil-scm.org

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20210612081616.107">[Fossil SCM] documentation 功能
----
先前已經建議 [Fossil SCM] 的倉儲可以放在 /home/user/repository/ 目錄中, 以這裡的範例分別為 /home/user/repository/cd2021.fossil 與 /home/user/repository/lab.fossil, 而這兩個倉儲的展開內容分別位於 /home/user/repository/wd/cd2021 與 /home/user/repository/wd/lab 等目錄.

透過 [Fossil SCM] 的 &lt;https://fossil-scm.org/home/help/http&gt; 指令與 [stunnel] 的結合運用可以伺服為:

&lt;http://fossil.kmol.info/cd2021/doc/trunk/index.html&gt;

與

&lt;http://fossil.kmol.info/lab/doc/trunk/index.html&gt;

而這兩個 [Fossil SCM] 倉儲的靜態網頁與 &lt;https://mde.tw/cd2021&gt; 及 &lt;https://mde.tw/lab&gt; 內容保持同步. 且 [Fossil SCM] 的靜態網頁可以直接將網址中的 trunk (表示為最新版本) 換為 [Fossil SCM] 倉儲內容的對應版本號, 就可以直接顯示各舊版本的靜態網頁內容, 這一個功能至今連 &lt;https://pages.github.com/&gt; 或 &lt;https://docs.gitlab.com/ee/user/project/pages/&gt; 都還無法直接在網際介面中完成.

[Fossil SCM] open, add 與 commit
----

之前已經提過, 建立 [Fossil SCM] 倉儲的方法:

fossil init cd2021.fossil

而這個指令若直接在 /home/user/repository/ 目錄中執行, 則可以建立 cd2021.fossil 空倉儲.

這裡的規劃是將這些倉儲以 fossil open 指令, 在 /home/user/repository/wd 目錄中設法展開內容, 而且以倉儲的名稱作為展開後的目錄, 並將展開內容置入.

例如:

/home/user/repository/cd2021.fossil 可以透過:

在 /home/user/repository/wd/cd2021/ 目錄中執行 fossil open ./../../cd2021.fossil 而將內容展開.

而 /home/user/repository/lab.fossil 則在 /home/user/repository/wd/lab 目錄中展開內容.

若從 Github 以:

git clone --recurse-submodules https://github.com/mdecourse/cd2021.git 

將 cd2021 倉儲內容取下, 而且放入 /home/user/repository/wd/cd2021/ 目錄中.

使用者就可以在 /home/user/repository/wd/cd2021/ 目錄中執行:

fossil add .

fossil commit -m "add cd2021 git repository content"

則 [Fossil SCM] 會將 /home/user/repository/wd/cd2021/ 已經改版的內容壓進 /home/user/repository/cd2021.fossil 倉儲中, 並透過 [Fossil SCM] http 將靜態網頁以 project documentation 功能伺服到 &lt;https://fossil.kmol.info/cd2021/doc/trunk/index.html&gt;.

而根據網站內容, 必須將 https://fonts.googleapis.com 放入 settings - default-csp 設定欄位中, [Fossil SCM] doc 網站才會允許 default-csp 設定的網站進行跨網站擷取所需的資料.

採取相同的操作步驟, 就可以將 &lt;https://mde.tw/lab&gt; 網站資料同步至 &lt;http://fossil.kmol.info/lab/doc/trunk/index.html&gt;

[stunnel]: https://www.stunnel.org/</t>
<t tx="yen.20210612081616.108"></t>
<t tx="yen.20210612081616.109"></t>
<t tx="yen.20210612081616.110"></t>
<t tx="yen.20210612081616.111"></t>
<t tx="yen.20210612081616.112">@language md
---
Title: Fossil SCM 與 Github 整合
Date: 2021-02-12 11:00
Category: Weblog
Tags: 202102
Slug: fossil-scm-and-github-integration
Author: yen
---

請注意: &lt;http://fossil.kmol.info&gt; 僅支援 IPv6 網路協定.

為了實際了解 [Fossil SCM] 與 Github 的同一倉儲內容資料, 應該如何整合, 特別建立了一個 fosgit 倉儲作為測試.

[Fossil SCM]: https://www.fossil-scm.org

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20210612081616.113">一開始, 利用 &lt;https://github.com/mdecourse/cmstemplate&gt; 作為樣板, 建立一個 &lt;https://github.com/mdecourse/fosgit&gt; 倉儲, 並且分別在 Ubuntu 與 Windows 10 中進行操作, 目標是分別利用 [Fossil SCM] 與 Github 管理 &lt;https://mde.tw/fosgit&gt; 與 &lt;http://fossil.kmol.info/fosgit/doc/trunk/index.html&gt; 兩個網站的對應倉儲.

建立 fosgit 倉儲
----

在 Github 登入後, 新增 fosgit 倉儲時, 在上方 template 選單, 選擇以 &lt;https://github.com/mdecourse/cmstemplate&gt; 作為 template, 意即要直接利用 CMSiMDE 建立一個動態網站與靜態網站, 名稱為 fosgit.

完成後的倉儲位於 &lt;https://github.com/mdecourse/fosgit&gt;, 透過 Github 的設定將 main 分支設為 Github Pages 的 root, 接著就可以設法將倉儲以:

git clone --recurse-submodules https://github.com/mdecourse/fosgit.git

取下倉儲資料到 Ubuntu 或 Windows 10 操作系統中, 之所以需要使用 --recurse-submodules 選項的原因是 cmstemplate 倉儲帶有子模組, 使用者可以直接透過上述指令取下包含子模組的倉儲所有資料.

Ubuntu 端操作
----

由於 fosgit 倉儲在 [Fossil SCM] 端希望透過 &lt;http://fossil.kmol.info/fosgit&gt; 進行管理, 為了方便, 可以直接以 ssh 登入 fossil.kmol.info 主機進行操作.

首先就是在 /home/user/repository/ 目錄中, 以  fossil init fosgit.fossil 建立 fosgit.fossil 空的倉儲檔案.

接著進入 /home/user/repository/wd/ 目錄中, 以 git clone --recurse-submodules https://github.com/mdecourse/fosgit.git 將 Github 端的倉儲 clone 至 /home/user/repository/wd/fosgit 目錄.

Fossil SCM .fslckout
----
由於 Ubuntu [Fossil SCM] 倉儲的內容存在 .fslckout 檔案中, 因此  /home/user/repository/wd/fosgit 目錄中雖然已經有與 Github 遠端倉儲對應的 .git 目錄, 但還需要能與 &lt;http://fossil.kmol.info/fosgit&gt; 對應的 .fslckout, 為了取得此一資料檔案. 可以進入 fossil.kmol.info 主機中的 /home/user/repository/ 目錄, 以 fossil init fosgit.fossil 建立, 隨後則進入 /home/user/repository/wd/fosgit 目錄執行 fossil open ./../../fosgit.fossil, 將 fosgit.fossil 對應的 .fslckout 放入  /home/user/repository/wd/fosgit 目錄.

這時, 因為 &lt;http://fossil.kmol.info/fosgit&gt; settings 已經勾選 dotfiles (V), 因此 [Fossil SCM] 倉儲會導入 .git 目錄, 同時 [Fossil SCM] 的版本資料 .fslckout (或隨後的 _FOSSIL_) 也會被 Github 納管.

[Fossil SCM] addremove 指令
----

上述的規劃, 若從 cmsimde/ 目錄中執行 python wsgi.py, 可以在近端對倉儲內容作變更, 其中可能包括刪除倉儲中的某些檔案. 這時若要讓系統自動將已經刪除的檔案納入版次管理, 可以使用 [git addremove] 指令.

[git addremove]: https://fossil-scm.org/home/help/addremove</t>
<t tx="yen.20210612081616.114"></t>
<t tx="yen.20210612081616.115"></t>
<t tx="yen.20210612081616.116"></t>
<t tx="yen.20210612081616.117"></t>
<t tx="yen.20210612081616.118">@language md
---
Title: 2021 Spring 課程規劃
Date: 2021-02-16 11:00
Category: Weblog
Tags: 202102
Slug: 2021-spring-course-planning
Author: yen
---

請注意: &lt;http://fossil.kmol.info&gt; 僅支援 IPv6 網路協定.

每年的 Spring [KMOLab] 共開兩門課程, 網際內容管理與協同產品設計實習, 基本的課程規劃仍以承接 Fall 的計算機程式及電腦輔助設計實習為主.

[Fossil SCM]: https://www.fossil-scm.org
[Github]: https://github.com/
[Gitlab]: https://gitlab.com/
[Heroku]: https://www.heroku.com/
[Blogger]: https://www.blogger.com/
[KMOLab]: http://mde.tw

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others
</t>
<t tx="yen.20210612081616.119">重新導入 [Fossil SCM]
----

2021 年除了使用各種免費雲端儲存空間與分散式版次管理系統外, 特別又將能簡易配置在自架伺服器上的 [Fossil SCM] 拿了出來. 主要原因是 [Fossil SCM] 在功能提升與 IPv6 的環境下已經有大幅進步. 因此各種課程相關資料除了放在 [Github], [Gitlab] 與 [Heroku] (只限存 500 MB), 也將同步存入近端工作站室中的實體或虛擬主機 [Fossil SCM] 系統中. (例如: &lt;http://mde.tw/cd2021&gt; 與 &lt;http://fossil.kmol.info/cd2021/doc/trunk/index.html&gt; 為同步資料, 其倉儲分別為 &lt;https://github.com/mdecourse/cd2021&gt; 與 &lt;http://fossil.kmol.info/cd2021&gt;)

五專部網際內容管理課程規劃
----

Spring 的網際內容管理課程分別開設在五專一精密機械工程科與四技一機械設計工程系, 因為五專一是高中一年級入學的下學期課程, 上學期只上過計算機概論, 因此五專的網際內容管理課程就從 [Blogger] 的網際內容管理系統導入作為開端.

[Blogger] 是與 Google 帳號整合的 Blog 系統, 而 Blog 則是一種依照發佈時間排序的內容記錄, 五專課程一開始就是要求每一位學員利用學校配發的"學號@gm.nfu.edu.tw"建立自己的網際內容管理課程網誌, 並且將上學期的計算機概論課程摘要一一紀錄, 除了讓學員熟悉如何使用 [Blogger] 之外, 也讓學員能夠多多練習英文與中文打字, 尤其是除了中文注音輸入之外, 至少再學一套較有未來性的中文輸入法.

五專的網際內容管理系統除了 [Blogger] 之外, 將從如何整理各學員的 [Blogger] 網際連結切入, 讓學員對於 [HTML] 與 [全球資訊網] 能有初步認識, 其中將會包含如何利用 [CMSiMDE] 在  [Github] , [Gitllab], [Heroku] 與 [Fossil SCM] 中建立個人課程網頁系統. 並且讓學員逐步熟悉電腦與網路的設定與應用, 同時透過 Windows 10 64 位元操作系統上的可攜程式環境, 讓學員了解英文與程式應用的重要性.

四技部網際內容管理課程規劃
----

四技部的網際內容管理, 除了包含上述五專部的課程內容之外, 將要從 [nfulist] 程式的架構導入, 讓學員應用近端與雲端程式擷取學校教務主機中的資料. 其次還希望各學員能夠在自己的電腦上配置學校所能取得的合法 CAD 與 CAE 套件, 並且有能力採用網際程式 API 的模式延伸這些封閉套件的功能, 至少有能力可以根據 &lt;http://mde.tw/cad2020/content/HW1_SW.html&gt; 的導引, 結合初步的網際協同程式 &lt;https://github.com/mdecourse/cd2020pj1&gt;, 開發各種與機械協同設計相關的網際延伸應用, 或者設法[改寫 CMSiMDE].

協同產品設計實習課程規劃
----

2021 年的協同產品設計實習所採用的規劃是三段式協同的步驟, 從兩人一組, 四人一組到最後八人一組的設計流程, 讓各學員實際了解協同設計的基本元素是人, 工具與時間, 傳統的設計工具若沒有網路的串連, 較難產生同步協同效益, 但是網路與同步協同模式也帶來許多問題.

2020 年的疫情讓全球各企業許多員工被迫必須[在家上班], 而 work from home 的模式包含協同產品設計流程中的同步與非同步協同, 幾乎所有的成員溝通都必須透過網路與視訊工具達成. (例如: &lt;http://mde.tw/cd2020/content/Covid-19.html&gt; 與 &lt;http://mde.tw/cd2020/content/Online%20course.html&gt;), 而這個學期的協同產品設計實習重點除了 [Onshape], [Coppeliasim], [Webots] 與 [Fossil SCM] 外, 也將納入 [Ethercalc] 的 [API 應用] 以及 [Jitsi] 視訊會議系統的使用.

[HTML]: https://developer.mozilla.org/zh-TW/docs/Learn/Getting_started_with_the_web/HTML_basics
[全球資訊網]: https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91
[CMSiMDE]: https://github.com/mdecourse/cmsimde
[nfulist]: https://github.com/mdecourse/nfulist
[改寫 CMSiMDE]: http://mde.tw/wcm2021/content/CMSiMDE.html
[在家上班]: https://en.wikipedia.org/wiki/Telecommuting
[Onshape]: https://onshape.com
[Coppeliasim]: https://www.coppeliarobotics.com/
[Webots]: https://cyberbotics.com/
[Ethercalc]: https://github.com/audreyt/ethercalc
[API 應用]: http://mde.tw/cd2021/content/Programming.html
[Jitsi]: https://meet.pdis.tw/
</t>
<t tx="yen.20210612081616.12"></t>
<t tx="yen.20210612081616.120"></t>
<t tx="yen.20210612081616.121"></t>
<t tx="yen.20210612081616.122"></t>
<t tx="yen.20210612081616.123"></t>
<t tx="yen.20210612081616.124">@language md
---
Title: 2021 Pelican 設定修改
Date: 2021-02-19 11:00
Category: Weblog
Tags: 202102
Slug: 2021-kmolab-pelican-setup-modification
Author: yen
---

請注意: &lt;http://fossil.kmol.info&gt; 僅支援 IPv6 網路協定.

利用 [Leo Editor] 開啟 [CMSiMDE] 中的 config/pelican.leo, 然後利用 control + i 插入一個新的節點, 將節點標題改為 @clean 20210219.md, 表示要利用 @clean 指令在 markdown 目錄中新增一個 20210219.md 的 Markdown 格式檔案.

[Fossil SCM]: https://www.fossil-scm.org
[Github]: https://github.com/
[Gitlab]: https://gitlab.com/
[Heroku]: https://www.heroku.com/
[Blogger]: https://www.blogger.com/
[KMOLab]: http://mde.tw
[Leo Editor]: https://leoeditor.com/
[CMSiMDE]: https://github.com/mdecourse/cmsimde
[Pelican Blog]: https://blog.getpelican.com/

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20210612081616.125">接著從先前的網誌中複製網誌文章的標頭格式資料, 修改標題與日期, 並且留意 slug 中必須要採用唯一的檔案名稱, 然後就可以先寫網誌的摘要, 之後再利用 @others 標註將隨後子節點中的內文區全部整合到 20200219.md 檔案中.

然後就可以開始寫特定主題的網誌內容.

slug 名稱必須唯一
----

假如你曾經見過網路上的網路文章除了英文標題外, 隨後還有一串不短的數字, 這一串數字就是與前面的文章主題結合, 然後可能用做該文章儲存的檔案名稱, 主要用來確認該主題加上數字的字串在系統中具有唯一性.

所謂同步
----

其實在各網誌間的所謂同步, 並非及時同步, 而是在各種可能的情況下儘量讓多方的資料內容保持相同. 那麼在完全同步之間的影響因素就是時間, 因為將資料從一系統轉到另一個系統需要時間. 以 [CMSiMDE] 上的 [Pelican Blog] 轉到 [Blogger], 需要在 [Leo Editor] 以程式按鈕執行, 而實際操作過程需要將滑鼠停留在網誌文章節點, 然後點擊新增 [Blogger] 或編輯 [Blogger] 的程式按鈕, 一旦 [Pelican Blog] 的網誌文章正確存入對應的 [Blogger] 系統後, [Blogger] 會傳回 blog id, 並且透過程式安排將此一 blog id 存為該網誌文章的子節點標題, 而且是沒有內容的文章標題, 因此這些用來標註所屬 [Blogger] 與 blog id 的資料並不會影響 @others 導入子節點文章內容的功能.

由於目前的程式只會從網誌文章的最後一個節點存取 blog id, 因此若將同一篇網誌文章同步公開到多麼 [Blogger], 新增或編輯時除了要注意滑鼠是否停留在文章主節點外, 還必須在新增與編輯過程手動搬遷這些 blog id.
</t>
<t tx="yen.20210612081616.126"></t>
<t tx="yen.20210612081616.127"></t>
<t tx="yen.20210612081616.128"></t>
<t tx="yen.20210612081616.129"></t>
<t tx="yen.20210612081616.130">@language md
---
Title: 2021 工作流程
Date: 2021-02-22 11:00
Category: Weblog
Tags: 202102
Slug: 2021-kmolab-prefered-working-flow
Author: yen
---

請注意: &lt;http://fossil.kmol.info&gt; 僅支援 IPv6 網路協定.

2021 年起的工作流程已經逐步確立, 其中為了因應 G Suite for Education 改名為 Google Workspace for Education 後, 免費的 GDrive 已經不再提供 unlimited 使用, 因此 @gm 上的儲存空間將只提供當學期所使用的下載服務.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20210612081616.131">其實在網際網路上, 本來就沒有免費使用的服務, 差別只在於連線上網過程所使用的各種資源, 到底是誰在付出代價?

2018 年起 [KMOLab] 所開設的課程已經全面使用 [CMSiMDE] 建立動態與靜態網站, 其中的動態網站主要用於近端或網際的網站內容編輯, 而靜態網站則使用  [Github], [Gitlab], [Heroku] 與 [Fossil SCM] 進行同步伺服, 意即每一個與 [KMOLab] 有關的課程內容資料, 遠端可以有四個同步備份, 而近端則是工作目錄所在電腦, 則可以具有與遠端版本相同或相近的多個分散式備分內容.

雲端的同步資料中只有 [Heroku] 可以執行 Python, 但能夠免費使用的總容量限制在 500 MB 以內, 因此大多僅用於 Python 網際程式開發測試或跳板之用.

至於 [Github] 與 [Gitlab] 的競爭其實已經告一段落, 等塵埃落定, 勝出的一方將會與 Google 蹲點 10 年的 GDrive 商品一樣 (2012-2022), 不再提供用來打擊對手的優渥免費教育使用方案.

這樣的認知其實在受到 [Openshift] 中途拆免費使用者的台之後, 相比之下, GDrive 仍然維持每個帳號大約 15GB 的免費儲存量, 好像已經厚道, 但, 真正的原因可能是: 普羅大眾的網際儲存大數據, 仍然具有價值.

期望 [Github] 不要改變使用方針
----

以目前的情況來看, [Github] 對於上課專用的小 project, 在  2026 年之前免費存放 50 MB (目前的 limit 為 100MB) 以下的檔案, 然後總倉儲容量不要超過 1 GB ([Github] 目前[最大容忍量]為 5GB), 應該沒有太大問題, 另外一個限制則是每個目錄下最多只能有 1000 個檔案.

[KMOLab] 建立倉儲可以將 &lt;https://github.com/mdecourse/cmstemplate&gt; 當作 template 直接建立靜態網站與動態網站, 其中的靜態網站以 Github Pages 建立, 而動態網站則需要 Python 3 加上 flask flask_cors lxml bs4 markdown pelican leo 等模組.

針對將 [Github] 中的倉儲同步至 [Gitlab], 也同時要啟用 Gitlab Pages, 則倉儲中額外需要 &lt;https://raw.githubusercontent.com/mdecourse/cad2020/master/.gitlab-ci.yml&gt; 進行設定. 而雙方倉儲的同步設定位於近端, 可以利用 git remote add 指令輕易達成, 一般是將推送到 [Gitlab] 的 git remote add 名稱設為 gitlab, 只要提交推送至 [Github] 後, 以 git push gitlab 就可以將同步資料的版本送到 [Gitlab].

至於將靜態網站資料送到 [Heroku] 的設定, 則是透過 &lt;https://github.com/mdecourse/cad2020/blob/master/index.php&gt; 將倉儲的靜態內容以 PHP 伺服進行跳址傳送.

同步至 [Fossil SCM] 倉儲
----

將 [Github] 倉儲同步至 [Fossil SCM] 倉儲的目的, 其實就是考量若上述三個免費雲端儲存服務都面臨停用後, 在只有自架主機的情況下, 可以只使用 [Fossil SCM] 管理版本資料, 或者自行安裝 &lt;https://gitlab.com/gitlab-org/gitlab&gt;, 仍然可以在近端主機或遠端主機環境下的 [Fossil SCM] 與 [Gitlab] 倉儲維持與先前相同的工作流程.f

在此為了避免 [Github] 與 [Fossil SCM] 倉儲雙向同步下, 可能造成 __FOSSIL__ 或 .fslckout 檔案的合併問題, 特別讓 [Fossil SCM] 倉儲保有 [Github] 倉儲的版本資料 (也就是 .git 目錄內容), 但 [Github] 倉儲則不儲存 __FOSSIL__ 或 .fslckout 檔案.

實際的作法是以 [Github] 倉儲中的改版為主, 在 [Fossil SCM] 倉儲端僅透過 git pull 取得最新的 [Github] 倉儲內容, 然後再勾選 [Fossil SCM] 倉儲端設定的 dotfiles 選項, [Fossil SCM] 倉儲就能納入 [Github] 倉儲的版本資料.

基本的操作流程如下:

github 利用 cmstemplate 建立 [CMSiMDE] 倉儲
github 端完成靜態 Github Pages 設定
fossil 端, 在對應的 wd 目錄, 以 git clone --recurse-submodules 取下 github 端的倉儲內容
fossil 端 wd 中設法利用 fossil open 開啟從 fossil init 所建立的 fossil 倉儲
將 fossil 空白的 __FOSSIL__ 或 .fslckout 檔案複製至 wd/倉儲名稱目錄下
利用 fossil add . 或 fossil addremove 將 git pull 從遠端取回的版本資料進行新增
再利用 fossil push 與 autosync 功能, 將改版資料送到 fossil 端.
最後則將 fossil 端的 default-csp 欄位設為 https://fonts.googleapis.com, 以便讓靜態網頁可以正常透過 doc/trunk/index.html 取得.



[最大容忍量]: https://docs.github.com/en/github/managing-large-files/what-is-my-disk-quota
[Fossil SCM]: https://www.fossil-scm.org
[Github]: https://github.com/
[Gitlab]: https://gitlab.com/
[Heroku]: https://www.heroku.com/
[Blogger]: https://www.blogger.com/
[KMOLab]: http://mde.tw
[Leo Editor]: https://leoeditor.com/
[CMSiMDE]: https://github.com/mdecourse/cmsimde
[Pelican Blog]: https://blog.getpelican.com/
[KMOLab]: http://mde.tw
[Openshift]: https://en.wikipedia.org/wiki/OpenShift

</t>
<t tx="yen.20210612081616.132"></t>
<t tx="yen.20210612081616.133"></t>
<t tx="yen.20210612081616.134"></t>
<t tx="yen.20210612081616.135"></t>
<t tx="yen.20210612081616.136">@language md
---
Title: 2021 nuklear
Date: 2021-02-24 11:00
Category: Weblog
Tags: 202102
Slug: 2021-kmolab-using-nuklear
Author: yen
---

[Nuklear] 是一套以 C 建立的 GUI 套件, 這裡希望透過 [Msys2] 導入. 所完成的程式可以在 Windows 10 與 Ubuntu 中執行.

[Nuklear]: https://github.com/Immediate-Mode-UI/Nuklear
[Msys2]: https://www.msys2.org/

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20210612081616.137">安裝 nuklear
----

從 [Nuklear] 取得 nuklear.h 放入 Y:\msys64\mingw64\include 目錄便完成安裝.

Msys2 加裝 glew 與 glfw
----

啟動 Y:\msys64\mingw64.exe, 然後執行:

pacman -S mingw-w64-x86_64-glew

pacman -S mingw-w64-x86_64-glfw

直接進入 Y:\tmp\Nuklear\demo\glfw_opengl2, 以

gcc main.c -std=c99 -pedantic -O2 -o demo.exe -lglfw3 -lopengl32 -lm -lGLU32

建立 demo.exe 配合 Y:\msys64\mingw64\bin 目錄中的 glfw3.dll 就可以執行.

若是在 IPv6 協定機器中, pacman 安裝需要透過 proxy server, 可在  Y:\msys64\etc\wgetrc 中以

https_proxy = http://[2001:288:6004:XX::69]:3128/
http_proxy = http://[2001:288:6004:XX::69]:3128/
ftp_proxy = http://[2001:288:6004:XX::69]:3128/

進行設定.</t>
<t tx="yen.20210612081616.138"></t>
<t tx="yen.20210612081616.139"></t>
<t tx="yen.20210612081616.14"></t>
<t tx="yen.20210612081616.140"></t>
<t tx="yen.20210612081616.141"></t>
<t tx="yen.20210612081616.142">@language md
---
Title: 2021 cmsimde 修改
Date: 2021-03-06 11:00
Category: Weblog
Tags: 202103
Slug: 2021-kmolab-cmsimde-modification-add-three-bats
Author: yen
---

[cmsimde] 由 [KMOLab] 編寫, 是一套用於課程教學使用的網際內容管理系統, 從 2013 年底起配合各相關課程的內容與教學進度拼湊而成. 原始的內容分頁方式採自 [cmsimple], 也就是利用 content.htm 中的 H1~H3 標註分頁, 經過多年的修修改改, 其中納入 [Pelican] 與 [Reveal.js] 的應用. 

[cmsimde]: https://github.com/mdecourse/cmsimde
[KMOLab]: http://mde.tw
[cmsimple]: https://www.cmsimple.org/en/
[Pelican]: https://blog.getpelican.com/
[Reveal.js]: https://revealjs.com/


&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20210612081616.143">由於使用過程牽涉動態網站與靜態網站的分散式版次管理, 使用者必須在命令提示字元中進出 cmsimde 目錄, 因此經常造成初學者弄亂倉儲中 [cmsimde] 子模組的版次, 而無法讓 [Github Pages] 中的靜態網頁正常轉檔. 這時可以採[刪除重建子模組] ([操作影片]) 或[重新 checkout cmsime 版本] 的方式進行修正. 有鑑於學員發生錯誤的次數實在太多, 因此促成本次的 [cmsimde] 用法修改.

[Github Pages]: https://pages.github.com/
[刪除重建子模組]: http://mde.tw/cad2020/content/W5Video.html
[操作影片]: https://drive.google.com/file/d/1TvkSOMRAUaGE4xL2b_5xOb4xbm8O_pi0/view
[重新 checkout cmsime 版本]: http://mde.tw/cp2020/content/cmsimde%20%E5%95%8F%E9%A1%8C.html

在倉儲目錄開啟動態網站
----

要修正上述使用者可能在 cmsimde 子模組目錄進行倉儲改版推送所造成的問題, 就是不需要讓使用者以命令列進出 cmsimde 目錄, 只要使用者是透過 [cmstemplate], 以 [Github] [template] 功能建立倉儲, 就無需處理 git submodule add 指令與 up_dir 目錄內容的複製. 或許就能避開上述可能造成的問題.

要讓使用者在倉儲目錄開啟 [cmsimde] 動態網站, 只需要新增一個 cms.bat, 內容為:

&lt;pre class="brush=js"&gt;
python cmsimde/wsgi.py
&lt;/pre&gt;

但由於是在倉儲目錄中執行此一 batch file, 所以用來建立 https 數位簽章用的 localhost.crt 與 localhost.key 檔案必須透過下列 portablegit/bin/sh.exe Shell 指令完成:

&lt;pre class="brush: javascript"&gt;
openssl req -x509 -nodes -days 365 -newkey rsa:4096 -keyout localhost.key -out localhost.crt
&lt;/pre&gt;

也就是 localhost.crt 與 localhost.key 必須從 cmsimde 子模組的根目錄移至 up_dir 目錄中, 並且也將 cms.bat 放入 up_dir 目錄.

另外又建立 up.bat 用於手動以 git submodule add 時, 必須將 up_dir 目錄內容複製至倉儲根目錄的流程:

&lt;pre class="brush: javascript"&gt;
@echo off
robocopy up_dir ./../ /E
&lt;/pre&gt;

最後針對採 openssh 對 [Github] 推送的需要 (無需輸入使用者的帳號與密碼), 建立一個 acp.bat (Add, Commit, Push):

&lt;pre class="brush: javascript"&gt;
echo off
set message=%1
git add .
git commit -m %message%
git push
&lt;/pre&gt;

執行時只需要將提交訊息字串放在 acp.bat 執行指令後面即可.

[cmstemplate]: https://github.com/mdecourse/cmstemplate
[Github]: https://github.com/
[template]: https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-template-repository</t>
<t tx="yen.20210612081616.144"></t>
<t tx="yen.20210612081616.145"></t>
<t tx="yen.20210612081616.146"></t>
<t tx="yen.20210612081616.147"></t>
<t tx="yen.20210612081616.148">@language md
---
Title: 2001年讀書心得
Date: 2021-03-06 12:00
Category: Weblog
Tags: 202103
Slug: 2021-kmolab-wth-is-this
Author: yen
---

現在還寫得出這種文章嗎?哈!! 當然不行, 絕對不可能!!

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20210612081616.149">2001 年在當時校長要求全校一級主管寫的大學教育政策白皮書讀後心得報告

科技大學的本質在教導學生獲得知識的能力，二十一世紀知識經濟最大的特色，在於必須將知識迅速化為商品，由於市場全球化的影響，未能即時將本身所擁有的知識，快速轉化為商品，並被市場接受的企業，終將難逃被時代淘汰的命運，企業如此，教育界也正面臨同樣的挑戰。

教育部將大學的競爭力，視為國家競爭力的重要指標，全國各大學面對社會多元化的需求與全民終身學習的發展趨勢，如何在「大學教育政策白皮書」的基本方針下，強化各校的競爭力，建立各校的重點特色，便成為各大學今後所賴以生存的重要關鍵。

事實上，「大學教育政策白皮書」中所提到的觀點，或許是台灣一般大學與科技大學所共同面臨的問題，但，就基本體制上，仍然要有所區分，方能貫徹彼此的教育目標，為社會的現在與未來，提供充足的人力資源。吾人以為，一般大學的最高目標在追求學術的卓越，而科技大學則必須掌握技術的領先，學術強調的是其具備未來的主導性，卓越的學術指的是高瞻遠矚，是未來有用的技術；而技術的領先是要培養能馬上為企業所用的科技尖兵，是能馬上將知識轉化為商品的創新發明家。也許，隨著科技進化的速度日益增快，學術與技術的區隔，也就變得越來越小，但一般大學與科技大學應有的角色與定位，仍不失為各大學爭取重點特色時，所應強調的重點。

最後，談到本校在通過改名為科技大學後，如何在「大學教育政策白皮書」的指導方針下，爭取市場定位，並積極發展出屬於自己的特色，吾人以為，必須要先從小處做起，慢慢往大處做；必須要先由內做起，然後再漸漸往外落實。小處在哪裡，必須先用科學化與合理化來管理學校的每一個角落，然後才能談替企業診斷，為財團解憂。必須要先在校內建立起知識經濟的體系，然後才有可能與社會上全民學習的脈動相結合。未來，全球化經濟發展的趨勢或許很難臆測，但本校單類多科的包袱，如何逐步轉化為本校的重點特色，將是一項嚴酷的考驗，成敗的關鍵，就看現在。</t>
<t tx="yen.20210612081616.150"></t>
<t tx="yen.20210612081616.151"></t>
<t tx="yen.20210612081616.152"></t>
<t tx="yen.20210612081616.153"></t>
<t tx="yen.20210612081616.154">@language md
---
Title: 機械還能唸嗎?
Date: 2021-04-27 11:00
Category: Mechanical
Tags: 202104
Slug: 2021-kmol-about-mechanical-engineering
Author: yen
---

許多人都在問: 機械這個領域還能唸嗎?

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others
</t>
<t tx="yen.20210612081616.155">答案是: 能, 但不是像現在用大量課程轟炸式的唸法, 而應該是解題導向式的唸法, 應該是大量注入電腦科技, 網路技術, 讓年輕人及早了解各種理論實際用途的唸法.

辦得到嗎? 可以, 但是工程學院必須不分系才行, 每個既有科系的課程與研究團隊, 必須跟餐廳裡的自助攤位一樣, 各自端出最具專長的教學, 讓負責解題的學生自行組合.

學生想要設計一台自行車, 從腳踏改為電動, 再加上太陽能, 下坡自動充電, 可以上路擷取路面實況與環境影像, 回到室內可以採虛擬或擴增實境模式, 成為運動健身器材. 過程中所需要的零組件都能從學校的福利材料部門中簽單領取. 上課時則針對整體設計製造所牽涉的原理進行協同研討......

哈哈! 不要作夢了! 

</t>
<t tx="yen.20210612081616.156"></t>
<t tx="yen.20210612081616.157"></t>
<t tx="yen.20210612081616.158"></t>
<t tx="yen.20210612081616.159"></t>
<t tx="yen.20210612081616.16"></t>
<t tx="yen.20210612081616.160">@language md
---
Title: 都是中文模式惹的禍
Date: 2021-05-11 11:00
Category: Error
Tags: 202105
Slug: 2021-kmol-all-errors-come-to-using-chinese-mode
Author: yen
---

前幾天有一位學生問, 為甚麼在他的筆電無法開啟 FreeCAD?

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20210612081616.161">原因有二, 其一是將 FreeCAD 解開於中文目錄名稱下, 其二則是使用中文帳號名稱登入 Windows. 只要將這兩個地方改為英文就可以順利開啟 FreeCAD.

另外一個錯誤是, 當使用者在 Windows 10, 處於中文輸入模式下, 首次開啟 Leo Editor 時, 由於 Leo Editor 跳出的視窗等待使用者輸入用戶辨識字串時, 不接受中文輸入, 且按下 shift 希望轉為英文輸入模式時, Leo Editor 會判定使用者無法輸入有效的字串而進入無限迴圈. 

要避開 Leo Editor 在中文模式下無法正確開啟的方法就是, 首次開啟 Leo Editor 時要先將輸入模式調整為英文模式, 如此就可以順利建立 home/.leo/.leoID.txt 必要檔案.



</t>
<t tx="yen.20210612081616.162"></t>
<t tx="yen.20210612081616.163"></t>
<t tx="yen.20210612081616.164"></t>
<t tx="yen.20210612081616.165"></t>
<t tx="yen.20210612081616.166">@language md
---
Title: 可攜程式系統製作
Date: 2021-05-24 11:00
Category: Portable
Tags: 202105
Slug: 2021-kmol-portable-programming-system
Author: yen
---

每隔一段期間, 都要重新根據最新版本製作 Windows 環境的可攜程式系統. 這裡紀錄一下詳細的製作過程.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20210612081616.167">安裝 gcc
----

因為 [msys2] 所下載的 .exe 檔案無法直接解開壓縮, 必須透過安裝才可以取得 [msys2] 的基本系統檔案. 而目前所下載配置的是 20210419 的版本. 根據網路上 [msys2 說明], 基本的 C++ 編譯環境, 可以啟動 mingw64.exe 後, 利用:

&lt;pre class="brush: jscript"&gt;
pacman -Syu

pacman -Sy

pacman -S mingw-w64-x86_64-toolchain
&lt;/pre&gt;

安裝 [msys2] 環境下的 gcc 系統.

可攜啟動批次檔案
----

&lt;pre class="brush: jscript"&gt;
@echo off
set Disk=y
subst %Disk%: "data"

%Disk%:

set HomePath=%Disk%:\home_ipv6
set HomeDrive=%Disk%:\home_ipv6
set Home=%Disk%:\home_ipv6
set USERPROFILE=%Disk%:\home_ipv6

REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"

set PYTHONPATH=%Disk%:\Python395\DLLs;%Disk%:\Python395\Lib;%Disk%:\Python395\Lib\site-packages;
set PYTHONHOME=%Disk%:\Python395

REM for putty
set GIT_SSH=%Disk%:\putty\plink.exe

REM for Java and Android SDK
set java_home=%Disk%:\java\jdk8u222-b10
set ANDROID_SDK_home=%Disk%:\home_ipv6
set GRADLE_USER_home=%Disk%:\home_ipv6
set ANDROID_SDK_ROOT=%Disk%:\android\sdk
set ANDROID_Home=%Disk%:\android\sdk
set REPO_OS_OVERRIDE=windows

REM for Range3
REG IMPORT %Disk%:\range3.reg

REM 設定跟 Python 有關的命令搜尋路徑
set path_python=%Disk%:\Python395;%Disk%:\Python395\Scripts;
REM 設定跟Git 有關的命令搜尋路徑
set path_git=%Disk%:\portable_2.31.1\bin;
REM 設定 msys2 64 位元的執行路徑
set path_msys2=%Disk%:\msys64_20210419\mingw64\bin;
REM set for LaTeX
set path_miketex=%Disk%:\miktex-portable\texmfs\install\miktex\bin\x64;
REM Flutter path
set path_flutter=%Disk%:\flutter\bin;%java_home%\bin;%Disk%:\Android\sdk;%Disk%:\Android\sdk\tools;%Disk%:\Android\sdk\tools\bin;%Disk%:\Android\sdk\emulator;%Disk%:\Android\sdk\platform-tools;%Disk%:\flutter\bin\cache\dart-sdk\bin;%Disk%:\vscode;
set path_node=%Disk%:\node-v14.15.4-win-x64;
set path_tcc=%Disk%:\tmp\tcc\win32;
rem set path_tcc=%Disk%:\tcc;
set path_heroku=%Disk%:\heroku\bin;
set path_postgresql=%Disk%:\postgresql13\bin;
set path_range=%Disk%:\Range3\bin;
set path_lua=%Disk%:\lua-5.4.3\;

REM 加入 PostgreSQL 所需的環境變數設定

@SET PGDATA=%Disk%:\postgresql13\data
@SET PGDATABASE=postgres
@SET PGUSER=postgres
@SET PGPORT=5432
@SET PGLOCALEDIR=%Disk%:\postgresql13\share\locale

REM for heroku login
REM can not use with fossil scm
REM set HTTP_PROXY=http://kmolab:kmolab10@a.kmol.info:3128
REM set HTTPS_PROXY=http://kmolab:kmolab10@a.kmol.info:3128

path=%Disk%:;%path_python%;%path_git%;%path_msys2%;%path_miketex%;%path_flutter%;%path_node%;%path_tcc%;%path_heroku%;%path_postgresql%;%path_range%;%path_lua%;%path%;

start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe

start /MIN %Disk%:\wScite502\SciTE.exe
start /MIN %Disk%:\wScite502\SciTE.exe

Exit
&lt;/pre&gt;

可攜關閉批次檔
----

&lt;pre class="brush: jscript"&gt;
@echo off
set Disk=y
path=%PATH%;

taskkill /IM python.exe /F
taskkill /IM pythonw.exe /F
taskkill /IM adb.exe /F
taskkill /IM scite.exe /F
taskkill /IM range.exe /F

REM 終止虛擬硬碟與目錄的對應
subst %Disk%: /D
REM 關閉 cmd 指令視窗
taskkill /IM cmd.exe /F

EXIT
&lt;/pre&gt;

home_ipv6 目錄
----

為了配合 Windows 尋找隨身程式系統 home_ipv6 目錄下的 Desktop, 因此額外建立此一目錄, 以免 Windows 操作系統跳出警告訊息.

編譯 Lua
----

從 [Lua] 下載原始碼, 解開壓縮後可直接進行編譯:

&lt;pre class="brush: jscript"&gt;
mingw32-make mingw
&lt;/pre&gt;

編譯 SciTE
----

首先必須確認 y:\portable\bin 中 sh.exe 已經改名, 因為 shell 指令將取自 MSYS2 系統中的對應指令.

分別 git clone scite 與 scintilla, 兩個目錄並列.

git clone https://github.com/mirror/scite.git 

git clone https://github.com/mirror/scintilla.git

cd scintilla\win32

mingw32-make

get Scintilla.dll and SciLexer.dll under scintilla\bin

cd scite\win32

mingw32-make

get SciTE.exe under scite\bin

need extra libgcc_s_seh-1.dll, libstdc++-6.dll and libwinpthread-1.dll along with Scintilla.dll and SciLexer.dll to execute SciTE.exe

編譯 Solvespace
----

[Solvespace] 是一套小巧開源的 3D 參數繪圖軟體

編譯 Range3
----

為了 compile Range3, Msys2 除了mingw-w64-x86_64-toolchain 還必須加裝:

pacman -Sy mingw-w64-x86_64-qt5
pacman -Sy mingw-w64-x86_64-qt5-static
pacman -Sy mingw-w64-x86_64-ffmpeg

接著編譯 Range3:

start Y:\msys64\mingw64.exe

cd /y/tmp/range3

./scripts/build.sh --clean &amp;&amp; ./scripts/create_package.sh

而為了讓 svg 格式的 icons 能夠正確顯示, 必須納入 Qt5Svg.dll

安裝 RoboDK
----

[RoboDK] 目前應該是最適合用於工業機械手臂在線與離線模擬的套件.

安裝 CoppeliaSim
----

[CoppeliaSim] 儘管使用授權沒有 [Webots] 寬廣, 但是容量不到 500MB 只有 [Webots] 的 1/5 是其最大的優點.



[CoppeliaSim]: https://www.coppeliarobotics.com/
[Solvespace]: https://github.com/solvespace/solvespace
[RoboDK]: https://robodk.com/
[Lua]: http://www.lua.org/
[msys2]: https://www.msys2.org/
[msys2 說明]: https://michaelchen.tech/windows-programming/mingw-msys/</t>
<t tx="yen.20210612081616.168"></t>
<t tx="yen.20210612081616.169"></t>
<t tx="yen.20210612081616.17"></t>
<t tx="yen.20210612081616.170"></t>
<t tx="yen.20210612081616.171"></t>
<t tx="yen.20210612081616.172">@language md
---
Title: 挖礦者與 Gitlab Pages
Date: 2021-05-31 11:00
Category: Gitlab
Tags: 202105
Slug: 2021-kmol-crypto-miner-and-gitlab-pages
Author: yen
---

現在 是 2021年 5 月的最後一天, 對於許多現代人來說, 往後的日子, 不會再跟之前相同了.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20210612081616.173">2021 年 5 月 14 日 Gitlab 宣布: 由於 CI/CD 受到加密挖礦者的濫用, 即日起新建帳號, 要免費使用連續整合與部署者, 必須先付上信用卡或簽帳卡號付費進行認證.

這項消息代表由於少數人的絕私行為, 讓原先利用這項免費資源產生 Gitlab Pages 的使用者, 通通遭殃.

幾乎在同一時間, Github 也發出許多禁止特定帳號公開存取 Github Pages 的 Flag, 原因是: 利用學號當作帳號的用戶, 被認定是一人申請多個帳號, 疑似違反使用規定.

這些問題恐怕就此斷送許多原先可以免費使用雲端資源的機會, 往後的教育單位若沒有自行扛起這樣的責任, 網際大美好的日子, 應該就此結束, 不會再回來了.

後記: 利用 Pelican 建立 CMSiMDE 中的 blog, 同時利用 Python 與 Leo Editor 將網誌同步到 Blogger, 過程中必須要確定系統已經安裝所需的模組:

pip install google-api-python-client oauth2client

並且 CMSiMDE 中的 pelican.leo 也要讀取 tmp 目錄上的認證檔案.

並且在 Windows 10 安裝 Python 模組時還必須暫時關閉 Web based Proxy 設定, 整個環節只有一點沒有做到, 資料就無法如預期出現在多個網誌系統中.

</t>
<t tx="yen.20210612081616.174"></t>
<t tx="yen.20210612081616.175"></t>
<t tx="yen.20210612081616.176"></t>
<t tx="yen.20210612081616.177"></t>
<t tx="yen.20210612081616.178">@language md
---
Title: 為何需要分散式版次管理系統?
Date: 2021-05-31 12:00
Category: DVCS
Tags: 202105
Slug: 2021-kmol-why-we-need-distributed-version-control-system
Author: yen
---

上過 [KMOLab] 課程的學員應該就知道, 過去幾年由知識管理與最佳化應用實驗室所開列的課程 ,  已經不舉行點狀的考試, 而是透過分散式版次管理系統中的倉儲紀錄與網站內容進行評分.

[KMOLab]: http://mde.tw

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20210612081616.179">學習歷程必須有第三方公證
----

原因很簡單: 各學員歷程的累積帶有時間註記與每次改版的詳細記錄, 從一個倉儲的改版歷程, 可以看出特定學員投入該課程主題的心力, 至於雲端網站內容無遠弗屆, 可以讓任何人從任何地方擷取, 進行學習或引為警惕.

學習歷程的公正性源自第三方的公證, 同一份解題資料出現在同一課程的不同學員倉儲與網頁中, 可以輕易透過電腦程式進行比對, 從建立的時間與內容改版歷程, 判定學習價值的高低. 假如採取點狀的文書報告進行評量, 在缺乏資料創建歷程細節的佐證, 評閱者將會很難分辨內容產生的順序與因果關係.

只有將資料利用雲端分散存放, 才有機會永續
----

分散式版次管理的功能, 不僅在於版次管理, 另外一個目的是將資料分散在不同的雲端主機上, 參與協同的組員每人近端都有一份版本, 而雲端則再同步幾處, 如此可以降低資料在單一主機上丟失的風險.

分散式版次管理應該是使用電腦與網路的基本技能
----

當任何人在 2005 年 Git 與許多能夠免費使用的分散式版次管理系統出現之後, 利用電腦建立第一份文字資料開始, 就應該要使用分散式版次管理來存放歷程資料.



</t>
<t tx="yen.20210612081616.180"></t>
<t tx="yen.20210612081616.181"></t>
<t tx="yen.20210612081616.182"></t>
<t tx="yen.20210612081616.183"></t>
<t tx="yen.20210612081616.184">@language md
---
Title: Github account flagged 之後
Date: 2021-06-07 11:00
Category: github
Tags: 202106
Slug: 2021-kmol-after-github-account-being-flagged
Author: yen
---

目前[KMOLab] 的所有課程都架構在 [Github] 與 [Gitlab] 的網際雲端服務之上, 幾個禮拜前由於大量用戶透過免費的 CI/CD 服務進行數位貨幣挖礦, 導致許多採取學號連號建立的 Github 帳號莫名被禁用, 而 2021.05.14 之後所建立的 [Gitlab] 帳號也必須提供簽帳卡或信用卡號, 經過認證才能使用 CI/CD 服務.

[KMOLab]: http://mde.tw
[Github]: https://github.com
[Gitlab]: https://gitlab.com

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20210612081616.185">面對這個突如其來的事件, 不僅這些被禁用的帳號倉儲無法公開顯示提交歷程 (有些帳號向 [Github] 反應後已經解禁, 但仍有帳號無法解禁), 必須透過 CI/CD 轉為 Github Pages 或 Gitlab Pages 的服務也無法執行. 因此只能在工作站室中的伺服器設法提供類似的服務補救.

自行架構網際伺服器
----

由於在 2017 年, 曾經利用電腦輔助設計室汰換電腦時所移出的許多舊電腦, 執行過 [gogs] 與 [Fossil SCM] 服務, 這時正好可以利用 [gogs] 展開原先推送到 [Github] 的倉儲提交歷程, 而 [Fossil SCM] 伺服器中的 [Project Documentation] 功能則正好可以用來取代 Github Pages, 讓使用者展示倉儲中各版本的靜態網頁.

理論上很簡單, 只要分別下載 [gogs] 與 [Fossil SCM] 的套件, 然後設法找一台虛擬主機安裝配置即可.
但若希望透過程式方法, 幫這許多用戶設定帳號與密碼, 就必須要建立一組網際程式套件, 讓各學員自行登入系統建立所需的帳號或倉儲.

[gogs] 伺服器原本就提供使用者自行註冊帳號的功能, 因此問題較小, 比較大的問題是: [gogs] 好像只支援 IPv4,  因為時間緊迫, 沒有多花時間在這上面, 只能找了一個 IP, 設定符號名稱, 利用 [Stunnel] 與 [Letsencrypt] 讓 [gogs] 伺服器可以採 https 協定上線, 如此使用者就能自行登錄帳號, 將 [Github] 倉儲的提交歷程在 [gogs] 伺服器中展開.

Fossil SCM 網際登錄 app
----

任務解決了一半, 接下來則希望建立一組網際程式, 採用 Google Oauth2 讓使用者透過學校配發的 @gm 帳號登入, 然後自選管理密碼後, [Fossil SCM] 伺服器就能設法配置好能讓使用者提交推送的 [Github] 倉儲, 展示出 [CMSiMDE] 倉儲中的靜態網頁.

初步建立 fossilapp 的流程請參考: &lt;http://mde.tw/cd2021/content/fossilapp.html&gt;.


[gogs]: https://gogs.io/
[Fossil SCM]: https://www.fossil-scm.org
[Stunnel]: https://www.stunnel.org/
[Letsencrypt]: https://letsencrypt.org/
[CMSiMDE]: https://github.com/mdecourse/cmsimde.git
[Project Documentation]: https://www.fossil-scm.org/home/doc/trunk/www/embeddeddoc.wiki</t>
<t tx="yen.20210612081616.186"></t>
<t tx="yen.20210612081616.187"></t>
<t tx="yen.20210612081616.188"></t>
<t tx="yen.20210612081616.189"></t>
<t tx="yen.20210612081616.190"></t>
<t tx="yen.20210612081616.191">@language md
---
Title: 工作站電腦關機
Date: 2021-06-12 11:00
Category: workstation
Tags: 202106
Slug: 2021-kmol-workstation-shutdown
Author: yen
---

早上第二校區斷電一個小時, 稍早已經將所有遠端的電腦通通關機.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20210612081616.192">為什麼沒有 online UPS 設置? 說來話長!</t>
<t tx="yen.20210612081616.193"></t>
<t tx="yen.20210612081616.194"></t>
<t tx="yen.20210612081616.195"></t>
<t tx="yen.20210612081616.196"></t>
<t tx="yen.20210612081616.197">sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt

</t>
<t tx="yen.20210612081616.24"></t>
<t tx="yen.20210612081616.26"></t>
<t tx="yen.20210612081616.27"></t>
<t tx="yen.20210612081616.28"></t>
<t tx="yen.20210612081616.29"></t>
<t tx="yen.20210612081616.31"></t>
<t tx="yen.20210612081616.32"></t>
<t tx="yen.20210612081616.34"></t>
<t tx="yen.20210612081616.35"></t>
<t tx="yen.20210612081616.36"></t>
<t tx="yen.20210612081616.37"></t>
<t tx="yen.20210612081616.38">@language md
---
Title: CMSiMDE 部署
Date: 2020-05-09 11:00
Category: Github
Tags: Deployment
Slug: 2020-lab-get-started
Author: yen
---

[CMSiMDE] 所能伺服的內容包含網站, 網誌與簡報, 而網站又分為動態系統與靜態系統, 動態網站建置主要的目的在方便進行 html 文件的編輯, 而靜態網站系統則主要為了能在一般的 WWW 伺服器上進行部署. 

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others
</t>
<t tx="yen.20210612081616.39">網站
----

[CMSiMDE] 的網站編輯採用 Flask 框架編寫, 目前所需要的模組包含 flask, flask_cors, lxml, bs4 與 markdown. 使用者可以選擇將 [CMSiMDE] 當作 submodule 或者單獨部署在倉儲內容中的 cmsimde 目錄後, 再將 cmsimde 目錄中的 up_dir 目錄內容複製到倉儲主目錄即可.

[CMSiMDE] 倉儲資料包含引擎內容 (也就是 cmsimde 中的資料) 與使用者內容 (也就是 up_dir 中的資料) 等兩類, 許多的網際功能都是配合歷年上課時敲敲打打修改而成, 因此整體架構相當鬆散, 就所謂的網際內容管理功能而言, 只能算勉強堪用, 還有很大的修改空間.

[CMSiMDE]: https://github.com/mdecourse/cmsimde

網誌
----

[CMSiMDE] 的網誌系統採用 [Pelican], 編輯網誌的架構採用 [Leo Editor] 管理, 而網誌專案檔位於 config 目錄中的 pelican.leo.

[Leo Editor] 其實是一套值得大力推廣的整合開發系統與文件編輯器, 但可能因為曲高因此和寡, 真正能夠運用上手的全球用戶, 數量始終偏低. 但是其大綱編輯模式非常適合處理複雜的工程設計流程所產生的各種文字資料, 因此非常希望 Python 新手能夠以看懂 [Leo Editor] 的設計架構與處理問題的細節作為遠大的目標.

[Pelican]: https://github.com/getpelican/pelican
[Leo Editor]: https://github.com/leo-editor/leo-editor

簡報
----

[CMSiMDE] 的網誌簡報採用 [reveal.js]. 而簡報的編輯檔案也是採用 [Leo Editor], 簡報專案位於 config 目錄中的 reveal.leo.

[reveal.js]: https://github.com/hakimel/reveal.js/

網站建構流程
----

[CMSiMDE] 的網站建構流程, 可以從建立初始的 [Github] 倉儲開始. 亦即在 [Github] 建立一個僅含 README.md 檔案的倉儲, 然後 git clone 該倉儲到近端後, 以命令列進入該倉儲後再以 

&lt;pre class="brush: jscript"&gt;
git submodule add https://github.com/mdecourse/cmsimde.git cmsimde
&lt;/pre&gt;

將 [CMSiMDE] 倉儲內容納為子模組, 且命名為 cmsimde 目錄. 接下來將 cmsimde 目錄中, 名稱為 up_dir 的目錄內容, 複製到倉儲的根目錄中. 若近端隨身系統或操作系統已經安裝 Python3 與相應的 flask, flask_cors, lxml, bs4, markdown 等模組後, 就可以在命令列中, 進入 cmsimde 子目錄, 以:

&lt;pre class="brush: jscript"&gt;
python wsgi.py
&lt;/pre&gt;

 假如是在 OS X 或 Linux 操作系統, 則必須使用 Python 3 指令:
 
 &lt;pre class="brush: jscript"&gt;
python3 wsgi.py
&lt;/pre&gt;

在近端啟動動態網站, 以瀏覽器 https://localhost:9443 開啟.

[Github]: https://github.com

網站內容管理
----

[CMSiMDE] 的動態網際內容管理, 將所有網頁內容存入 config 目錄中的 content.htm 檔案, 而在每一次使用者儲存新檔案之前,  會將舊版的 content.htm 複製至 content_backup.htm, 之所以如此是因為 [CMSiMDE] 採用 [bs4], 對 config/content.htm 內容進行分頁, 而分頁是依據 content.htm 由上到下的 h1, h2 與 h3 標註內容而定. 並在將動態網站內容 content.htm 以動態編輯器中的 generate pages 功能 (使用 [lxml] 模組功能) 轉為 content 目錄中的各分頁內容時, 可能因分頁失敗而讓整個 content.htm 內容丟失 (這就是非常需要改進的地方之一), 所以才設計 content_backup.htm 的複製進行及時補救.

[bs4]: https://pypi.org/project/beautifulsoup4/
[lxml]: https://pypi.org/project/lxml/
[Github Pages]: https://pages.github.com/

另外, 在 [CMSiMDE] 將操作系統不允許作為檔案名稱的特殊符號自動移除之前 (例如 ":" 號), 使用者應該避免在 h1, h2 與 h3 等標題中使用特殊符號.

Github Pages
----

將 [CMSiMDE] 的動態系統轉為靜態後, 所有靜態頁面的內容存入 content 目錄, 使用者可以將此目錄內容部署到 [Github Pages] 上, 或其他能夠伺服 WWW html 檔案的系統即可完成網站的建立.

但是一般為了方便, 通常將包含動態系統與靜態網站內容的整個倉儲資料, 直接交由 [Github] 管理.  只要將倉儲的 master 分支設為 [Github Pages] 的根目錄, 就可以交由 [Github Pages], 由倉儲主分支倉儲中的 index.html 進行網站導引.

假如使用者將近端的動態網頁內容轉為靜態後, 希望在近端檢視靜態網站內容, 可以在近端倉儲根目錄利用:

&lt;pre class="brush: jscript"&gt;
python http-server.py
&lt;/pre&gt;

或在 OS X 及 Linux 操作系統中以:

&lt;pre class="brush: jscript"&gt;
python3 http-server.py
&lt;/pre&gt;

啟動 https://localhost:8444 近端的靜態網頁伺服系統.

Ubuntu 20.04 自架主機
----

上述利用 [Github Pages] 伺服 [CMSiMDE] 靜態網頁內容的配置流程非常簡單, 但若是要將 [CMSiMDE] 靜態網頁與動態網站系統部署在自架的 Ubuntu 20.04 主機, 則操作系統除了要安裝前述的 python3, flask, flask_cors, bs4, lxml, markdown 之外, 還需要運用 [nginx], [uwsgi], [openssl] 進行配置.

[nginx]: https://nginx.org/en/
[uwsgi]: https://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html
[openssl]: https://www.openssl.org/

其中, [openssl] 用來建立網站認證用的 key 與 certificate, [nginx] 負責建立 WWW 伺服, 而 [uwsgi] 則負責用來開機執行 [CMSiMDE] 中的 wsgi.py 伺服程式.

利用 [openssl] 建立 cmsimde.key 與 cmsimde.crt 的指令如下:

&lt;pre class="brush: jscript"&gt;
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout cmsimde.key -out cmsimde.crt
&lt;/pre&gt;

與 [uwsgi] 有關的 Ubuntu 系統安裝則包括:

&lt;pre class="brush: jscript"&gt;
// 安裝 pip3
sudo apt install python3-pip
// 安裝 python 編譯開發系統
sudo apt install build-essential python3-dev
// 安裝 uwsgi 模組
sudo pip3 install uwsgi
// 安裝 nginx 伺服套件與 uwsgi python3 plugin 程式庫
sudo apt install nginx uwsgi-plugin-python3
&lt;/pre&gt;

/etc/nginx/sites-available/default

&lt;pre class="brush: jscript"&gt;
# for lab.mde.tw static site, use nginx to serve
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	root /home/user_account/labmdetw;
	index index.html index.htm;
	server_name _;
	
	location /static {
            alias /home/user_account/labmdetw/cmsimde/static/;
        }
        location /downloads {
            alias /home/user_account/labmdetw/downloads/;
        }

        location /images {
            alias /home/user_account/labmdetw/images/;
        }

        location /blog {
            alias /home/user_account/labmdetw/blog/;
        }

        location /reveal {
            alias /home/user_account/labmdetw/reveal/;
        }

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

}

# https://lab.mde.tw use nginx to serve
server {
    listen 443 ssl;
    listen [::]:443 ssl;
	root /home/user_account/labmdetw;
	index index.html index.htm;
	server_name _;
	
	location /static {
            alias /home/user_account/labmdetw/cmsimde/static/;
        }
        location /downloads {
            alias /home/user_account/labmdetw/downloads/;
        }

        location /images {
            alias /home/user_account/labmdetw/images/;
        }

        location /blog {
            alias /home/user_account/labmdetw/blog/;
        }

        location /reveal {
            alias /home/user_account/labmdetw/reveal/;
        }
 
    location / {
	# First attempt to serve request as file, then
	# as directory, then fall back to displaying a 404.
	try_files $uri $uri/ =404;
    }

    ssl_certificate /etc/nginx/nginx.crt;
    ssl_certificate_key /etc/nginx/nginx.key;
    ssl_session_timeout 5m;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
    ssl_prefer_server_ciphers on;
    try_files $uri $uri/ =404;
}

# dynamic https://lab.mde.tw:7443 use nginx for ssl and uwsgi for wsgi serving
server {
 
    listen 7443 ssl;
    listen [::]:7443 ssl;
 
    location /static {
        alias /home/user_account/labmdetw/cmsimde/static/;
    }
 
    location / {
        include uwsgi_params;
        uwsgi_pass  127.0.0.1:9443;
    }
 
    ssl_certificate /etc/nginx/nginx.crt;
    ssl_certificate_key /etc/nginx/nginx.key;
    ssl_session_timeout 5m;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
    ssl_prefer_server_ciphers on;
    try_files $uri $uri/ =404;
}
&lt;/pre&gt;

 uwsgi_ini/uwsgi.ini
 
&lt;pre class="brush:js;auto-links:false"&gt;
[uwsgi]
socket = 127.0.0.1:9443
uid = user_account
gid = user_account
plugins-dir = /usr/lib/uwsgi/plugins/
plugin = python3
master = true
process = 4
threads = 2
chdir = /home/user_account/labmdetw/cmsimde
wsgi-file = /home/user_account/labmdetw/cmsimde/wsgi.py
&lt;/pre&gt;

啟動 uwsgi 指令, 將會逐一啟動 wsgi_ini 目錄中個別 .ini 檔案:

&lt;pre class="brush: jscript"&gt;
sudo /usr/bin/uwsgi --emperor /home/user_account/wsgi_ini
&lt;/pre&gt;

最後則設定 Ubuntu 系統服務, 用來啟動 uwsgi:

/etc/systemd/system 的 cmsimde.service 服務啟動檔案內容:

&lt;pre class="brush: jscript"&gt;
[Unit]
Description=uWSGI to serve CMSiMDE
After=network.target
  
[Service]
User=user_account
Group=user_account
WorkingDirectory=/home/user_account/uwsgi_ini
ExecStart=/usr/local/bin/uwsgi --emperor /home/user_account/uwsgi_ini
  
[Install]
WantedBy=multi-user.target
&lt;/pre&gt;

接著將 cmsimde 服務設為隨系統開機啟動:

sudo systemctl enable cmsimde

若要取消 cmsimde 服務隨系統開機啟動:

sudo systemctl disable cmsimde

手動啟動 cmsimde.service 服務

sudo systemctl start cmsimde

手動停止 cmsimde.service 服務

sudo systemctl stop cmsimde</t>
<t tx="yen.20210612081616.40"></t>
<t tx="yen.20210612081616.41">@language md
---
Title: 倉儲資料維護與管理
Date: 2020-05-11 11:00
Category: Github
Tags: CMSiMDE
Slug: manage-your-cmsimde-site
Author: yen
---

[cd2020] 是 2020 春季協同產品設計實習的課程網站, 而 [cd2020pj1] 則是與協同設計課程相關的程式專案, 兩者都採用 [CMSiMDE] 建立網站. 其中 [cd2020] 是典型的動態與網站架構, 而 [cd2020pj1] 則除了網站還包含 Flask 協同產品設計程式的開發.

[cd2020]: http://mde.tw/cd2020
[cd2020pj1]: http://mde.tw/cd2020pj1
[CMSiMDE]: https://github.com/mdecourse/cmsimde

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others

</t>
<t tx="yen.20210612081616.42">當要從遠端 git clone [cd2020] 倉儲時, 牽涉到系統使用何種協定連線, https 或 ssh?

因為不同的連線協定有不同的設定檔案, 而且預計連線的主機並不一定就能提供服務, 因此能否順利完成 git clone 牽涉許多細節. 而這些細節並非一成不變, 而必須按照邏輯順序, 一一查驗才能得到期望中的結果.

首先, 因為 [cd2020] 網站的倉儲位於 https://github.com/mdecourse/cd2020.git, 其中帶有 cmsimde 子模組, 因此若要將此倉儲從遠端 git clone 到近端作為工作目錄, 最好的方式就是透過 --recurse-submodules 參數, 將子模組一起 clone 到近端.

&lt;pre class="brush: jscript"&gt;
git clone --recurse-submodules https://github.com/mdecourse/cd2020.git
&lt;/pre&gt;

由於 KMOLab 的課程鼓勵學員在 Windows 10 操作系統中, 使用隨身程式系統, 而不要被微軟綁定, 因為使用者必須了解所開發的程式必須能在 Mac OS X 與許多 Linux 操作系統執行, Windows 10 不應該是工程師唯一的操作系統.

因此, 從隨身系統中的 start.bat 啟動後, Windows 10 就只是機械設計工程師的暫時宿主, 隨時都要準備離開, 所以啟動後必須注意所處的網路連線環境, 假如是在 IPv4 網路環境, 可以直接對 github.com 連線, 但是身處純 IPv6 網路環境中, 目前仍必須透過支援 IPv4 與 IPv6 的網路代理主機, 才能利用 git 或 ssh 對 github.com 連線.

以 https 對 github.com 連線, 代理主機的設定是透過:

&lt;pre class="brush: jscript"&gt;
git config --global http.proxy=http://[2001::_your_ipv6_proxy]:3128
&lt;/pre&gt;

假如採 ssh 對 github.com 連線, 則代理主機的設定必須檢查 putty.exe 中 github.com session 中 Connections - Proxy 的代理主機設定.

一旦完成 [cd2020] 網站倉儲的 git clone, 使用者就可以使用隨身系統中的命令列視窗, 進入 [cd2020] 倉儲中的 cmsimde 目錄, 以:

&lt;pre class="brush: jscript"&gt;
python wsgi.py
&lt;/pre&gt;

開啟動態網站系統, 並利用瀏覽器連線到 https://localhost:9443 進行動態網站內容的維護, 完成後再利用 generate pages 按鈕將動態網站中的 config/content.htm 轉為 content 目錄中的靜態網頁, 之後再新增, 提交, 推送到遠端, 以完成倉儲改版的流程.</t>
<t tx="yen.20210612081616.43"></t>
<t tx="yen.20210612081616.44">@language md
---
Title: 打造 Windows 隨身程式系統
Date: 2020-05-12 11:00
Category: Windows
Tags: Portable_system
Slug: create-portable-win-prog-sys
Author: yen
---

在 Windows 操作系統上開發套件, 不僅希望這個套件能夠在 Mac OS X 與 Linux 上運行, 而且整個程式環境都能放入一個 USB 隨身碟, 在任何一台乾淨的 64 位元 Windows 10 操作系統中都能正常運行. 不受限制, 因此需要打造一個隨身程式系統.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others
</t>
<t tx="yen.20210612081616.45">啟動批次檔案
----

從以下這個 start.bat 批次啟動檔案, 大致可以看出此一可攜程式系統所包含的內容:

&lt;pre class="brush: jscript"&gt;
@echo off
set Disk=y
subst %Disk%: "data"

%Disk%:

set HomePath=%Disk%:\home_no_proxy
set HomeDrive=%Disk%:\home_no_proxy
set Home=%Disk%:\home_no_proxy
set USERPROFILE=%Disk%:\home_no_proxy

REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"

set PYTHONPATH=%Disk%:\Python38\DLLs;%Disk%:\Python38\Lib;%Disk%:\Python38\Lib\site-packages;
set PYTHONHOME=%Disk%:\Python38

REM for Java and Android SDK
set java_home=%Disk%:\java\jdk8u222-b10
set ANDROID_SDK_home=%Disk%:\home_no_proxy
set GRADLE_USER_home=%Disk%:\home_no_proxy
set ANDROID_SDK_ROOT=%Disk%:\android\sdk
set ANDROID_Home=%Disk%:\android\sdk
set REPO_OS_OVERRIDE=windows

REM 設定跟 Python 有關的命令搜尋路徑
set path_python=%Disk%:\Python38;%Disk%:\Python38\Scripts;
REM 設定跟Git 有關的命令搜尋路徑
set path_git=%Disk%:\portablegit\bin;
REM 設定 msys2 64 位元的執行路徑
set path_msys2=%Disk%:\msys64\mingw64\bin;
REM set for LaTeX
set path_miketex=%Disk%:\miktex-portable\texmfs\install\miktex\bin\x64;
REM Flutter path
set path_flutter=%Disk%:\flutter\bin;%java_home%\bin;%Disk%:\Android\sdk;%Disk%:\Android\sdk\tools;%Disk%:\Android\sdk\tools\bin;%Disk%:\Android\sdk\emulator;%Disk%:\Android\sdk\platform-tools;%Disk%:\flutter\bin\cache\dart-sdk\bin;%Disk%:\vscode;

path=%Disk%:;%path_python%;%path_git%;%path_msys2%;%path_miketex%;%path_flutter%;%path%;

start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe

start /MIN %Disk%:\wScite\SciTE.exe
start /MIN %Disk%:\wScite\SciTE.exe

Exit
&lt;/pre&gt;

關閉隨身系統的批次檔案 stop.bat, 只將 python, scite 與 dos 命令列關閉, 若需要關閉其他可能開啟的套件, 可以自行加入:

&lt;pre class="brush: jscript"&gt;
@echo off
set Disk=y
path=%PATH%;

taskkill /IM python.exe /F
taskkill /IM pythonw.exe /F

taskkill /IM scite.exe /F

REM 終止虛擬硬碟與目錄的對應
subst %Disk%: /D
REM 關閉 cmd 指令視窗
taskkill /IM cmd.exe /F

EXIT
&lt;/pre&gt;

此一隨身系統安裝配置以 [MSYS2] 與 [Flutter] 較具挑戰性.

[MSYS2]: https://www.msys2.org/
[Flutter]: https://flutter.dev/

[MSYS2]
----

首先與 [MSYS2] 的代理主機設定位於 Y:\msys64\etc\wgetrc. 接下來為了可以編譯 C++ 程式, 必須安裝

&lt;pre class="brush: jscript"&gt;
pacman -S mingw-w64-x86_64-gcc
&lt;/pre&gt;

與

&lt;pre class="brush: jscript"&gt;
pacman -S mingw-w64-x86_64-toolchain
&lt;/pre&gt;

而列出 [MSYS2] 中所安裝的模組:

&lt;pre class="brush: jscript"&gt;
pacman -Q
&lt;/pre&gt;

為了編譯 [Range3], 必須額外安裝:

&lt;pre class="brush: jscript"&gt;
pacman -S mingw-w64-x86_64-ffmpeg

pacman -S mingw-w64-x86_64-qt5

pacman -S mingw-w64-x86_64-qt5-static
&lt;/pre&gt;

編譯 Range3
----

git clone https://github.com/Range-Software/range3.git

start Y:\msys64\mingw64.exe

cd \y\tmp\fem_ex\range3

./scripts/build.sh --clean &amp;&amp; ./scripts/create_package.sh

而為了讓 svg 格式的 icons 能夠正確顯示, 必須納入 Qt5Svg.dll

Flutter
----

至於現階段 [Flutter] 的安裝配置問題源自 [Android] sdk 的最新版 tools 與最新版的 [Flutter] 並不相容. 具體原因是: 目前的 [Flutter] 必須使用舊版的 [Android] sdk 中的舊版 tools.

[Android]: https://developer.android.com/studio

使用者若從 [Android] 官方網站下載 tools 工具, 試圖與 [Flutter] 配合, 將會在執行:

&lt;pre class="brush: jscript"&gt;
flutter doctor
&lt;/pre&gt; 

時將出現 Android sdk licenses 尚未完成.  但是若再以:

&lt;pre class="brush: jscript"&gt;
flutter doctor --android-licenses
&lt;/pre&gt; 

就會出現 Java setting 錯誤.

解決方案
----

處理上述 [Flutter] 與最新版 [Android] 無法相容的問題, 必須借助:

&lt;pre class="brush: jscript"&gt;
sdkmanager --sdk_root=y:\android\sdk tools
&lt;/pre&gt;

安裝舊版的 [Android] sdk tools, 問題是 sdkmanager 工具就位於 tools 目錄中, 因此必須先將新版的 tools 目錄改名為 tools_new, 並配合將 tools_new/bin 設為 start.bat 中的 PATH, 可攜系統啟動後, 以:

&lt;pre class="brush: jscript"&gt;
sdkmanager --sdk_root=y:\android\sdk tools
&lt;/pre&gt;

安裝舊版的 [Android] sdk tools 後, 再將 PATH 路徑改為舊版 tools/bin.

之後再以

&lt;pre class="brush: jscript"&gt;
flutter doctor --android-licenses
&lt;/pre&gt; 

同意使用授權後, 就可以接續進行 Flutter 套件的開發.</t>
<t tx="yen.20210612081616.46"></t>
<t tx="yen.20210612081616.47">@language md
---
Title: gitlab 與 github 整合運用
Date: 2020-05-16 11:00
Category: git
Tags: Github Pages
Slug: use-github-and-gitlab-pages
Author: yen
---

由於 [github] 遲遲不推出支援 IPv6 網站的連線功能, 目前若要在電腦輔助設計室直接透過純 IPv6 網路連線使用 git 分散式版次管理系統, 可以將 [Github Pages] 上的 [CMSiMDE] 網站, 同步一份倉儲資料到 [Gitlab Pages].

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others
</t>
<t tx="yen.20210612081616.48">機械設計工程師的網站
----

身為使用分散式版次管理系統的機械設計工程師團隊, 除了自行建立的 Linux 伺服器主機之外, [Github Pages] 是目前用來建立靜態網頁的最佳平台. 但是截至目前只支援 IPv4 網路協定連線的 [github], 在上課時僅支援 IPv6 上線的情況下, 造成了許多不便. 因為所有的資料封包都必須透過雙支援的代理主機傳訊.

[github]: https://github.com
[gitlab]: https://gitlab.com
[Github Pages]: https://pages.github.com/
[Gitlab Pages]: https://docs.gitlab.com/ee/user/project/pages/
[CMSiMDE]: https://github.com/mdecourse/cmsimde.git

為了讓使用者可以在純 IPv6 環境下, 將 [CMSiMDE] 的靜態網頁部署在廣域雲端平台上, 準備將倉儲資料同步一份到 [Gitlab Pages].

開放作風的 gitlab
----

[github] 雖然比 [gitlab] 早創立幾年, 但是 [gitlab] 的開源與大器作風, 讓帳面價值達到 76 億美元的 [github] 失色許多.

[Github Pages] 將用戶設定的靜態網頁資料分支, 以直覺但隱藏流程的方式進行, 導致許多情況下, 用戶無法就網頁資料轉檔流程進行除錯.

gitlab-ci.yml
----

而 [Gitlab Pages] 則選擇讓使用自行透過 gitlab-ci.yml 的 YAML 檔案, 自行控制網頁的轉檔流程.

以 [CMSiMDE] 網際內容管理中的靜態網頁而言, 只要在倉儲資料根目錄中, 加入一個 gitlab-ci.yml 檔案, 內容如下:

&lt;pre class="brush: jscript"&gt;
pages:
  stage: deploy
  script:
  - mkdir .public
  - cp -r * .public
  - mv .public public
  artifacts:
    paths:
    - public
  only:
  - master
variables:
  GIT_SUBMODULE_STRATEGY: recursive
&lt;/pre&gt;

就可以順利將倉儲資料中的主分支靜態網頁, 部署在 https://帳號.gitlab.io/倉儲名稱 網址中. 其中最重要的設定參數:

&lt;pre class="brush: jscript"&gt;
GIT_SUBMODULE_STRATEGY: recursive
&lt;/pre&gt;

就是表明要求 [gitlab] 在將倉儲轉為網頁的過程, 同時以 recursive 的方式將其中的 submodule 目錄, 也納入網頁的內容.

git remote add
----

針對目前已經部署在 [github] 的靜態網頁倉儲, 使用者先在主分支的根目錄中, 新增提交推送一個上述的 gitlab-ci.yml 設定檔案, 然後建立與 [github] 帳號對應的 [gitlab] 帳號之後, 新增一個與 [github] 倉儲的同名空專案, 也就是連 README.md 都不建立的 public 空倉儲, 然後在近端倉儲主分支工作目錄中, 以:

&lt;pre class="brush: jscript"&gt;
git remote add gitlab https://gitlab.com/帳號/同名倉儲.git
&lt;/pre&gt;

新增一個網址代號 gitlab, 指到上述 [gitlab] 系統中的空同名倉儲網址.

接下來就可以透過:

&lt;pre class="brush: jscript"&gt;
git push gitlab
&lt;/pre&gt;

將 [github] 倉儲中的主分支資料, 同步一份到 [gitlab], 並且在 gitlab-ci.yml 的設定導引下, 自動產生相應的 [Gitlab Pages] 靜態網頁. 而其網址就是: https://帳號.gitlab.io/倉儲名稱

最後, 假如之後的倉儲改版以 [gitlab] 為主, 只要在近端主分支的工作目錄中, 以:

&lt;pre class="brush: jscript"&gt;
git remote add github https://github.com/帳號/同名倉儲.git
&lt;/pre&gt;

建立一個 github 代號倉儲連結, 就可以透過:

&lt;pre class="brush: jscript"&gt;
git push github
&lt;/pre&gt;

將 [github] 當作 [gitlab] 倉儲的備份網站.</t>
<t tx="yen.20210612081616.49"></t>
<t tx="yen.20210612081616.5"></t>
<t tx="yen.20210612081616.50">@language md
---
Title: Virtualbox Ubuntu 虛擬主機網路設定
Date: 2020-05-16 12:00
Category: ubuntu
Tags: Virtualbox
Slug: virtualbox-ubuntu-nat-network
Author: yen
---

利用 [Virtualbox] 建立 Ubuntu 20.04 伺服器的虛擬主機, 可以讓使用者透過便捷的網路設定, 了解不同主機連線配置的特性外, 也能同時測試跨操作系統平台套件在 Windows 與 Ubuntu 環境執行的差異.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others
</t>
<t tx="yen.20210612081616.51">修課學員只要登入 ＠gm 帳號後, 就可下載 [Ubuntu 20.04 虛擬主機] (或下載 [Ubuntu 20.04 W12 虛擬主機]), 並匯入 Windows 10 環境所安裝的 [Virtualbox].

接下來就必須了解如何使用虛擬主機的 NAT Network 網路設定.

讓虛擬主機連上廣域網路
----

能直接讓 [Virtualbox] 虛擬主機連上網路的設定, 可以選擇 NAT, NAT Network 與 Bridged 等三種設定. 詳細的說明可以參考 [Virtualbox Network Setting], [Virtualbox 5.1.22 User Manual], [Virtualbox 6.1.8 User Manual] 中的說明.

假如需要利用 Python 程式透過 COM 操控 [Virtualbox] 中的虛擬主機, 則可以參考 [Virtualbox 5.1.22 Programming Guide] 與 [Virtualbox 6.1.8 Programming Guide] 中的說明.

在目前的網際內容管理與協同產品設計課程應用上, 以 NAT Network 的設置最合需求. 因為 Ubuntu 20.04 虛擬主機可以透過 Windows 10 Host 的 IPv4 或 IPv6 網路設定連外. 同時 Ｗindows 10 上的瀏覽器與 Python 程式可以透過內部網路對虛擬主機連線.

使用 NAT Network 讓虛擬主機上網的另外一個好處是: Host 上 [Virtualbox] 的網路設定可以動態生效, 亦即 Ubuntu 20.04 可以一直保持在開機狀態, 使用者在 Host 端更動 [Virtualbox] 的 NAT Network 設定後, 即刻可以在 Ubuntu 虛擬主機上進行配合調適, 無需如 Bridged 或 Host Only 虛擬主機的網路設定, 必須關機後才能修改所使用的網路設定.

NAT Network 上的 IPv4 與 IPv6 設定
----

由於在電腦輔助設計室使用純 IPv6 協定上網, 因此採用 NAT Network 設定的 [Virtualbox] 虛擬主機, 也必須能夠透過 IPv6 進行設定.

NAT Network 的 DHCP 能同時支援 IPv4 與 IPv6, 但是在 GUI 介面只列出 IPv4 的 DHCP 內定使用 10.0.2.0/24 IP 位址, IPv6 的部分則需要透過指令才可列出:

&lt;pre class="brush: jscript"&gt;
C:\Users\kmol2019&gt;"C:\Program Files\Oracle\VirtualBox\VBoxManage" list natnetworks
NetworkName:    NatNetwork
IP:             10.0.2.1
Network:        10.0.2.0/24
IPv6 Enabled:   Yes
IPv6 Prefix:    fd17:625c:f037:2::/64
DHCP Enabled:   Yes
Enabled:        Yes
loopback mappings (ipv4)
        127.0.0.1=2
&lt;/pre&gt;

換言之, 在 [Virtualbox] 採用 NAT Network 設定的虛擬主機, 其 IPv4 gateway 預設為 10.0.2.1, 而 IPv6 的 gateway 則為 fd17:625c:f037:2::1, 了解此一訊息之後, 使用者就可以利用 Ｗindows 10 中的批次檔案 setnatnetwork.bat 來設定後續的網路內容, 主要讓 [cd2020pj1] 啟動後的 8443 與 7443 埠號伺服器, 能夠從 Host 瀏覽器中連線:

[cd2020pj1]: https://github.com/mdecourse/cd2020pj1.git

&lt;pre class="brush: jscript"&gt;
"C:\Program Files\Oracle\VirtualBox\VBoxManage" natnetwork modify --netname NatNetwork --port-forward-4 "ssh:tcp:[127.0.0.1]:22:[10.0.2.4]:22"

"C:\Program Files\Oracle\VirtualBox\VBoxManage" natnetwork modify --netname NatNetwork --port-forward-4 "coppeliasim:tcp:[127.0.0.1]:19999:[10.0.2.4]:19999"

"C:\Program Files\Oracle\VirtualBox\VBoxManage" natnetwork modify --netname NatNetwork --port-forward-4 "cmsimde1:tcp:[127.0.0.1]:8443:[10.0.2.4]:8443"

"C:\Program Files\Oracle\VirtualBox\VBoxManage" natnetwork modify --netname NatNetwork --port-forward-4 "cmsimde2:tcp:[127.0.0.1]:7443:[10.0.2.4]:7443"

"C:\Program Files\Oracle\VirtualBox\VBoxManage" natnetwork modify --netname NatNetwork --port-forward-6 "ssh:tcp:[::1]:22:[fd17:625c:f037:2:a00:27ff:fef6:9b8a]:22"

"C:\Program Files\Oracle\VirtualBox\VBoxManage" natnetwork modify --netname NatNetwork --port-forward-6 "cmsimde1:tcp:[::1]:8443:[fd17:625c:f037:2:a00:27ff:fef6:9b8a]:8443"

"C:\Program Files\Oracle\VirtualBox\VBoxManage" natnetwork modify --netname NatNetwork --port-forward-6 "cmsimde2:tcp:[::1]:7443:[fd17:625c:f037:2:a00:27ff:fef6:9b8a]:7443"
&lt;/pre&gt;

其中 Ubuntu 20.04 虛擬主機的 netplan 網路設定為:

&lt;pre class="brush: jscript"&gt;
network:
    ethernets:
        enp0s3:
            dhcp4: true 
            dhcp6: true 
            nameservers:
                addresses:
                     - 2001:b000:168::1
    version: 2
&lt;/pre&gt;

表示兩種網路協定都採用 DHCP, 但是 IPv6 必須設定 DNS 伺服器, 因為學校 DHCP6 所設定的 DNS 無法正確運作的緣故.

[Ubuntu 20.04 虛擬主機]: https://drive.google.com/open?id=1Ff-mPk9kww_04RxkkiS0lb_2Y9z8Ek1Z

[Ubuntu 20.04 W12 虛擬主機]: https://drive.google.com/open?id=13Gqwyj0CGR6wa9dZg_BmlCLv5cNYWQJ_

[Virtualbox]: https://www.virtualbox.org/

[Virtualbox Network Setting]: https://drive.google.com/open?id=1U8hVabo24eBrkuau5Ev0Za8XC9k_Bzux

[Virtualbox 5.1.22 User Manual]: https://drive.google.com/open?id=1xRxWmYOw4tQuRAFecsAEOlqu62xPUvMc

[Virtualbox 5.1.22 Programming Guide]: https://drive.google.com/open?id=1DsVpKWUoDHO-AWnuFxafQ-kYR53_kCT6

[Virtualbox 6.1.8 User Manual]: https://drive.google.com/open?id=1MX1XT1hlOWYVIZ8bKbtlrTAWBCgRRnSL

[Virtualbox 6.1.8 Programming Guide]: https://drive.google.com/open?id=1jTmj2oWSO8aCpF6DW1rIAYz3iqYQtjPp

[Virtualbox download]: https://download.virtualbox.org/virtualbox/
</t>
<t tx="yen.20210612081616.52"></t>
<t tx="yen.20210612081616.53">@language md
---
Title: 同步 Pelican 與 Blogger 網誌內容
Date: 2020-05-18 11:00
Category: Weblog
Tags: Pelican, Blogger
Slug: sync-pelican-and-blogger-content
Author: yen
---

在先前的 [CMSiMDE] 架構中, 曾經設法讓 [Pelican 與 Ｗordpress 的內容同步], 相同的概念, 也可以在 [Leo Editor] 中, 讓 Pelican 的網誌文章與 Google Blogger 保持同步.

&lt;!-- PELICAN_END_SUMMARY --&gt;

[CMSiMDE]: https://github.com/mdecourse/cmsimde.git
[Pelican 與 Ｗordpress 的內容同步]: http://project.mde.tw/blog/yen-pelican-jing-tai-wang-ye-yu-wordpress-de-zheng-he-fang-an.html
[Leo Editor]: https://leoeditor.com/

@others
</t>
<t tx="yen.20210612081616.54">按鈕與節點標題
----

[Leo Editor] 中可以設置按鈕執行 Python 程式, 其中搭配節點的標題內容存取, 可以應用在 Pelican 與 Blogger 的網誌內容同步.

由於目前使用的 Pelican, 在 markdown 目錄中編寫 .md 檔案, 然後再設法以 Pelican 指令與設定檔, 將所有的 .md 檔案轉為 blog 目錄中的網誌內容. 其中, 若能將個別的 .md 檔案先轉為 html 後, 再利用 Google Blogger API 的 Python 程式將各網誌 html 檔案送至對應帳號下的 Blogger 網誌系統, 將可以將一份內容分別同步到 Pelican 與 Blogger.


新增 Blogger 文章
----

 add_to_blogger 按鈕程式:
 
&lt;pre class="brush: python"&gt;
from markdown import markdown
from oauth2client import client
from googleapiclient import sample_tools
import os

argv = ""
# 認證並建立服務
# name of the api is "blogger", version is "v3"
# description of the api is __doc__
# file name of the application: location of client_secrets.json
service, flags = sample_tools.init(
  argv, 'blogger', 'v3', __doc__, "./../../client_secrets.json",
  scope='https://www.googleapis.com/auth/blogger')


def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    # 但是只換第一個
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;', 1)
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &amp;lt;h2&amp;gt;標題
content = content.replace("&amp;lt;h2&amp;gt;", "&amp;lt;h2&amp;gt;&amp;lt;font size='4'&amp;gt;")
content = content.replace("&amp;lt;/h2&amp;gt;", "&amp;lt;/font&amp;gt;&amp;lt;/h2&amp;gt;")
# g.es(content)

try:
    '''
    users = service.users()
    # 取得使用者 profile 資料
    user = users.get(userId='self').execute()
    print('網誌名稱: %s' % user['displayName'])
    '''
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    # post_id is now blogs["items"][0]["id"]
    blog_id = blogs["items"][0]["id"]
    #for blog in blogs['items']:
        #print(blog['name'], blog['url'])
    posts = service.posts()
    # 新增網誌 post 時, 需要 post_id
    body = {
    "kind": "blogger#post",
    "id": blog_id,
    "title": title,
    # 利用 markdown 函式, 將 .md 的內文轉為 html, 作為 Blogger 的文章內容
    "content": content,
    "labels": tags
    }
    insert = posts.insert(blogId=blog_id, body=body)
    posts_doc = insert.execute()
    post_id = posts_doc["id"]
    #print(posts_doc)
    os.remove("blogger.dat")
    # 利用最後的 child 節點來儲存 post_id
    to_save_post_id = p.insertAsLastChild()   
    # 改為內文為空的節點, id 直接標在 head 標題 
    to_save_post_id.b = ""
    to_save_post_id.h = post_id
    # 因為新增節點, commander 必須 redraw
    c.redraw()
    g.es("post_id 為", post_id)
    g.es("已經將資料送往 Blogger!")
except(client.AccessTokenRefreshError):
    g.es("error")
&lt;/pre&gt;

編輯 Blogger 文章
----

edit_to_blogger 按鈕程式:

&lt;pre class="brush: python"&gt;
from markdown import markdown
from oauth2client import client
from googleapiclient import sample_tools
import os

argv = ""
# 認證並建立服務
# name of the api is "blogger", version is "v3"
# description of the api is __doc__
# file name of the application: location of client_secrets.json
service, flags = sample_tools.init(
  argv, 'blogger', 'v3', __doc__, "./../../client_secrets.json",
  scope='https://www.googleapis.com/auth/blogger')


def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &amp;lt;h2&amp;gt;標題
content = content.replace("&amp;lt;h2&amp;gt;", "&amp;lt;h2&amp;gt;&amp;lt;font size='4'&amp;gt;")
content = content.replace("&amp;lt;/h2&amp;gt;", "&amp;lt;/font&amp;gt;&amp;lt;/h2&amp;gt;")
# g.es(content)

try:
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    blog_id = blogs["items"][0]["id"]
    # 設法取得原 post 的 id
    postid_outline = p.getLastChild()
    # 直接從標題取得 post 的 id 號碼
    post_id = postid_outline.h
    posts = service.posts()
    # 更新網誌文章時的 body
    body = {
    "kind": "blogger#post",
    "title": title,
    "content": content
    }
    # need to save postId to outline head
    update = posts.update(blogId=blog_id, postId=post_id, body=body, publish=True)
    update_doc = update.execute()
    os.remove("blogger.dat")
    g.es("post_id 為", post_id)
    g.es("已經將更新資料送往 Blogger!")
except(client.AccessTokenRefreshError):
    g.es("error")
&lt;/pre&gt;

從 Blogger 取回內容
----

在 [Pelican 與 Ｗordpress 的內容同步] 中, 可以從 Wordpress 取回網誌內容, 然後新增到 Pelican, 在此因為網誌文章的建立以 [CMSiMDE] 倉儲中的 Pelican 網誌為主, Blogger 只是附屬備份網誌, 所以就不再從新增的 Google Blogger 取回網誌文章.

參考資料
----

&lt;a href="https://developers.google.com/blogger"&gt;https://developers.google.com/blogger&lt;/a&gt;
</t>
<t tx="yen.20210612081616.55"></t>
<t tx="yen.20210612081616.56">@language md
---
Title: 網際內容管理 Ｗ13
Date: 2020-05-28 11:00
Category: WCM
Tags: Pelican, Blogger, Ubuntu
Slug: wcm-w13-ubuntu-and-blogs
Author: yen
---

之所以在機械設計工程系開設網際內容管理課程, 起源於多年前的所謂製商整合科技教育改進計畫, 當時參與的科系有機械設計系, 自動化工程系, 工業管理系與資訊管理系, 同時開設的課程還有協同產品設計實習, 基因演算與產品生命週期管理.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20210612081616.57">網際內容管理課程目標
----

這項計畫與其他所謂的跨領域學程的命運沒有太大的差異, 計畫補助經費結束, 大家各自回巢, 留下一堆陳年資訊系統設備, 還有這門網際內容管理與協同產品設計實習.

網際內容管理課程開設在機械科系的主要任務, 是要鼓勵工程師善用全球資訊網的無遠弗屆, 與其他領域工程師執行協同設計, 自 2012 年起 [Onshape] 已經成功在曾經開發 [Solidworks] 的基礎上, 證明瀏覽器, 平板電腦與手機, 都可以是機械設計工程師開發產品的平台, 無需受限於單機安裝, 必須自行看顧版本更新, 徹底脫離沒有產品資料管理系統, 就無法協同進行產品開發的舊時代.

當然, [Onshape] 雖然定位為電腦輔助機械設計與分析管理平台, 但是真正能夠編寫 Web based 程式前後端, 並且與 [Parasolid] 核心程式庫進行圖形介面與觸控互動, 絕非出自通常只上過一門 [計算機程式] 課程的機械工程師, 而是來自一群號稱 Full stack web developers 的資訊科系研究工程師.

[計算機程式]: http://mde.tw/lab/content/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A8%8B%E5%BC%8F.html
[Onshape]: https://www.onshape.com/
[Solidworks]: https://www.solidworks.com/
[Parasolid]: https://en.wikipedia.org/wiki/Parasolid
[Featurescript]: https://cad.onshape.com/FsDoc/
[CMSiMDE]: https://github.com/mdecourse/cmsimde.git
[Pelican]: https://github.com/getpelican/pelican
[Blogger]: https://www.blogger.com/
[Leo Editor]: https://leoeditor.com/
[節點指令]: https://leoeditor.com/directives.html
[clean]: https://leoeditor.com/directives.html#clean-path
[Markdown]: https://en.wikipedia.org/wiki/Markdown
[button]: https://leoeditor.com/customizing.html?highlight=button
[html]: https://en.wikipedia.org/wiki/HTML
[google-api-python-client]: https://github.com/googleapis/google-api-python-client
[oauth2client]: https://github.com/googleapis/oauth2client

儘管如此, 對於必須在 [Onshape] 上利用 [Featurescript] 進行各種 2D 與 3D 零組件客製設計的機械工程師, 仍需具備一定程度的網際程式能力.

因此, 在四技部的網際內容管理課程, 定位為接續計算機程式課程, 預計培養未來在電腦輔助設計實習與協同產品設計實習等課程, 負責建置實體與虛擬主機, 搭建網際機械設計管理系統的協同人員, 而五專部的網際內容管理課程, 則定位在承接計算機概論課程, 讓高一程度的學員, 能夠了解網際軟硬體的基本架構外, 也能夠利用分散式版次管理建立網站, 管理網誌並利用基本的程式方法, 讓 Google [Blogger] 與 [CMSiMDE] 中的 [Pelican] 網誌內容同步.

[Leo Editor]
----

要讓兩套架構完全不同的網誌系統內容同步, 可以採取各種程式方法, 這裡是透過 [Leo Editor] 大綱編輯程式中的節點按鈕與節點編輯特性完成.

[Leo Editor] 允許使用者透過不同的 [節點指令], 進行特定文字檔案的編輯管理, 其中的 [clean] 節點指令, 最適合用來編輯 [Pelican] Blog 的 [Markdown] 文章內容, 因為 [clean] 允許將一篇文章以從屬架構的節點內容分割, 當使用者利用 [button] 中的 Python 程式段, 試圖將 [Pelican] 網誌的文章從 [Markdown] 格式,  轉為 [html] 檔案, 並且通過 Google [Blogger] API 的 credential 認證, 將網誌的 [html] 格式文章, 轉貼到對應的 [Blogger] 系統之後, 可以取得該網誌的 id, 並將此 id 儲存在該 [Pelican] [Markdown] 文章編輯大綱中, [clean] 節點下層的最末端, 之後的內容改版, 就可以依據此一 [Blogger] 文章 id, 循相同的授權模式, 將改版內容送至 Google [Blogger].

按鈕程式所需模組
----

為了利用 [button] 中的 Python 程式將文章發佈至 Google [Blogger], 可攜程式系統需要安裝 [google-api-python-client] 與 [oauth2client] 模組.

pip install google-api-python-client oauth2client

接下來則是取得與所要同步的 Google [Blogger] 認證檔案.</t>
<t tx="yen.20210612081616.58"></t>
<t tx="yen.20210612081616.59"></t>
<t tx="yen.20210612081616.6">@language python
import os

os.system("pelican markdown -o blog -s local_publishconf.py")
g.es("admin pelican 近端執行完畢")


</t>
<t tx="yen.20210612081616.60"></t>
<t tx="yen.20210612081616.61"></t>
<t tx="yen.20210612081616.62">@language md
---
Title: 高風險聯網設備
Date: 2020-06-04 11:00
Category: Network
Tags: Security
Slug: high-risk-networking-devices
Author: yen
---

前幾天, 感謝校方送來一份通知, 列出系上共有 40 多台所謂的高風險聯網設備. 其中有 8 台 Linux 代理主機必須配合更新套件, 並且限定可連線管理的 IP 位址範圍.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others

</t>
<t tx="yen.20210612081616.63">
Ubuntu 伺服器
----

設計系目前共有三台實體虛擬主機與一台虛擬代理主機, 四台符號名稱伺服器,  以及兩台虛擬的 WWW 伺服器主機. 

其中系上的符號名稱伺服器原先安裝 Ubuntu 18.04, 必須升級為 20.04, 四台符號名稱伺服器與 WWW 伺服器則需要限制 ssh 的連線範圍.

針對非開發版本的 Ubuntu 18.04 可以參考 https://www.linuxtechi.com/upgrade-ubuntu-18-04-lts-to-ubuntu-20-04-lts/ 升級為 20.04.

舊版的 nginx, 若要升級為較新版本, 則可參考 https://devopscraft.com/how-to-compile-nginx-from-source-on-ubuntu-20-04/ 自行編譯安裝.

ufw 防火牆
----

以代理主機而言, 除了限制可連線 ssh 的 IP 範圍外, 還需要讓同區段的電腦可以對 3128 埠號連線;

&lt;pre class="brush: js"&gt;
    sudo -s 
    ufw status
    ufw allow from your_ipv4_or_ipv6_ip
    ufw allow from 2001:288::/16 to any port 22
    ufw deny 22
    ufw allow from 2001:288::/16 to any port 3128
    ufw deny 3128
    ufw enable
&lt;/pre&gt;

其次, 若要刪除原先 ufw 的設定可以使用 ufw reset, 若要暫時關閉 ufw, 採用 ufw disable.

符號名稱的部分, 需要限制 port 22 連線外, 必須讓所有主機都能對 port 53 連線:

&lt;pre class="brush: js"&gt;
    sudo -s 
    ufw status
    ufw allow from your_ipv4_or_ipv6_ip
    ufw allow from 2001:288::/16 to any port 22
    ufw deny 22
    ufw allow 53
    ufw enable
&lt;/pre&gt;

WWW 伺服器若採用 port 80 與 443 配置, 則需要對所有主機開放, port 5443 若執行 Fossil SCM, 也必須開放, 其他也是對 port 22 有連線範圍的限制.

&lt;pre class="brush: js"&gt;
    sudo -s 
    ufw status
    ufw allow from your_ipv4_or_ipv6_ip
    ufw allow from 2001:288::/16 to any port 22
    ufw deny 22
    ufw allow 80
    ufw allow 443
    ufw allow 5443
    ufw enable
&lt;/pre&gt;

最後, 則是附上[電腦輔助設計室電腦規劃] 與 [網路安全] 參考資料.

[電腦輔助設計室電腦規劃]: https://github.com/mdecourse/wcms2018/issues/7
[網路安全]: http://www.linuxfromscratch.org/blfs/view/svn/postlfs/security.html



</t>
<t tx="yen.20210612081616.64"></t>
<t tx="yen.20210612081616.65"></t>
<t tx="yen.20210612081616.66"></t>
<t tx="yen.20210612081616.67"></t>
<t tx="yen.20210612081616.68">@language md
---
Title: 代理主機維護策略
Date: 2020-06-11 11:00
Category: Network
Tags: Proxy
Slug: stratege-for-proxy-servers
Author: yen
---

昨天又失去一台 HP 代理主機, 也就是編號 42 的 Squid Proxy Server. 因此目前只剩下 4, 53 與 69 等三台.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20210612081616.69">雙協定支援代理主機的需求
----

也許大家會存疑, 機械設計科系為何需要自行安裝維護網路代理主機？假如根據學校多年前回覆, 之所以拆掉校級的代理主機設置, 原因是聯外頻寬已經很足夠, 因此不需要網路代理主機.

但是, 這種假設是, 系上的 IPv4 數量足夠, 而大部分的外部伺服器都已經支援 IPv6, 但是對於平日電腦總數量超過 300 台的機械設計系, 希望上課時讓每一位學員都能將課程資料存取於 Github.com, 這兩個條件都不存在.

因此, 從電腦輔助設計室上課的需求來看, 採用 IPv4 NAT 的模式, 並無足夠的頻寬讓 至少 50 台電腦快速直接對 Github.com 連線, 而如眾所知, Github.com 目前尚不支援 IPv6 網路協定.

因此, 2-3 台能夠同時支援 IPv4 與 IPv6 網路協定的代理主機, 似乎是可行的方案之一.

維護全時運作主機的可能方案
----

假如以電腦輔助設計室每週 40 堂課計算, 其中只有至多 14 堂課需要使用網路代理主機, 理論上並沒有必要全時讓這些代理主機運作, 而只要維持一台連內 (69), 一台連外 (4), 其餘的 IPv4 伺服器 IP 位址, 可以交由每班中至多 5 個分組的組長, 以虛擬主機 bridged 網路的方式各自管理分組中的代理主機, 其中可能的編號將有 (24, 32, 34, 39, 42）等五台.

其中, 因為在上學期的課程有大一的計算機程式與大二的電腦輔助設計實習課程, 而下學期的課程則有大一的網際內容管理與大二的協同產品設計實習, 正好可以在各課程中安排學長與學弟妹共同維護這五台代理主機的互動傳承內容.

Squid 代理主機的安裝
----

以 Ubuntu 20.04 伺服器主機為例, 安裝 Squid Proxy 伺服器:

sudo apt install squid

接下來, 利用 /etc/squid/squid.conf 進行配置:

&lt;pre class="brush: jscript"&gt;
# 定義可以連線電腦網路位置範圍或特定 IP
acl cad_lab src 192.130.17.0/24
acl cad_lab src 192.127.237.33
acl cad_lab src 2001:288::/64

# 定義可以連線通過的埠號
acl SSL_ports port 443
acl Safe_ports port 80 # http
acl Safe_ports port 88
acl Safe_ports port 89
 
#acl Safe_ports port 21 # ftp
acl SSL_ports port 8843
acl SSL_ports port 5443
acl SSL_ports port 8443
acl Safe_ports port 8443
 
acl SSL_ports port 9443
acl Safe_ports port 9443
 
acl SSL_ports port 22
acl Safe_ports port 22
 
acl Safe_ports port 443 # https
acl Safe_ports port 1025-65535 # unregistered ports
acl Safe_ports port 280 # http-mgmt
acl Safe_ports port 488 # gss-http
acl Safe_ports port 591 # filemaker
acl Safe_ports port 777 # multiling http
acl CONNECT method CONNECT

# 除了前面定義的安全埠號外, 一律拒絕連線
# Deny requests to certain unsafe ports
http_access deny !Safe_ports

# 除了前面定義的安全埠號外, 一律不准連線
# Deny CONNECT to other than secure SSL ports
http_access deny CONNECT !SSL_ports
 
# 只允許前面定義的網路 IP 電腦連線, 其餘一律禁止
http_access allow cad_lab
http_access deny all
# Only allow cachemgr access from localhost
http_access allow localhost manager
http_access deny manager
 
#http_access allow localnet
http_access allow localhost
 
# And finally deny all other access to this proxy
http_access deny all
 
# Squid normally listens to port 3128
http_port 3128
 
#cache_dir ufs /var/spool/squid 100 16 256
icp_port 3130
icp_access allow all
 
cache_dir ufs /var/spool/squid 2000 16 256
cache_peer 192.130.17.4 sibling 3128 3130
cache_peer 192.130.17.42 sibling 3128 3130
cache_peer 192.130.17.53 sibling 3128 3130

 
#
# Add any of your own refresh_pattern entries above these.
#
refresh_pattern ^ftp: 1440 20% 10080
refresh_pattern ^gopher: 1440 0% 1440
refresh_pattern -i (/cgi-bin/|\?) 0 0% 0
refresh_pattern (Release|Packages(.gz)*)$ 0 20% 2880
refresh_pattern . 0 20% 4320

max_filedesc 40960
cache_mem 4000 MB
&lt;/pre&gt;

修改 /etc/squid/squid.conf 後, 以:

sudo systemctl restart squid 重新啟動.

假如要讓 Virtualbox 虛擬主機與 Windows 10 host 啟動開啟虛擬代理主機, 可以設定使用 [VBoxVmService], 但是 5.X 的 Virtualbox 必須與 VBoxVmService  5.X 版配合, 而 6.X 的版本也必須互動升級配置.

[VBoxVmService]: https://github.com/onlyfang/VBoxVmService

後記:

42 是一台 HP ML 30 gen9 的機器,  2017 安裝的 Ubuntu 在前幾天停止運作後, 直接將 Host 裝上 Win 10, 因無法從 USB 安裝, 只能用 blueray  dvd 重新安裝, 然後外部設為 39, 然後將虛擬 proxy 伺服器設為 42,  目前仍然加入服役中.
</t>
<t tx="yen.20210612081616.7"></t>
<t tx="yen.20210612081616.70"></t>
<t tx="yen.20210612081616.71"></t>
<t tx="yen.20210612081616.72"></t>
<t tx="yen.20210612081616.73"></t>
<t tx="yen.20210612081616.74">@language md
---
Title: 使用 Leo Editor
Date: 2020-06-30 11:00
Category: Leo Editor
Tags: leo editor
Slug: how-to-use-leo-editor
Author: yen
---

[Leo Editor] 的使用可以從 LEO_EDITOR 的環境變數設定開始, 讓多元的大綱管理流程, 成為您程式開發與資料管理上的一大利器.

&lt;!-- PELICAN_END_SUMMARY --&gt;

[Leo Editor]: https://leoeditor.com/

@others</t>
<t tx="yen.20210612081616.75">Leo Editor 與 SciTE
----

當使用 [KMOLab] 所建立的 Windows 64 位元操作系統環境下的可攜系統時, 只要在 start.bat 中, 加入 LEO_EDITOR 環境變數的設定, 使用者就可以將大綱中的 Python 程式, C 程式, Dart 程式或 Lua 程式碼, 直接帶到 [SciTE] 編輯器中執行.

&lt;pre class="brush: jscript"&gt;
REM 設定 Leo 所用的編輯器
set LEO_EDITOR=%Disk%:\wscite\SciTE.exe
&lt;/pre&gt;

[KMOLab]: http://lab.kmol.info/blog/index.html

對於比較簡單的 Python 程式段, 則可以直接在大綱對應的內文區, 直接透過 Ctrl + b 按鈕執行, 而比較複雜需要獨立執行的 Python 程式段, 則建議利用執行緒執行，以免拖累 [Leo Editor] 本體的執行.

&lt;pre class="brush: python"&gt;
import os
import subprocess
import threading
import http.server, ssl

def domake():
    # build directory
    os.chdir("./../")
    server_address = ('localhost', 5443)
    httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print(os.getcwd())
    print("5443 https server started")
    httpd.serve_forever()

# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()
&lt;/pre&gt;

Leo Editor 的入門不容易
----

從 [Leo Editor] 的[開發歷史]來看, 自 1995 年啟動, 歷經使用 Borland C 與 Tkinter 等階段, 直到 2012 年採 Qt 作為圖形介面之後, 才開始穩定下來. 現在更有 [LeoVue] 與 [LeoInteg] 等兩個專案, 分別利用 Javascript 與 Typescript, 將 [Leo Editor] 帶進網際與 Visual Studio Code 的應用領域.

假如再加上最近 Qt 喊出的使用授權大變更, 接下來的 [Leo Editor] 開發可能即將面臨一波更大的轉變.

[Leo Editor] 的入門之所以不容易, 源自於其早期訂下的長遠目標, 因為試圖結合大綱編輯器與 [Literate Programming] 本來就是一條艱困的程式開發道路. 而且 [Leo Editor] 程式設計的思維大量依賴 Python 語法與 [Vim 原理], 同一個 [Leo Editor] 版本在不同操作系統的使用流程, 又因為各種原因而導致有許多獨門克服方法. 即便是同時使用 Mac, Linux 與 Windows 的老手, 都可能因為 [Leo Editor] 程式碼的快速改版而經常碰壁, 更別提初學者面對各種使用門檻時的無奈與慌亂.

[開發歷史]: https://leoeditor.com/history.html
[LeoVue]: https://github.com/kaleguy/leovue
[LeoInteg]: https://github.com/boltex/leointeg
[Literate Programming]: https://en.wikipedia.org/wiki/Literate_programming
[Vim 原理]: https://leoeditor.com/vim-theory.html
[SciTE]: https://www.scintilla.org/SciTE.html

但是又何奈
----

[KMOLab] 使用 [Leo Editor] 的時間已經超過 10 年, 期間仍然找不到其他替代工具. 只能利用 [SciTE] 來補足 [Leo Editor] 在 parse 大檔案過程效率的不足.</t>
<t tx="yen.20210612081616.76"></t>
<t tx="yen.20210612081616.77"></t>
<t tx="yen.20210612081616.78"></t>
<t tx="yen.20210612081616.79"></t>
<t tx="yen.20210612081616.8">@language python
import os

os.system("pelican markdown -o blog -s publishconf.py")
g.es("admin pelican Github 執行完畢")


</t>
<t tx="yen.20210612081616.80"></t>
<t tx="yen.20210612081616.81"></t>
<t tx="yen.20210612081616.82">@language md
---
Title: 2021 開春
Date: 2021-02-10 11:00
Category: Weblog
Tags: 202102
Slug: starting-2021
Author: yen
---

2021 年伊始, 機器學習的程式從原先簡單的演化, 進展到能夠有效控制具有亂數的決策系統, 科技的發展讓人類的工作更加兩極化, 一方可持續開發指使電腦軟硬體從事工作, 而另一方則幾乎必須完全按照電腦軟硬體的指示與命令行事.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20210612081616.83">這樣的發展似乎已經沒了退路.</t>
<t tx="yen.20210612081616.84"></t>
<t tx="yen.20210612081616.85"></t>
<t tx="yen.20210612081616.86"></t>
<t tx="yen.20210612081616.87"></t>
<t tx="yen.20210612081616.88">@language md
---
Title: 資料儲存的永續性
Date: 2021-02-10 11:10
Category: Weblog
Tags: 202102
Slug: data-sustainablity
Author: yen
---

假如將時間倒轉 20 年, 看看當時的電腦程式課程在教些什麼? 大家是如何上課, 結果應該會讓現在這些初出茅廬, 剛剛成年的大一生非常驚訝. 是的, 當年並沒有人手一機, 上課是需要抄筆記的......

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="yen.20210612081616.89">而且當時全球科技界正度過所謂的千禧年之禍, 利用電腦程式產生中文字仍處於 Big-5 的陰影下, 倚天中文仍然到處可見, 即使處在所謂的數位科技前緣, 某些人手上已經有小而美的易利信手機, 口袋裡也放著一個由 HTC 打造的頗有重量 HP [PDA], 但所謂數位資料的永續性, 距離仍然很遠, 因此二十年多年後, 當時能留下與上課有關的數位資料非常有限.

[PDA]: https://en.wikipedia.org/wiki/Personal_digital_assistant
[Openshift]: https://en.wikipedia.org/wiki/Heroku
[Heroku]: https://en.wikipedia.org/wiki/Heroku

之後就在 Google 逐漸成熟, 而 Facebook 騰空出世 7 年後的 2011年, Red Hat 推出可以免費使用的 [Openshift], 不僅能夠伺服 PHP 與 Python, 還可免費存放各種數位資料, 當時以為資料終於可以永續存放的假象, 到 2016 年夢想逐漸破滅, 還好 2016 年之後有 Github 接手, Heroku 也很意外地從 2007 年活到現在, 目前, Github 與 Heroku (只能儲存 500 MB), 加上 Gitlab 的同步資料備份與 Google Drive 上的大檔案存放, 全球網友前撲後繼用隱私換取數位資料免費存放的所謂永續性,  似乎終於有了眉目.

目前教育版的 Google Drive 仍不限容量, 但也許未來的某一天這樣的所謂永續仍會畫上休止符, 大家仍必須有所因應.

資料存至 Google Drive
----

從 &lt;https://github.com/mdecourse/cd2020pj1/blob/master/myflaskapp.py&gt; 可以看出如何利用 Google Drive API, 在網際環境中將數位檔案送到特定伺服器之外, 還能利用 AJAX 存備份至特定 Google Drive 目錄.

&lt;pre class="brush: python"&gt;
@app.route('/saveToDB' , methods=['POST'])
@login_required
def saveToDB():

    """axuploader.js 將檔案上傳後, 將上傳檔案名稱數列, 以 post 回傳到 Flask server.
    
    截至這裡, 表示檔案已經從 client 上傳至 server, 可以再設法通過認證, 將 server 上的檔案上傳到對應的 Google Drive, 並且在上傳後的 GDrive 目錄, 設定特定擷取權限 (例如: 只允許 @gm 用戶下載.
    以下則可將 server 上傳後的擷取目錄與 GDrive 各檔案 ID 存入資料庫, 而檔案擷取則分為 server 擷取與 GDrive 擷取等兩種 url 連結設定
    """

    if request.method == "POST":
        files = request.form["files"]
        # split files string
        files = files.split(",")
        # files 為上傳檔案名稱所組成的數列
        for i in range(len(files)):
            # 逐一將已經存在 server downloads 目錄的檔案, 上傳到 GDrive uploaded 目錄
            fileName = files[i]
            fileLocation = _curdir + "/downloads/" + fileName
            mimeType = mimetypes.MimeTypes().guess_type(fileLocation)[0]
            # for GDrive v2
            #gdriveID = uploadToGdrive(fileName, mimeType)
            # for GDrive v3
            gdriveID = uploadToGdrive3(fileName, mimeType)
            fileSize = str(round(os.path.getsize(fileLocation)/(1024*1024.0), 2)) + " MB"
            date = datetime.datetime.now().strftime("%b %d, %Y - %H:%M:%S")
            user = session.get("user")
            print(user + "|" + str(fileSize) + "|" + str(mimeType) + "|"  + gdriveID)
            # 逐一將上傳檔案名稱存入資料庫, 同時存入mimeType, fileSize 與 gdriveID
            # 資料庫欄位
            #g.db.execute('insert into grouping (user , date, fileName, mimeType, fileSize, memo) values (?, ?, ?, ?, ?, ?)',(user, date, fileName, mimeType, fileSize, "memo"))
            #g.db.commit()
            #flash('已經新增一筆 upload 資料!')
    return "Uploaded fileName and gdriveID save to database"
def uploadToGdrive(fileName, mimeType):
    gauth = GoogleAuth()
    # 必須使用 desktop 版本的 client_secrets.json
    gauth.LoadClientConfigFile("./../gdrive_desktop_client_secrets.json")
    drive = GoogleDrive(gauth)
    
    '''
    # View all folders and file in your Google Drive
    fileList = drive.ListFile({'q': "'root' in parents and trashed=false"}).GetList()
    for file in fileList:
      print('Title: %s, ID: %s' % (file['title'], file['id']))
      # Get the folder ID that you want
      # 檔案會上傳到根目錄下的 uploaded  目錄中
      if(file['title'] == "uploaded"):
          fileID = file['id']
    '''
    # GDrive 上 uploaded 目錄的 fileID
    with open("./../gdrive_uploaded_id.txt", 'r') as content_file:
        fileID = content_file.read()
    
    # 由上述目錄外的檔案讀取 uploaded 目錄對應 ID
    #fileID = "your_folder_file_ID"
    # 上傳檔案名稱為輸入變數
    #fileName = "DemoFile.pdf"
    filePath = _curdir + "/downloads/"
    # parents 為所在 folder, 亦即 uploaded 目錄, fileID 為 uploaded 目錄的 ID
    file1 = drive.CreateFile({"mimeType": mimeType, "parents": [{"kind": "drive#fileLink", "id": fileID}], "title":  fileName})
    file1.SetContentFile(filePath + fileName)
    file1.Upload() # Upload the file.
    # 傳回與上傳檔案對應的 GDrive ID, 將會存入資料庫 gdiveID 欄位
    return file1['id']
    #print('Created file %s with mimeType %s' % (file1['title'], file1['mimeType']))   
    #print("upload fileID:" + str(file1['id']))
    # 以下為下載檔案測試
    # file2 = drive.CreateFile({'id': file1['id']})
    #file2.GetContentFile('./test/downloaded_ModernC.pdf') # Download file as 'downloaded_ModernC.pdf under directory test'.
    
    '''
    file1.Trash()  # Move file to trash.
    file1.UnTrash()  # Move file out of trash.
    file1.Delete()  # Permanently delete the file.
    '''
def uploadToGdrive3(fileName, mimeType):
    # get upload folder id
    # GDrive 上 uploaded 目錄的 fileID
    with open("./../gdrive_uploaded_id.txt", 'r') as content_file:
        folderID = content_file.read()

    creds = None
    with open('./../gdrive_write_token.pickle', 'rb') as token:
        creds = pickle.load(token)
    # 讀進既有的 token, 建立 service
    driveService = build('drive', 'v3', credentials=creds)

    metadata = {
        'name': fileName,
        'mimeType': mimeType,
        # 注意: 必須提供數列格式資料
        'parents': [folderID]
        }

    filePath = _curdir + "/downloads/" + fileName
    media = MediaFileUpload(filePath,
                                            mimetype=mimeType,
                                            chunksize=1024*1024,
                                            resumable=True
                                            )

    gdFile = driveService.files().create(
        body=metadata,
        media_body=media,
        fields='id'
    ).execute()
    fileID = gdFile.get("id")

    return fileID
&lt;/pre&gt;

上述程式利用較新的 GDrive V3 上傳資料之前, 可攜系統必須安裝 google-api-python-client:

&lt;pre class="brush:python"&gt;
# for uploadToGDrive3
# pip install google-api-python-client
# https://github.com/googleapis/google-api-python-client
import pickle
from googleapiclient.discovery import build
from apiclient.http import MediaFileUpload
&lt;/pre&gt;

[Fossil SCM]: https://fossil-scm.org
[BD-R or BD-RE]: https://en.wikipedia.org/wiki/Blu-ray_Disc_recordable

Github, Gitlab 與 Fossil SCM
----

針對 Github 與 Gitlab 的操作, 可以參考 &lt;https://git-scm.com/book/en/v2&gt;, 但是 [Fossil SCM] 的參考資料則相對較少, 以下將針對 [Fossil SCM] 的應用稍加說明, 為了因應未來上述各種網際免費數位儲存資料系統的更迭, 在近端配置 [Fossil SCM], 並用 [BD-R or BD-RE] (25GB) 進行備份, 也是一個不錯的資料永續儲存方案.

[Fossil SCM] 的使用非常簡單, 只要配合操作系統從 &lt;https://fossil-scm.org/home/uv/download.html&gt; 下載相應版本, 並讓系統可以執行 fossil.exe (以 Windows 10 為例) 即可, 唯一要注意的是若操作過程牽涉兩個不同操作系統, 必須透過 fossil version 查驗雙方的版本是否相同.

有關 [Fossil SCM] 的先前參考資料, 可參閱 [Fossil SCM 簡介].

Ubuntu 安裝 fossil scm
----

使用 sudo apt install fossil 安裝 [Fossil SCM] 所取得的版本可以利用 fossil version 檢查. 若版本並非最新版本或與 Windows 10 所用的版本相同, 可以至 &lt;https://fossil-scm.org/home/uv/download.html&gt; 下載最新的 fossil 後, 以 sudo cp /home/user/fossil /usr/bin/, 然後再透過 fossil version 查驗是否已經更新為最新版本.

安裝 stunnel4
----

由於 [Fossil SCM] 並無 https 啟動功能的設置, 因此在實作上必須透過 stunnel SSL 代理主機啟動 https 伺服功能.

首先安裝 stunnel4:

sudo apt install stunnel4

接下來將系統環境設為 HTTPS:

sudo vi /etc/environment

加入 HTTPS=on

並且在 /etc/default/stunnel4 中加入 ENABLED=1

然後透過 sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt, 在 /etc/stunnel/ 目錄中建立所需的 localhost.key 與 localhost.crt

同時建立 /etc/stunnel/stunnel.conf 如下:

&lt;pre class="brush: jscript"&gt;
[https]
accept = your_IPv4_ip:443
accept = :::443
cert = /etc/stunnel/localhost.crt
key = /etc/stunnel/localhost.key
exec = /usr/bin/fossil
execargs = /usr/bin/fossil http /home/user/repository/ --https --nojail --notfound cd2021
&lt;/pre&gt;

實際配置下, 使用 :::443 並無法讓 stunnel 綁定至系統的 ipv6 網址, 必須使用:

&lt;pre class="brush: jscript"&gt;
[https]
accept = 140.xxx.xxx.xxx:443
accept = 2001:288:6004:xx::1:443
cert = /etc/stunnel/localhost.crt
key = /etc/stunnel/localhost.key
exec = /usr/bin/fossil
execargs = /usr/bin/fossil http /home/user/repository/ --https --nojail --notfound cd2021
&lt;/pre&gt;

似乎 stunnel 會自動取最後的 :443 作為 port, 而無需如 https://[ipv6 address]:443 中以 [] 隔開 ipv6 網址與埠號.

execargs = /usr/bin/fossil http /home/user/repository/ --https --nojail --notfound cd2021 設定的意思為 stunnel 代理啟動的指令為 fossil http, 指定 /home/yser/repository/ 作為倉儲目錄, 可以透過 URL 加上倉儲名稱伺服多個 repo.fossil 倉儲, 隨後的 --https 表示要使用 https 協定擷取資料, --nojail 表示不要使用 root 權限啟動, 且不進入 jail 模式, --notfound cd2021 表示內定  https URL 擷取的倉儲為 /home/user/repository/cd2021.fossil

啟動-停止-重新啟動 stunnel4.service
----

sudo systemctl start stunnel4.service

sudo systemctl stop stunnel4.service

sutod systemctl restart stunnel4.service


[Fossil SCM 簡介]: http://mde.tw/2017springcd/blog/intro-fossil-scm.html
</t>
<t tx="yen.20210612081616.9"></t>
<t tx="yen.20210612081616.90"></t>
<t tx="yen.20210612081616.91"></t>
<t tx="yen.20210612081616.92"></t>
<t tx="yen.20210612081616.93"></t>
<t tx="yen.20210612081616.94">@language md
---
Title: Pelican 與 Blogger 內容同步2
Date: 2021-02-10 11:20
Category: Weblog
Tags: 202102
Slug: sync-pelican-and-blogger-content2
Author: yen
---

[cmsimde] 中的 Pelican blog 內容建議採用 config 目錄中的 pelican.leo 進行管理, 主要的資料管理架構採用 [Leo Editor] 中的 [@clean] 標題指令, 能夠與內文指令 [@others] 配合, 利用階層式的文章管理, 區隔網誌摘要與各段內容.

[cmsimde]: https://github.com/mdecourse/cmsimde
[@clean]: https://leoeditor.com/directives.html#clean-path
[@others]: https://leoeditor.com/directives.html#part-2-all-and-others

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others

</t>
<t tx="yen.20210612081616.95">Google Developer Console
----

為了能夠將 [Pelican blog] 在 [Leo Editor] 中的網誌文章推向 [Blogger], 必須要從 [Google developer console] 取得
與 [Blogger] 擷取權限對應的 secret json 檔案. 實際操作流程如下:

進入 Library - &gt; ENABLE APIS AND SERVICES -&gt; 啟用 Blogger API v3

設定 OAuth consent screen 

新增 Credentials -&gt; Desktop-type Oauth 2.0 client -&gt; Download JSON 即可取得 secret.json 檔案.


[Google developer console]: https://console.developers.google.com
[Pelican blog]: https://blog.getpelican.com/
[Blogger]: https://www.blogger.com
[Leo Editor]: https://leoeditor.com/

將 secrets.json 轉為 token.dat
----

轉換前必須確定系統已經安裝 google_auth_oauthlib

pip install google_auth_oauthlib

接著利用下列程式將 secrets.json 轉為 token.dat, 隨後使用者就可利用此一  token.dat 將 [Leo Editor] 中的網誌文章內容傳送到對應的 [Blogger].

下列程式在轉換過程會透過操作系統的內定瀏覽器讓使用者登入與 secrets.json 對應的帳號, 一旦通過認證就可以完成 secrets.json 轉為 token.dat 的流程.

&lt;pre class="brush: python"&gt;
# get secrets: https://console.developers.google.com
# https://developers.google.com/blogger/docs/3.0/using
# pip install google_auth_oauthlib
# under Mac command + b to execute
import pickle
import os
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request


SCOPES = ['https://www.googleapis.com/auth/blogger', ]

# we check if the file tBo store the credentials exists
if not os.path.exists('./../../yen_gm_blogger_token.dat'):

    flow = InstalledAppFlow.from_client_secrets_file('./../../yen_gm_blogger_secrets.json', SCOPES)
    credentials = flow.run_local_server()

    with open('yen_gm_blogger_token.dat', 'wb') as credentials_dat:
        pickle.dump(credentials, credentials_dat)
else:
    with open('yen_gm_blogger_token.dat', 'rb') as credentials_dat:
        credentials = pickle.load(credentials_dat)
service = build('blogger', 'v3', credentials=credentials)
g.es(service)
&lt;/pre&gt;

將 Pelican 文章轉往 Blogger
----

將 Pelican 文章轉投 Blogger 的過程包含新增與編輯, 新增的程式碼如下:

&lt;pre class="brush: python"&gt;
@language python
from markdown import markdown
from oauth2client import client
#from googleapiclient import sample_tools
import os
# 配合使用 credential token
import pickle
from googleapiclient.discovery import build
#from google_auth_oauthlib.flow import InstalledAppFlow
#from google.auth.transport.requests import Request

os.environ['TZ'] = 'Asia/Taipei'
with open('./../../yen_gm_blogger_token.dat', 'rb') as credentials_dat:
    credentials = pickle.load(credentials_dat)
service = build('blogger', 'v3', credentials=credentials)

def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &lt;h2&gt; 標題
content = content.replace("&lt;h2&gt;", "&lt;h2&gt;&lt;font size='4'&gt;")
content = content.replace("&lt;/h2&gt;", "&lt;/font&gt;&lt;/h2&gt;")
# g.es(content)

try:
    '''
    users = service.users()
    # 取得使用者 profile 資料
    user = users.get(userId='self').execute()
    print('網誌名稱: %s' % user['displayName'])
    '''
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    # post_id is now blogs["items"][0]["id"]
    #blog_id = blogs["items"][0]["id"]
    blog_id = "2403495118140401474"
    #for blog in blogs['items']:
        #print(blog['name'], blog['url'])
    posts = service.posts()
    # 新增網誌 post 時, 需要 post_id
    body = {
    "kind": "blogger#post",
    "id": blog_id,
    "title": title,
    # 利用 markdown 函式, 將 .md 的內文轉為 html, 作為 Blogger 的文章內容
    "content": content,
    "labels": tags
    }
    insert = posts.insert(blogId=blog_id, body=body)
    posts_doc = insert.execute()
    post_id = posts_doc["id"]
    #print(posts_doc)
    # 改用 credential token 後不會產生 blogger.dat
    #os.remove("blogger.dat")
    # 利用最後的 child 節點來儲存 post_id
    to_save_post_id = p.insertAsLastChild()   
    # 改為內文為空的節點, id 直接標在 head 標題 
    to_save_post_id.b = ""
    to_save_post_id.h = post_id
    # 因為新增節點, commander 必須 redraw
    c.redraw()
    g.es("post_id 為", post_id)
    g.es("已經將資料送往 KBlogger!")
except(client.AccessTokenRefreshError):
    g.es("error")
&lt;/pre&gt;

完成上述文章轉投至 Blogger 之後, [Blogger] 會傳回該文章的 post id, 而新增程式會將此 id 放在該筆 @clean 文章節點的最末端, 由於該  post id 節點只有標題而無內文, 因此即便內縮成為 @clean 的子節點, 也不會在文章中增加任何資料, 但若該網誌內容同步推向一個以上的 [Blogger], 則使用者需要將該 post if 內縮外, 還需要在此 post id 節點的上屬節點增加標註, 說明該 post id 所屬的網誌標題或代號.

至於當該文章內容經過編修後, 使用者若希望將新內容推向遠端同步 [Blogger], 則必須將原先新增的 [Blogger] post id 移至該 @clean 文章的最末端, 以便讓程式可以更新與此 post id 對應的 [Blogger] 文章內容.

可用於編輯 [Blogger] 文章的程式碼如下:
    
&lt;pre class="brush: python"&gt;
@language python
from markdown import markdown
from oauth2client import client
#from googleapiclient import sample_tools
import os
# 配合使用 credential token
import pickle
from googleapiclient.discovery import build
#from google_auth_oauthlib.flow import InstalledAppFlow
#from google.auth.transport.requests import Request

os.environ['TZ'] = 'Asia/Taipei'
with open('./../../yen_gm_blogger_token.dat', 'rb') as credentials_dat:
    credentials = pickle.load(credentials_dat)
service = build('blogger', 'v3', credentials=credentials)

def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &lt;h2&gt; 標題
content = content.replace("&lt;h2&gt;", "&lt;h2&gt;&lt;font size='4'&gt;")
content = content.replace("&lt;/h2&gt;", "&lt;/font&gt;&lt;/h2&gt;")
# g.es(content)

try:
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    #blog_id = blogs["items"][0]["id"]
    blog_id = "2403495118140401474"
    # 設法取得原 post 的 id
    postid_outline = p.getLastChild()
    # 直接從標題取得 post 的 id 號碼
    post_id = postid_outline.h
    posts = service.posts()
    # 更新網誌文章時的 body
    body = {
    "kind": "blogger#post",
    "title": title,
    "content": content
    }
    # need to save postId to outline head
    update = posts.update(blogId=blog_id, postId=post_id, body=body, publish=True)
    update_doc = update.execute()
    # 使用 credential token 後, 無需刪除 blogger.dat
    #os.remove("blogger.dat")
    g.es("post_id 為", post_id)
    g.es("已經將更新資料送往 K Blogger!")
except(client.AccessTokenRefreshError):
    g.es("error")
&lt;/pre&gt;
</t>
<t tx="yen.20210612081616.96"></t>
<t tx="yen.20210612081616.97"></t>
<t tx="yen.20210612081616.98"></t>
<t tx="yen.20210612081616.99"></t>
<t tx="yen.20210612081822.1">@language rest
@wrap

This @settings tree contains all active settings.

Settings outside this tree have no effect.

The node "Qt Gui Stylesheet settings" contains most of the setting relating to appearance.
</t>
<t tx="yen.20210612081822.10"></t>
<t tx="yen.20210612081822.100"></t>
<t tx="yen.20210612081822.1000"></t>
<t tx="yen.20210612081822.1001"></t>
<t tx="yen.20210612081822.1002"></t>
<t tx="yen.20210612081822.1003"></t>
<t tx="yen.20210612081822.1004"></t>
<t tx="yen.20210612081822.1005"></t>
<t tx="yen.20210612081822.1006"></t>
<t tx="yen.20210612081822.1007"></t>
<t tx="yen.20210612081822.1008"></t>
<t tx="yen.20210612081822.1009"></t>
<t tx="yen.20210612081822.101"></t>
<t tx="yen.20210612081822.1010"></t>
<t tx="yen.20210612081822.1011"></t>
<t tx="yen.20210612081822.1012"></t>
<t tx="yen.20210612081822.1013"></t>
<t tx="yen.20210612081822.1014"></t>
<t tx="yen.20210612081822.1015"></t>
<t tx="yen.20210612081822.1016"></t>
<t tx="yen.20210612081822.1017">Open &amp;LeoSettings.leo</t>
<t tx="yen.20210612081822.1018">Open &amp;myLeoSettings.leo
</t>
<t tx="yen.20210612081822.1019">Open A &amp;Theme File</t>
<t tx="yen.20210612081822.102"></t>
<t tx="yen.20210612081822.1020">&amp;Select Local @settings tree</t>
<t tx="yen.20210612081822.1021"></t>
<t tx="yen.20210612081822.1022"></t>
<t tx="yen.20210612081822.1023"></t>
<t tx="yen.20210612081822.1024"></t>
<t tx="yen.20210612081822.1025"></t>
<t tx="yen.20210612081822.1026"></t>
<t tx="yen.20210612081822.1027"></t>
<t tx="yen.20210612081822.1028"></t>
<t tx="yen.20210612081822.1029"></t>
<t tx="yen.20210612081822.103"></t>
<t tx="yen.20210612081822.1030"></t>
<t tx="yen.20210612081822.1031"></t>
<t tx="yen.20210612081822.1032"></t>
<t tx="yen.20210612081822.1033"></t>
<t tx="yen.20210612081822.1034"></t>
<t tx="yen.20210612081822.1035"></t>
<t tx="yen.20210612081822.1036"></t>
<t tx="yen.20210612081822.1037"></t>
<t tx="yen.20210612081822.1038"></t>
<t tx="yen.20210612081822.1039"></t>
<t tx="yen.20210612081822.104"></t>
<t tx="yen.20210612081822.1040"></t>
<t tx="yen.20210612081822.1041"></t>
<t tx="yen.20210612081822.1042"></t>
<t tx="yen.20210612081822.1043"></t>
<t tx="yen.20210612081822.1044"></t>
<t tx="yen.20210612081822.1045"></t>
<t tx="yen.20210612081822.1046">Open desktop-integration</t>
<t tx="yen.20210612081822.1047"></t>
<t tx="yen.20210612081822.1048"></t>
<t tx="yen.20210612081822.1049"></t>
<t tx="yen.20210612081822.105"></t>
<t tx="yen.20210612081822.1050"></t>
<t tx="yen.20210612081822.1051"></t>
<t tx="yen.20210612081822.1052"></t>
<t tx="yen.20210612081822.1053"></t>
<t tx="yen.20210612081822.1054"></t>
<t tx="yen.20210612081822.1055"></t>
<t tx="yen.20210612081822.1056">Pas&amp;te Node As Clone</t>
<t tx="yen.20210612081822.1057"></t>
<t tx="yen.20210612081822.1058">&amp;Demote node</t>
<t tx="yen.20210612081822.1059">&amp;Promote Node</t>
<t tx="yen.20210612081822.106"></t>
<t tx="yen.20210612081822.1060"></t>
<t tx="yen.20210612081822.1061"></t>
<t tx="yen.20210612081822.1062"></t>
<t tx="yen.20210612081822.1063"></t>
<t tx="yen.20210612081822.1064"></t>
<t tx="yen.20210612081822.1065">This node just keeps track of the accelerators in the siblings.</t>
<t tx="yen.20210612081822.1066"></t>
<t tx="yen.20210612081822.1067"></t>
<t tx="yen.20210612081822.1068"></t>
<t tx="yen.20210612081822.1069"></t>
<t tx="yen.20210612081822.107"></t>
<t tx="yen.20210612081822.1070"></t>
<t tx="yen.20210612081822.1071"></t>
<t tx="yen.20210612081822.1072"></t>
<t tx="yen.20210612081822.1073"></t>
<t tx="yen.20210612081822.1074"></t>
<t tx="yen.20210612081822.1075"></t>
<t tx="yen.20210612081822.1076"></t>
<t tx="yen.20210612081822.1077"></t>
<t tx="yen.20210612081822.1078"></t>
<t tx="yen.20210612081822.1079"></t>
<t tx="yen.20210612081822.108"></t>
<t tx="yen.20210612081822.1080"></t>
<t tx="yen.20210612081822.1081"></t>
<t tx="yen.20210612081822.1082"></t>
<t tx="yen.20210612081822.1083"></t>
<t tx="yen.20210612081822.1084"></t>
<t tx="yen.20210612081822.1085"></t>
<t tx="yen.20210612081822.1086"></t>
<t tx="yen.20210612081822.1087"></t>
<t tx="yen.20210612081822.1088"></t>
<t tx="yen.20210612081822.1089"></t>
<t tx="yen.20210612081822.109"></t>
<t tx="yen.20210612081822.1090">Go To &amp;First Node</t>
<t tx="yen.20210612081822.1091">Go To First V&amp;isible</t>
<t tx="yen.20210612081822.1092">Go To First Si&amp;bling</t>
<t tx="yen.20210612081822.1093"></t>
<t tx="yen.20210612081822.1094">Go To Next C&amp;hanged</t>
<t tx="yen.20210612081822.1095">Go To Next &amp;Clone</t>
<t tx="yen.20210612081822.1096">Go To Next &amp;Marked</t>
<t tx="yen.20210612081822.1097">Go To Next N&amp;ode</t>
<t tx="yen.20210612081822.1098">Go To Next &amp;Sibling</t>
<t tx="yen.20210612081822.1099">Go To Next Visibl&amp;e</t>
<t tx="yen.20210612081822.11"></t>
<t tx="yen.20210612081822.110"></t>
<t tx="yen.20210612081822.1100">Go To Next Visite&amp;d</t>
<t tx="yen.20210612081822.1101"></t>
<t tx="yen.20210612081822.1102">Go To P&amp;arent</t>
<t tx="yen.20210612081822.1103"></t>
<t tx="yen.20210612081822.1104">Go To &amp;Prev Node</t>
<t tx="yen.20210612081822.1105">Go To P&amp;rev Sibling</t>
<t tx="yen.20210612081822.1106">Go To Pre&amp;v Visible</t>
<t tx="yen.20210612081822.1107">Go To Prev Visi&amp;ted</t>
<t tx="yen.20210612081822.1108"></t>
<t tx="yen.20210612081822.1109">Go To Last Node</t>
<t tx="yen.20210612081822.111"></t>
<t tx="yen.20210612081822.1110">Go To Last Siblin&amp;g</t>
<t tx="yen.20210612081822.1111">Go To &amp;Last Visible</t>
<t tx="yen.20210612081822.1112"></t>
<t tx="yen.20210612081822.1113"></t>
<t tx="yen.20210612081822.1114">D&amp;e-Hoist</t>
<t tx="yen.20210612081822.1115"></t>
<t tx="yen.20210612081822.1116"></t>
<t tx="yen.20210612081822.1117"></t>
<t tx="yen.20210612081822.1118"></t>
<t tx="yen.20210612081822.1119"></t>
<t tx="yen.20210612081822.112"></t>
<t tx="yen.20210612081822.1120"></t>
<t tx="yen.20210612081822.1121"></t>
<t tx="yen.20210612081822.1122"></t>
<t tx="yen.20210612081822.1123"></t>
<t tx="yen.20210612081822.1124"></t>
<t tx="yen.20210612081822.1125"></t>
<t tx="yen.20210612081822.1126"></t>
<t tx="yen.20210612081822.1127">Move &amp;Down</t>
<t tx="yen.20210612081822.1128">Move &amp;Left</t>
<t tx="yen.20210612081822.1129">Move &amp;Right</t>
<t tx="yen.20210612081822.113"></t>
<t tx="yen.20210612081822.1130">Move &amp;Up</t>
<t tx="yen.20210612081822.1131"></t>
<t tx="yen.20210612081822.1132"></t>
<t tx="yen.20210612081822.1133"></t>
<t tx="yen.20210612081822.1134"></t>
<t tx="yen.20210612081822.1135">Print Plugins &amp;Info</t>
<t tx="yen.20210612081822.1136"></t>
<t tx="yen.20210612081822.1137"></t>
<t tx="yen.20210612081822.1138"></t>
<t tx="yen.20210612081822.1139"></t>
<t tx="yen.20210612081822.114"></t>
<t tx="yen.20210612081822.1140"></t>
<t tx="yen.20210612081822.1141"></t>
<t tx="yen.20210612081822.1142"></t>
<t tx="yen.20210612081822.1143"></t>
<t tx="yen.20210612081822.1144"></t>
<t tx="yen.20210612081822.1145"></t>
<t tx="yen.20210612081822.1146"></t>
<t tx="yen.20210612081822.1147"></t>
<t tx="yen.20210612081822.1148"></t>
<t tx="yen.20210612081822.1149"></t>
<t tx="yen.20210612081822.115"></t>
<t tx="yen.20210612081822.1150"></t>
<t tx="yen.20210612081822.1151"></t>
<t tx="yen.20210612081822.1152"></t>
<t tx="yen.20210612081822.1153"></t>
<t tx="yen.20210612081822.1154"></t>
<t tx="yen.20210612081822.1155"></t>
<t tx="yen.20210612081822.1156"></t>
<t tx="yen.20210612081822.1157"></t>
<t tx="yen.20210612081822.1158"></t>
<t tx="yen.20210612081822.1159"></t>
<t tx="yen.20210612081822.116"></t>
<t tx="yen.20210612081822.1160"></t>
<t tx="yen.20210612081822.1161"></t>
<t tx="yen.20210612081822.1162">Open External &amp;Debugger</t>
<t tx="yen.20210612081822.1163">Open &amp;Pdb Debugger</t>
<t tx="yen.20210612081822.1164"></t>
<t tx="yen.20210612081822.1165"></t>
<t tx="yen.20210612081822.1166"></t>
<t tx="yen.20210612081822.1167"></t>
<t tx="yen.20210612081822.1168"></t>
<t tx="yen.20210612081822.1169"></t>
<t tx="yen.20210612081822.117"></t>
<t tx="yen.20210612081822.1170"></t>
<t tx="yen.20210612081822.1171"></t>
<t tx="yen.20210612081822.1172"></t>
<t tx="yen.20210612081822.1173"></t>
<t tx="yen.20210612081822.1174"></t>
<t tx="yen.20210612081822.1175"></t>
<t tx="yen.20210612081822.1176"></t>
<t tx="yen.20210612081822.1177"></t>
<t tx="yen.20210612081822.1178"></t>
<t tx="yen.20210612081822.1179"></t>
<t tx="yen.20210612081822.118"></t>
<t tx="yen.20210612081822.1180"></t>
<t tx="yen.20210612081822.1181"></t>
<t tx="yen.20210612081822.1182"></t>
<t tx="yen.20210612081822.1183"></t>
<t tx="yen.20210612081822.1184"></t>
<t tx="yen.20210612081822.1185"></t>
<t tx="yen.20210612081822.1186"></t>
<t tx="yen.20210612081822.1187"></t>
<t tx="yen.20210612081822.1188"></t>
<t tx="yen.20210612081822.1189"></t>
<t tx="yen.20210612081822.119"></t>
<t tx="yen.20210612081822.1190"></t>
<t tx="yen.20210612081822.1191"></t>
<t tx="yen.20210612081822.1192"></t>
<t tx="yen.20210612081822.1193"></t>
<t tx="yen.20210612081822.1194"></t>
<t tx="yen.20210612081822.1195"></t>
<t tx="yen.20210612081822.1196"></t>
<t tx="yen.20210612081822.1197"></t>
<t tx="yen.20210612081822.1198"></t>
<t tx="yen.20210612081822.1199"></t>
<t tx="yen.20210612081822.12"></t>
<t tx="yen.20210612081822.120"></t>
<t tx="yen.20210612081822.1200"></t>
<t tx="yen.20210612081822.1201"></t>
<t tx="yen.20210612081822.1202"></t>
<t tx="yen.20210612081822.1203"></t>
<t tx="yen.20210612081822.1204"></t>
<t tx="yen.20210612081822.1205"></t>
<t tx="yen.20210612081822.1206"></t>
<t tx="yen.20210612081822.1207"></t>
<t tx="yen.20210612081822.1208"></t>
<t tx="yen.20210612081822.1209"></t>
<t tx="yen.20210612081822.121"></t>
<t tx="yen.20210612081822.1210"></t>
<t tx="yen.20210612081822.1211"></t>
<t tx="yen.20210612081822.1212"></t>
<t tx="yen.20210612081822.1213"></t>
<t tx="yen.20210612081822.1214"></t>
<t tx="yen.20210612081822.1215"></t>
<t tx="yen.20210612081822.1216"></t>
<t tx="yen.20210612081822.1217"></t>
<t tx="yen.20210612081822.1218"></t>
<t tx="yen.20210612081822.1219"></t>
<t tx="yen.20210612081822.122"></t>
<t tx="yen.20210612081822.1220"></t>
<t tx="yen.20210612081822.1221"></t>
<t tx="yen.20210612081822.1222"></t>
<t tx="yen.20210612081822.1223"></t>
<t tx="yen.20210612081822.1224"></t>
<t tx="yen.20210612081822.1225"></t>
<t tx="yen.20210612081822.1226"></t>
<t tx="yen.20210612081822.1227"></t>
<t tx="yen.20210612081822.1228"></t>
<t tx="yen.20210612081822.1229"></t>
<t tx="yen.20210612081822.123"></t>
<t tx="yen.20210612081822.1230"></t>
<t tx="yen.20210612081822.1231"></t>
<t tx="yen.20210612081822.1232"></t>
<t tx="yen.20210612081822.1233"></t>
<t tx="yen.20210612081822.1234"></t>
<t tx="yen.20210612081822.1235"></t>
<t tx="yen.20210612081822.1236"></t>
<t tx="yen.20210612081822.1237"></t>
<t tx="yen.20210612081822.1238">Text &amp;Tutorials</t>
<t tx="yen.20210612081822.1239">&amp;Video Tutorials</t>
<t tx="yen.20210612081822.124"></t>
<t tx="yen.20210612081822.1240"></t>
<t tx="yen.20210612081822.1241"></t>
<t tx="yen.20210612081822.1242">@popup body is the default menu for
right clicks in the body pane.
</t>
<t tx="yen.20210612081822.1243">edit-menu

# This will include the contents of @popup edit-text </t>
<t tx="yen.20210612081822.1244"></t>
<t tx="yen.20210612081822.1245"></t>
<t tx="yen.20210612081822.1246">Indent</t>
<t tx="yen.20210612081822.1247">Dedent</t>
<t tx="yen.20210612081822.1248"></t>
<t tx="yen.20210612081822.1249"></t>
<t tx="yen.20210612081822.125"></t>
<t tx="yen.20210612081822.1250"></t>
<t tx="yen.20210612081822.1251">recent-files-menu

# This will include a copy of @popup recent-files-menu</t>
<t tx="yen.20210612081822.1252"></t>
<t tx="yen.20210612081822.1253"></t>
<t tx="yen.20210612081822.1254"></t>
<t tx="yen.20210612081822.1255">rclick-gen-context-sensitive-commands

# This is an example of a menu generator command. It will scan the
body text for
# occuurances of hyperlinks, or section headings in the current line
- Hide quoted text -
or in the
# selected text and append items to the menu that will invoke a
webbrowser or
# jump to the section as appropriate.
</t>
<t tx="yen.20210612081822.1256">@popup log is the default menu for
right clicks in the log pane.</t>
<t tx="yen.20210612081822.1257">edit-menu</t>
<t tx="yen.20210612081822.1258">@popup find-text is the default menu
for right clicks in the find text entry in the find panel.</t>
<t tx="yen.20210612081822.1259">edit-menu</t>
<t tx="yen.20210612081822.126"></t>
<t tx="yen.20210612081822.1260">@popup change-text is the default
menu for right clicks in the change text entry in the find panel.</t>
<t tx="yen.20210612081822.1261">find-text</t>
<t tx="yen.20210612081822.1262">@popup canvas is the default menu
for right clicks in the tree canvas that occur outside any other tree
widget.</t>
<t tx="yen.20210612081822.1263">to-chapter-fragment</t>
<t tx="yen.20210612081822.1264"></t>
<t tx="yen.20210612081822.1265"></t>
<t tx="yen.20210612081822.1266"></t>
<t tx="yen.20210612081822.1267">@popup headline is the default menu
for right clicks in the text part of the headline.</t>
<t tx="yen.20210612081822.1268">@popup iconbox is the default menu
for right clicks in the icon box pane.  This will normally be
overridden by the cleo menu.</t>
<t tx="yen.20210612081822.1269">@popup plusbox is the default menu
for right clicks on the plusbox.</t>
<t tx="yen.20210612081822.127"></t>
<t tx="yen.20210612081822.1270"></t>
<t tx="yen.20210612081822.1271"></t>
<t tx="yen.20210612081822.1272">Cut

icon = Tango/16x16/actions/editcut.png</t>
<t tx="yen.20210612081822.1273">Copy

icon = Tango/16x16/actions/editcopy.png</t>
<t tx="yen.20210612081822.1274">Paste

icon = Tango/16x16/actions/editpaste.png</t>
<t tx="yen.20210612081822.1275"></t>
<t tx="yen.20210612081822.1276">Select All
#First line must be blank as we want to work out the
#label based on the command, key = value pairs may follow.</t>
<t tx="yen.20210612081822.1277">@popup recent-files-menu is a
fragment meant to be included in other menus.

It consists of a single cascade menu which opens to show a list of
recent files. </t>
<t tx="yen.20210612081822.1278"></t>
<t tx="yen.20210612081822.1279">rclick-gen-recent-files-list</t>
<t tx="yen.20210612081822.128"></t>
<t tx="yen.20210612081822.1280"></t>
<t tx="yen.20210612081822.1281"></t>
<t tx="yen.20210612081822.1282">clone-node-to-chapter-menu</t>
<t tx="yen.20210612081822.1283"></t>
<t tx="yen.20210612081822.1284">copy-node-to-chapter-menu</t>
<t tx="yen.20210612081822.1285"></t>
<t tx="yen.20210612081822.1286">move-node-to-chapter-menu</t>
<t tx="yen.20210612081822.1287">chapter-select</t>
<t tx="yen.20210612081822.1288">select-chapter-menu</t>
<t tx="yen.20210612081822.1289">Qt ui uses a different (simpler) setup for creating context menus,
a single @data contextmenu_commands node. </t>
<t tx="yen.20210612081822.129"></t>
<t tx="yen.20210612081822.1290"># Important: the contextmenu.py plugin must be enabled
# for these settings to take effect.

# Add commands to contextmenu
# The format is *either*:
#   &lt;command&gt; SPACE &lt;description&gt;
# *or( a single "-" giving a menu separator.

undo Undo
redo Redo
-
copy-text Copy Text
cut-text Cut Text
paste-text Paste Text
select-all Select All Text
-
copy-node Copy Node
cut-node Cut Node
delete-node Delete Node
paste-node Paste Node
paste-retaining-clones Paste Node As Clone
-</t>
<t tx="yen.20210612081822.1291">The body of @openwith nodes contains one or more lines of the following
form::

   tag: value

The possible tags are be::

    kind: &lt;a string&gt;

The value specifies the **opener logic**, that is, the method used to
launch the external editor, one of 'subprocess.Popen', 'os.startfile',
'os.spawnl', 'os.spawnv', 'exec'.

    arg: &lt;a string&gt;

There may be many such arg lines. Each line will be a string to be passed
as an argument to the opener logic.

Quotes in &lt;a string&gt; will be *retained*, allowing the user to specify
exactly the arguments to be passed to opener logic.</t>
<t tx="yen.20210612081822.1292">Settings for MacOs or Linux...</t>
<t tx="yen.20210612081822.1293">ext: .py
kind: subprocess.Popen
arg: /usr/bin/scite
</t>
<t tx="yen.20210612081822.1294">Settings for Windows...
</t>
<t tx="yen.20210612081822.1295">ext:    .py
kind:   os.startfile
arg:    idle

# Does not work
    # ext:    .py
    # kind:   subprocess.Popen
    # arg:    pythonw
    # arg:    "%PYTHONHOME%/Lib/idlelib/idle.pyw"

</t>
<t tx="yen.20210612081822.1296">ext:    .txt
arg:    "%ProgramFiles%\OpenOffice 4\program\swriter.exe"
kind:   subprocess.Popen
</t>
<t tx="yen.20210612081822.1297">ext:    .txt
kind:   subprocess.Popen
arg:    C:\apps\SciTE\scite.exe
</t>
<t tx="yen.20210612081822.1298">ext:    
kind:   subprocess.Popen
arg:    "C:/Program Files/Microsoft Office/Office/WINWORD.exe"</t>
<t tx="yen.20210612081822.1299">ext:    
kind:   subprocess.Popen
arg:    "%ProgramFiles%/Windows NT/Accessories/wordpad.exe"
</t>
<t tx="yen.20210612081822.13"></t>
<t tx="yen.20210612081822.130">cornsilk

</t>
<t tx="yen.20210612081822.1300">If True: Save the Leo file and all modified derived files every time the external editor saves a modified file.

If False: Don't save the Leo file or any derived files when the external editor saves a file.</t>
<t tx="yen.20210612081822.1301">If True: When a file is saved by the external editor the node associated with that file is becomes that selected node in Leo.

If False: The current node remains selected when a file, associated with a different node, is saved by the external editor.</t>
<t tx="yen.20210612081822.1302">Only supported with the mod_tempfname.py plugin.

True: The plugin will store temporary files utilizing cleaner
file names (no unique number is appended to the node's headline text).
Unique temporary directory paths are used to insure unique files are
created by creating temporary directories reflecting each node's ancestor
nodes in the Leo outline. Note: Do not have multiple sibling nodes (nodes
having the same parent node) in Leo with the same headline text. There will
be a conflict if both are opened in an external editor at the same time.

False: The plugin will store temporary files with an appended
unique number to insure unique temporary filenames.
</t>
<t tx="yen.20210612081822.1303">Only supported with the mod_tempfname.py plugin.

True: The open-with commands will use the file extension of the node's
derived file for the extension of the temporary file passed to the external
editor. This can be useful for external editors that are providing text
highlighting or other file type specific capabilities.

False or no derived file exists for that node: The open-with commands will
use the file extension of the node's default language (set by the @language
command) or '.txt' if none exists.</t>
<t tx="yen.20210612081822.1304">This data is used by SettingsFinder.build_menu() to build the
`Edit settings` submenu of the `Settings` menu.  You should *not*
need to copy this to your personal settings.  If this data doesn't
reference settings that should be findable under the `Edit settings`
submenu, please report[1] them for addition in the distributed
version of Leo.

[1] leo-editor@googlegroups.com or https://github.com/leo-editor/leo-editor/issues
</t>
<t tx="yen.20210612081822.1305"></t>
<t tx="yen.20210612081822.1306"></t>
<t tx="yen.20210612081822.1307">body-bg</t>
<t tx="yen.20210612081822.1308">body-fg</t>
<t tx="yen.20210612081822.1309">body-sel-fg</t>
<t tx="yen.20210612081822.131"></t>
<t tx="yen.20210612081822.1310">body-sel-bg</t>
<t tx="yen.20210612081822.1311"></t>
<t tx="yen.20210612081822.1312">focused-border-focus-color</t>
<t tx="yen.20210612081822.1313">focused-border-unfocus-color</t>
<t tx="yen.20210612081822.1314"></t>
<t tx="yen.20210612081822.1315">run-script-btn-bg</t>
<t tx="yen.20210612081822.1316">debug-script-btn-bg</t>
<t tx="yen.20210612081822.1317">script-button-button-btn-bg</t>
<t tx="yen.20210612081822.1318">script-button-btn-bg</t>
<t tx="yen.20210612081822.1319">generic-button-btn-bg</t>
<t tx="yen.20210612081822.132"></t>
<t tx="yen.20210612081822.1320">quick-move-btn-bg</t>
<t tx="yen.20210612081822.1321">interact-btn-bg</t>
<t tx="yen.20210612081822.1322">at-button-btn-bg</t>
<t tx="yen.20210612081822.1323"></t>
<t tx="yen.20210612081822.1324">find-tab-bg</t>
<t tx="yen.20210612081822.1325"></t>
<t tx="yen.20210612081822.1326">gutter-bg</t>
<t tx="yen.20210612081822.1327">gutter-fg</t>
<t tx="yen.20210612081822.1328"></t>
<t tx="yen.20210612081822.1329">log-fg</t>
<t tx="yen.20210612081822.133"></t>
<t tx="yen.20210612081822.1330">log-bg</t>
<t tx="yen.20210612081822.1331"></t>
<t tx="yen.20210612081822.1332">minibuffer-fg</t>
<t tx="yen.20210612081822.1333">minibuffer-bg</t>
<t tx="yen.20210612081822.1334">minibuffer-sel-fg</t>
<t tx="yen.20210612081822.1335">minibuffer-sel-bg</t>
<t tx="yen.20210612081822.1336"></t>
<t tx="yen.20210612081822.1337"></t>
<t tx="yen.20210612081822.1338">tree-fg</t>
<t tx="yen.20210612081822.1339">tree-bg</t>
<t tx="yen.20210612081822.134"></t>
<t tx="yen.20210612081822.1340"></t>
<t tx="yen.20210612081822.1341">head-fg</t>
<t tx="yen.20210612081822.1342">head-bg</t>
<t tx="yen.20210612081822.1343">head-sel-fg</t>
<t tx="yen.20210612081822.1344">head-sel-bg</t>
<t tx="yen.20210612081822.1345"></t>
<t tx="yen.20210612081822.1346">edit-label-border</t>
<t tx="yen.20210612081822.1347">edit-label-margin</t>
<t tx="yen.20210612081822.1348">edit-label-bg</t>
<t tx="yen.20210612081822.1349">edit-label-fg</t>
<t tx="yen.20210612081822.135"></t>
<t tx="yen.20210612081822.1350"># These are provided for compatibility with old settings.
</t>
<t tx="yen.20210612081822.1351">text-foreground</t>
<t tx="yen.20210612081822.1352">text-foreground-body</t>
<t tx="yen.20210612081822.1353">text-foreground-tree</t>
<t tx="yen.20210612081822.1354">text-foreground-log</t>
<t tx="yen.20210612081822.1355"></t>
<t tx="yen.20210612081822.1356">render-bg</t>
<t tx="yen.20210612081822.1357">render-fg</t>
<t tx="yen.20210612081822.1358"></t>
<t tx="yen.20210612081822.1359">scroll-area-bg</t>
<t tx="yen.20210612081822.136">Was @LeoYellow</t>
<t tx="yen.20210612081822.1360"></t>
<t tx="yen.20210612081822.1361">splitter-bg</t>
<t tx="yen.20210612081822.1362">splitter-handle-bg</t>
<t tx="yen.20210612081822.1363">splitter-border-fg</t>
<t tx="yen.20210612081822.1364">splitter-border-style</t>
<t tx="yen.20210612081822.1365"></t>
<t tx="yen.20210612081822.1366">status-bg</t>
<t tx="yen.20210612081822.1367">status-fg</t>
<t tx="yen.20210612081822.1368">status-border-style</t>
<t tx="yen.20210612081822.1369">status-border-color</t>
<t tx="yen.20210612081822.137">New.</t>
<t tx="yen.20210612081822.1370"></t>
<t tx="yen.20210612081822.1371">find-found-bg</t>
<t tx="yen.20210612081822.1372">find-found-fg</t>
<t tx="yen.20210612081822.1373">find-not-found-bg</t>
<t tx="yen.20210612081822.1374">find-not-found-fg</t>
<t tx="yen.20210612081822.1375"></t>
<t tx="yen.20210612081822.1376">frame-bg</t>
<t tx="yen.20210612081822.1377">stacked-widget-border-color</t>
<t tx="yen.20210612081822.1378">stacked-widget-bg</t>
<t tx="yen.20210612081822.1379">tabbed-widget-bg</t>
<t tx="yen.20210612081822.138"># These are provided for compatibility with old settings.
</t>
<t tx="yen.20210612081822.1380">Important: changing the Basic Font settings below should be all you need to
do at first. All other font settings are defined in terms of the basic fonts.</t>
<t tx="yen.20210612081822.1381"># All other fonts are defined in terms of these basic fonts.
# Changing the basic fonts are all that most users will want to do.</t>
<t tx="yen.20210612081822.1382">font-family</t>
<t tx="yen.20210612081822.1383">font-size</t>
<t tx="yen.20210612081822.1384">medium-font-size</t>
<t tx="yen.20210612081822.1385">small-font-size</t>
<t tx="yen.20210612081822.1386">font-style</t>
<t tx="yen.20210612081822.1387">font-weight</t>
<t tx="yen.20210612081822.1388"></t>
<t tx="yen.20210612081822.1389">body-font-family</t>
<t tx="yen.20210612081822.139"></t>
<t tx="yen.20210612081822.1390">body-font-size</t>
<t tx="yen.20210612081822.1391">body-font-style</t>
<t tx="yen.20210612081822.1392">body-font-weight</t>
<t tx="yen.20210612081822.1393">Warning: These affect system dialogs.

Don't change these unless you are aware of the consequences</t>
<t tx="yen.20210612081822.1394">dialog-font-family</t>
<t tx="yen.20210612081822.1395">dialog-font-size</t>
<t tx="yen.20210612081822.1396">dialog-font-weight</t>
<t tx="yen.20210612081822.1397">dialog-font-style</t>
<t tx="yen.20210612081822.1398"></t>
<t tx="yen.20210612081822.1399">checkbox-font-family</t>
<t tx="yen.20210612081822.14"></t>
<t tx="yen.20210612081822.140"></t>
<t tx="yen.20210612081822.1400">checkbox-font-size</t>
<t tx="yen.20210612081822.1401">find-font-family</t>
<t tx="yen.20210612081822.1402">find-font-size</t>
<t tx="yen.20210612081822.1403">find-font-style</t>
<t tx="yen.20210612081822.1404">find-font-weight</t>
<t tx="yen.20210612081822.1405">find-pattern-font-family</t>
<t tx="yen.20210612081822.1406"></t>
<t tx="yen.20210612081822.1407">gutter-font-family</t>
<t tx="yen.20210612081822.1408">gutter-font-size</t>
<t tx="yen.20210612081822.1409">gutter-font-style</t>
<t tx="yen.20210612081822.141"></t>
<t tx="yen.20210612081822.1410">gutter-font-weight</t>
<t tx="yen.20210612081822.1411"></t>
<t tx="yen.20210612081822.1412">log-sel-fg</t>
<t tx="yen.20210612081822.1413">log-sel-bg</t>
<t tx="yen.20210612081822.1414">log-font-family</t>
<t tx="yen.20210612081822.1415">log-font-size</t>
<t tx="yen.20210612081822.1416">log-font-weight</t>
<t tx="yen.20210612081822.1417">log-font-style</t>
<t tx="yen.20210612081822.1418"></t>
<t tx="yen.20210612081822.1419">minibuffer-font-family</t>
<t tx="yen.20210612081822.142"></t>
<t tx="yen.20210612081822.1420">minibuffer-font-size</t>
<t tx="yen.20210612081822.1421">minibuffer-font-weight</t>
<t tx="yen.20210612081822.1422">minibuffer-font-style</t>
<t tx="yen.20210612081822.1423"></t>
<t tx="yen.20210612081822.1424"></t>
<t tx="yen.20210612081822.1425">tree-font-family</t>
<t tx="yen.20210612081822.1426">tree-font-size</t>
<t tx="yen.20210612081822.1427">tree-font-weight</t>
<t tx="yen.20210612081822.1428">tree-font-style</t>
<t tx="yen.20210612081822.1429"></t>
<t tx="yen.20210612081822.143"></t>
<t tx="yen.20210612081822.1430">head-font-family</t>
<t tx="yen.20210612081822.1431">head-font-size</t>
<t tx="yen.20210612081822.1432">head-font-weight</t>
<t tx="yen.20210612081822.1433">head-font-style</t>
<t tx="yen.20210612081822.1434"></t>
<t tx="yen.20210612081822.1435">edit-label-font-family</t>
<t tx="yen.20210612081822.1436">edit-label-font-size</t>
<t tx="yen.20210612081822.1437">edit-label-font-weight</t>
<t tx="yen.20210612081822.1438">edit-label-font-style</t>
<t tx="yen.20210612081822.1439"></t>
<t tx="yen.20210612081822.144"></t>
<t tx="yen.20210612081822.1440">status-font-family</t>
<t tx="yen.20210612081822.1441">status-font-size</t>
<t tx="yen.20210612081822.1442">status-font-weight</t>
<t tx="yen.20210612081822.1443">status-font-style</t>
<t tx="yen.20210612081822.1444"># These control such things as margin width and style.
# The most important settings are the Focused border styles.</t>
<t tx="yen.20210612081822.1445"></t>
<t tx="yen.20210612081822.1446">dialog-border</t>
<t tx="yen.20210612081822.1447">dialog-margin</t>
<t tx="yen.20210612081822.1448">These give the width and style of the border surrounding the active pane.
</t>
<t tx="yen.20210612081822.1449">focused-border-style</t>
<t tx="yen.20210612081822.145"></t>
<t tx="yen.20210612081822.1450">focused-border-width</t>
<t tx="yen.20210612081822.1451"></t>
<t tx="yen.20210612081822.1452">use-gutter</t>
<t tx="yen.20210612081822.1453">gutter-w-adjust</t>
<t tx="yen.20210612081822.1454">gutter-y-adjust</t>
<t tx="yen.20210612081822.1455"></t>
<t tx="yen.20210612081822.1456">minibuffer-border</t>
<t tx="yen.20210612081822.1457">minibuffer-margin</t>
<t tx="yen.20210612081822.1458"></t>
<t tx="yen.20210612081822.1459">stacked-widget-padding</t>
<t tx="yen.20210612081822.146"></t>
<t tx="yen.20210612081822.1460"></t>
<t tx="yen.20210612081822.1461">status-border-width</t>
<t tx="yen.20210612081822.1462">These must be @string settings, even though they do affect colors.</t>
<t tx="yen.20210612081822.1463">vim-mode-normal-border</t>
<t tx="yen.20210612081822.1464">vim-mode-insert-border</t>
<t tx="yen.20210612081822.1465">vim-mode-visual-border</t>
<t tx="yen.20210612081822.1466"></t>
<t tx="yen.20210612081822.1467">tree-image-closed</t>
<t tx="yen.20210612081822.1468">tree-image-open</t>
<t tx="yen.20210612081822.1469">tree-icon-separation</t>
<t tx="yen.20210612081822.147"></t>
<t tx="yen.20210612081822.1470">odd headline just to not clash with regular plugins menu</t>
<t tx="yen.20210612081822.1471"></t>
<t tx="yen.20210612081822.1472"></t>
<t tx="yen.20210612081822.1473">bookmarks_base_color</t>
<t tx="yen.20210612081822.1474">bookmarks_base_border</t>
<t tx="yen.20210612081822.1475">bookmarks_base_decoration</t>
<t tx="yen.20210612081822.1476">bookmarks_base_family</t>
<t tx="yen.20210612081822.1477">bookmarks_base_margin</t>
<t tx="yen.20210612081822.1478">bookmarks_base_padding</t>
<t tx="yen.20210612081822.1479">bookmarks_base_size</t>
<t tx="yen.20210612081822.148"></t>
<t tx="yen.20210612081822.1480">bookmarks_base_style</t>
<t tx="yen.20210612081822.1481">bookmarks_base_weight</t>
<t tx="yen.20210612081822.1482"></t>
<t tx="yen.20210612081822.1483">bookmarks_children_color</t>
<t tx="yen.20210612081822.1484">bookmarks_children_decoration</t>
<t tx="yen.20210612081822.1485">bookmarks_children_family</t>
<t tx="yen.20210612081822.1486">bookmarks_children_size</t>
<t tx="yen.20210612081822.1487">bookmarks_children_style</t>
<t tx="yen.20210612081822.1488">bookmarks_children_weight</t>
<t tx="yen.20210612081822.1489"></t>
<t tx="yen.20210612081822.149">Should be white: it shows in the log pane.</t>
<t tx="yen.20210612081822.1490">bookmarks_current_color</t>
<t tx="yen.20210612081822.1491">bookmarks_current_decoration</t>
<t tx="yen.20210612081822.1492">bookmarks_current_size</t>
<t tx="yen.20210612081822.1493">bookmarks_current_style</t>
<t tx="yen.20210612081822.1494">bookmarks_current_weight</t>
<t tx="yen.20210612081822.1495"></t>
<t tx="yen.20210612081822.1496">bookmarks_expanded_color</t>
<t tx="yen.20210612081822.1497">bookmarks_expanded_decoration</t>
<t tx="yen.20210612081822.1498">bookmarks_expanded_size</t>
<t tx="yen.20210612081822.1499">bookmarks_expanded_style</t>
<t tx="yen.20210612081822.15"></t>
<t tx="yen.20210612081822.150"></t>
<t tx="yen.20210612081822.1500">bookmarks_expanded_weight</t>
<t tx="yen.20210612081822.1501">bookmarks_font_size</t>
<t tx="yen.20210612081822.1502"></t>
<t tx="yen.20210612081822.1503">screencast-bg</t>
<t tx="yen.20210612081822.1504">screencast-font-family</t>
<t tx="yen.20210612081822.1505">screencast-font-size</t>
<t tx="yen.20210612081822.1506">screencast-font-weight</t>
<t tx="yen.20210612081822.1507">screencast-font-style</t>
<t tx="yen.20210612081822.1508"></t>
<t tx="yen.20210612081822.1509">Note: These settings have effect only if the corresponding plugin has been enabled.</t>
<t tx="yen.20210612081822.151"></t>
<t tx="yen.20210612081822.1510"></t>
<t tx="yen.20210612081822.1511"># Leo loads plugins in the order they appear here.
# The children of this node are *not* loaded.

# This node *MUST* be a child of the @settings node to take effect.

# **Important**: to change these defaults, put
# an @enabled-plugins node in myLeoSettings.leo.

# Highly-recommended plugins:

plugins_menu.py
free_layout.py      # loaded automatically. Puts free_layout in Plugins menu.
    
# Recommended plugins:

contextmenu.py      # Required by the vim.py and xemacs.py plugins.
leo_to_html.py
mod_scripting.py
nav_qt.py
nodetags.py
quicksearch.py
screen_capture.py
stickynotes.py
todo.py
viewrendered.py
</t>
<t tx="yen.20210612081822.1512"># Alphabetical list of plugins.

# Note: This list may be out of date. leo/plugins contains all official plugins.
# Note: Leo loads all qt_*.py files automatically when the qt gui is in effect.

# active_path.py
# add_directives.py
# at_folder.py
# at_produce.py
# at_view.py
# attrib_edit.py
# backlink.py
# bibtex.py
# bigdash.py
# bookmarks.py
# bzr_qcommands.py
# chapter_hoist.py
# colorize_headlines.py
# contextmenu.py
# ctagscompleter.py
# cursesGui.py
# datenodes.py
# debugger_pudb.py
# dragdropgoodies.py
# dtest.py
# dump_globals.py
# empty_leo_file.py
# enable_gc.py
# expfolder.py
# FileActions.py
# free_layout.py # loaded automatically
# ftp.py
# geotag.py
# gitarchive.py
# graphcanvas.py
# import_cisco_config.py
# initinclass.py
# interact.py
# jinjarender.py
# leo_interface.py
# leo_to_html.py
# leocursor.py
# leofeeds.py
# leomail.py
# leomylyn.py
# leoOPML.py
# leoremote.py
# leoscreen.py
# lineNumbers.py
# livecode.py
# macros.py
# markup_inline.py
# maximizeNewWindows.py
# mime.py
# mod_autosave.py
# mod_framesize.py
# mod_http.py
# mod_leo2ascd.py
# mod_read_dir_outline.py
# mod_scripting.py
# mod_tempfname.py
# mod_timestamp.py
# multifile.py
# nav_qt.py
# niceNosent.py
# nodeActions.py
# nodediff.py
# nodetags.py
# nodewatch.py
# notebook.py
# open_shell.py
# outline_export.py
# paste_as_headlines.py
# plugins_menu.py
# pretty_print.py
# projectwizard.py
# python_terminal.py
# QNCalendarWidget.py
# qt_quicksearch.py
# quickMove.py
# quicksearch.py
# quit_leo.py
# read_only_nodes.py
# redirect_to_log.py
# richtext.py
# rss.py
# rst3.py
# screen_capture.py
# screencast.py
# screenshots.py
# script_io_to_body.py
# scripts_menu.py
# setHomeDirectory.py
# settings_finder.py
# sftp.py
# slideshow.py
# spydershell.py
# startfile.py
# stickynotes.py
# systray.py
# testRegisterCommand.py
# textnode.py
# todo.py
# tomboy_import.py
# trace_gc_plugin.py
# trace_keys.py
# trace_tags.py
# valuespace.py
# viewrendered3.py
# vim.py
# wikiview.py
# word_count.py
# word_export.py
# xemacs.py
# xml_edit.py
# xsltWithNodes.py
# zenity_file_dialogs.py
</t>
<t tx="yen.20210612081822.1513"># These plugins are experimental, broken or not recommended.

# leo_pdf.py
# leo_to_rtf.py
# mnplugins.py
# mod_speedups.py
# run_nodes.py
# settings_finder.py
# stickynotes_plus.py
# viewrendered2.py</t>
<t tx="yen.20210612081822.1514"></t>
<t tx="yen.20210612081822.1515">file type (auto, shadow, etc.) without the '@', to use when
loading files</t>
<t tx="yen.20210612081822.1516">event hook used by active_path, headdclick1 is probably best</t>
<t tx="yen.20210612081822.1517"># regular expressions (case insensitive) for files/directories
# active_path won't list, one per line.
#
# NOTE: directory names are always wrapped in '/', so write a
# pattern to target '/.svn/' (e.g. "^/\.bzr/$"), not '.svn'.
#
# e.g.
#
#   ^/\.bzr/$    - ignore directories called '.bzr'
#   \.pyc$     -ignore files ending in '.pyc'
</t>
<t tx="yen.20210612081822.1518"># extensions for files/directories
# active_path will load as binary, i.e. using external software
# use lower case only
.pdf
</t>
<t tx="yen.20210612081822.1519"># regular expressions (case insensitive) for files/directories
# active_path loads automatically
# e.g.
#
#   ^readme    - load any file starting with 'readme'
</t>
<t tx="yen.20210612081822.152"></t>
<t tx="yen.20210612081822.1520">Should active_path load docstrings for python files?</t>
<t tx="yen.20210612081822.1521">controls the maximum time active_path will spend on a recursive operation.</t>
<t tx="yen.20210612081822.1522">controls the maximum size file active_path will open without query.</t>
<t tx="yen.20210612081822.1523"></t>
<t tx="yen.20210612081822.1524"></t>
<t tx="yen.20210612081822.1525"># Time between saves in seconds</t>
<t tx="yen.20210612081822.1526"></t>
<t tx="yen.20210612081822.1527">When displaying the other end of a link in the list of links
backlink uses the headline of the other node.  This setting
prepends (negative values) or appends (positive values) the
required number of parent names to the other nodes name.

So for example, you may see links listed as:
    
    &lt;- taxa
    &lt;- taxa
    &lt;- taxa

which is not helpful.  By setting this value to 1, you would see

    &lt;- taxa &lt; source_field
    &lt;- taxa &lt; observation
    &lt;- taxa &lt; record

where the extra information is the name of the linked node's parent.
</t>
<t tx="yen.20210612081822.1528"></t>
<t tx="yen.20210612081822.1529"></t>
<t tx="yen.20210612081822.153"></t>
<t tx="yen.20210612081822.1530"></t>
<t tx="yen.20210612081822.1531"></t>
<t tx="yen.20210612081822.1532">Number of levels (rows) of hieararchical bookmarks to show.  0 (zero)
collapse hieracrch and show all bookmarks.  1 or more sets max. levels
displayed at once, see bookmarks plugin docs.</t>
<t tx="yen.20210612081822.1533"># These control the effects of modifiers (Shift, Control, Alt) on left
# clicks on bookmarks.  Available modifiers are:
#
#     None AltControl ControlShift Alt Control Shift
#     AltShift AltControlShift
#
# Available actions are:
#
#     goto_bookmark update_bookmark rename_bookmark edit_bookmark
#     delete_bookmark add_child navigate hoist promote
#
# There's one more action than modifier combo., so you have to work
# out what you don't want.  `promote` is missing by default.

None goto_bookmark
AltControl update_bookmark
ControlShift rename_bookmark
Alt edit_bookmark
Control delete_bookmark
Shift add_child
AltShift navigate
AltControlShift hoist
</t>
<t tx="yen.20210612081822.1534"></t>
<t tx="yen.20210612081822.1535"></t>
<t tx="yen.20210612081822.1536">This is the body text of a single day node.</t>
<t tx="yen.20210612081822.1537">This is the format of the headline if a single day node is inserted.</t>
<t tx="yen.20210612081822.1538">This is the format of day node headline if a whole month is inserted.</t>
<t tx="yen.20210612081822.1539">This is the format of the month node headline if a whole month is inserted.</t>
<t tx="yen.20210612081822.154"></t>
<t tx="yen.20210612081822.1540">True: Omit saturdays if a whole month is inserted.</t>
<t tx="yen.20210612081822.1541">True: Omit sundays if a whole month is inserted.</t>
<t tx="yen.20210612081822.1542">This is the format of the day node headline if a whole year is inserted.</t>
<t tx="yen.20210612081822.1543">This is the format of the month node headline if a whole year is inserted.</t>
<t tx="yen.20210612081822.1544">This is the format of the year node headline if a whole year is inserted.</t>
<t tx="yen.20210612081822.1545">True: Omit saturdays if a whole year is inserted</t>
<t tx="yen.20210612081822.1546">True: Omit sundays if a whole year is inserted</t>
<t tx="yen.20210612081822.1547"></t>
<t tx="yen.20210612081822.1548"></t>
<t tx="yen.20210612081822.1549"></t>
<t tx="yen.20210612081822.155"></t>
<t tx="yen.20210612081822.1550"></t>
<t tx="yen.20210612081822.1551"></t>
<t tx="yen.20210612081822.1552"></t>
<t tx="yen.20210612081822.1553"></t>
<t tx="yen.20210612081822.1554"></t>
<t tx="yen.20210612081822.1555"></t>
<t tx="yen.20210612081822.1556"></t>
<t tx="yen.20210612081822.1557"></t>
<t tx="yen.20210612081822.1558"></t>
<t tx="yen.20210612081822.1559"></t>
<t tx="yen.20210612081822.156"></t>
<t tx="yen.20210612081822.1560"></t>
<t tx="yen.20210612081822.1561"></t>
<t tx="yen.20210612081822.1562"></t>
<t tx="yen.20210612081822.1563"></t>
<t tx="yen.20210612081822.1564"></t>
<t tx="yen.20210612081822.1565">@language rest
@wrap

Bookmarks are created as the first node in the outline which has been
opened longest. You can this setting to specify an alternative location.
For example: /home/tbrown/.bookmarks.leo#@bookmarks--&gt;Incoming
</t>
<t tx="yen.20210612081822.1566">@language javascript
</t>
<t tx="yen.20210612081822.1567">$(document).ready(function(){
    // Toggle (hide) all but top-level *nodes*.
    // Headlines are *always* visible.
    $("div.node").hide()
    $(".outlinepane").children("div.node").show();
    // Attach borders to *headlines*.
    $("div.headline").addClass('unborderclass')
    $(".outlinepane").children("div.node").children("div.headline:first").removeClass('unborderclass');
    $(".outlinepane").children("div.node").children("div.headline:first").addClass('borderclass');
    // Set h attributes for css
    // $("headline").attr("icon_url", "http://leoeditor.com/box" + $("headline").attr("icon") + ".GIF")
        // Works, but I haven't found how to use it.
    $("div.headline").click(function(e){
        e.stopImmediatePropagation()
            // Google: jquery click event called twice.
        // Toggle the expansion state.
        $(e.target).parent().children("div.node").toggle()
        // Set the body text.
        $(".body-code").text($(e.target).attr("b"));
        // Set the border
        $("div.headline").removeClass('borderclass');
        $("div.headline").addClass('unborderclass');
        $(e.target).removeClass('unborderclass');
        $(e.target).addClass('borderclass');
        // console.clear();
        // console.log($(e.target));
        // console.log($(e.target).children("div.node").length);
        // console.log($(e.target).children("div.node").children("div.headline").length);
        //console.log($(e.target).attr("b").length);
        //console.log($(e.target).children(":first"));
        //console.log($(e.target).children(":first").is(":visible"));
    });
});</t>
<t tx="yen.20210612081822.1568">@language css</t>
<t tx="yen.20210612081822.1569">/*
    The main .css stylesheet for the mod_http.py plugin.
    This stylesheet allocates fix-sized areas for the outline and body panes.
*/
h1 {
    /* font-size: 16pt; */
    /* color: red; */
}
.borderclass{
    border-color: #C1E0FF;
    border-width: 1px;
    border-style: solid;
}
.unborderclass{
    border-color: white;
    border-width: 1px;
    border-style: solid;
}
div.headline {
    color: blue;
    font-size: 16pt;
    font-style: normal;
    font-weight: normal;
    /* Prevent false clicks. */
    margin-top: 2px;
    margin-bottom: 2px;
    padding: 4px;
}
div.container {
    /* position:relative; */
    position: absolute;
}
div.node {
    position: relative;
    left: 20px;
}
div.outlinepane {
    
    background: #ffffec; /* Leo yellow */
    /* Fixed height/width creates scrollbars.*/
    resize: none;
    position: absolute:
    top: 10px;
    left: 10px;
    height: 300px;
    width: 1000px;
    /* height: 50%; */
    /* width: 100%; */
    overflow: scroll;
    line-height: 0.8;
}
div.bodypane {
    /* Fixed height/width creates scrollbars.*/
    position: absolute;
    resize: none;
    height: 500px;
    width: 1000px;
    left: 10px;
    top: 310px;
    bottom: 0px;
    /* height: 50%; */
    /* width: 100%; */
    overflow: scroll;
}
/* Indicator icons...

    Alas, the following does not work::

        node::before {
            content: url(attr(icon_url)) " " attr(expand) " ";
        }
*/
div.headline[icon="00"]::before {
    content: url("http://leoeditor.com/box00.GIF") " " attr(expand) " ";
}
div.headline[icon="01"]::before {
    content: url("http://leoeditor.com/box01.GIF") " " attr(expand) " ";
}
div.headline[icon="02"]::before {
    content: url("http://leoeditor.com/box02.GIF") " " attr(expand) " ";
}
div.headline[icon="03"]::before {
    content: url("http://leoeditor.com/box03.GIF") " " attr(expand) " ";
}
div.headline[icon="04"]::before {
    content: url("http://leoeditor.com/box04.GIF") " " attr(expand) " ";
}
div.headline[icon="05"]::before {
    content: url("http://leoeditor.com/box05.GIF") " " attr(expand) " ";
}
div.headline[icon="06"]::before {
    content: url("http://leoeditor.com/box06.GIF") " " attr(expand) " ";
}
div.headline[icon="07"]::before {
    content: url("http://leoeditor.com/box07.GIF") " " attr(expand) " ";
}
div.headline[icon="08"]::before {
    content: url("http://leoeditor.com/box08.GIF") " " attr(expand) " ";
}
div.headline[icon="09"]::before {
    content: url("http://leoeditor.com/box09.GIF") " " attr(expand) " ";
}
div.headline[icon="10"]::before {
    content: url("http://leoeditor.com/box10.GIF") " " attr(expand) " ";
}
div.headline[icon="11"]::before {
    content: url("http://leoeditor.com/box11.GIF") " " attr(expand) " ";
}
div.headline[icon="12"]::before {
    content: url("http://leoeditor.com/box12.GIF") " " attr(expand) " ";
}
div.headline[icon="13"]::before {
    content: url("http://leoeditor.com/box13.GIF") " " attr(expand) " ";
}
div.headline[icon="14"]::before {
    content: url("http://leoeditor.com/box14.GIF") " " attr(expand) " ";
}
div.headline[icon="15"]::before {
    content: url("http://leoeditor.com/box15.GIF") " " attr(expand) " ";
}
code {
    /* works */
    /* background: yellow; */
    font-family: "Monospace";
    font-size: 150%; /* 20pt; */
}</t>
<t tx="yen.20210612081822.157"></t>
<t tx="yen.20210612081822.1570">/*
    The main .css stylesheet for the mod_http.py plugin.
    From Chris George:
    https://groups.google.com/d/msg/leo-editor/ALxuMy-rmv8/rXsbe28KAgAJ
*/
ul {
    font-family: "Sans-serif";
    font-size: 100%;
    font-variant: small-caps;
}    

pre {
    margin: 25px;
    white-space: normal;
    color: black;
    font-family: "Monospace";
    font-size: 18px; /* 20pt; */
    white-space: normal;
    text-align: left;
    overflow: auto;
}

h1 {
    font-size: 16pt;
    color: red;
    font-variant: small-caps;
}
code {
    /* works */
    /* background: yellow; */
}

.borderclass{
    border-color: #C1E0FF;
    border-width: 1px;
    border-style: solid;
}
.unborderclass{
    border-color: white;
    border-width: 1px;
    border-style: solid;
}
div.headline {
    color: green;
    font-size: 14pt;
    font-style: normal;
    font-weight: normal;
}
div.container {
    position: relative;
}
div.node {
    position: relative;
    left: 20px;
}
div.outlinepane {
    background: #ffffec; /* Leo yellow */
    top: 10px;
    left: 10px;
    position: relative;
    
}
div.bodypane {
    position: relative;
    left: 10px;
    bottom: 0px;
    
}
/* =============== Added by EKR =============== */

/* Indicator icons...

    Alas, the following does not work::

        node::before {
            content: url(attr(icon_url)) " " attr(expand) " ";
        }
*/
div.headline[icon="00"]::before {
    content: url("http://leoeditor.com/box00.GIF") " " attr(expand) " ";
}
div.headline[icon="01"]::before {
    content: url("http://leoeditor.com/box01.GIF") " " attr(expand) " ";
}
div.headline[icon="02"]::before {
    content: url("http://leoeditor.com/box02.GIF") " " attr(expand) " ";
}
div.headline[icon="03"]::before {
    content: url("http://leoeditor.com/box03.GIF") " " attr(expand) " ";
}
div.headline[icon="04"]::before {
    content: url("http://leoeditor.com/box04.GIF") " " attr(expand) " ";
}
div.headline[icon="05"]::before {
    content: url("http://leoeditor.com/box05.GIF") " " attr(expand) " ";
}
div.headline[icon="06"]::before {
    content: url("http://leoeditor.com/box06.GIF") " " attr(expand) " ";
}
div.headline[icon="07"]::before {
    content: url("http://leoeditor.com/box07.GIF") " " attr(expand) " ";
}
div.headline[icon="08"]::before {
    content: url("http://leoeditor.com/box08.GIF") " " attr(expand) " ";
}
div.headline[icon="09"]::before {
    content: url("http://leoeditor.com/box09.GIF") " " attr(expand) " ";
}
div.headline[icon="10"]::before {
    content: url("http://leoeditor.com/box10.GIF") " " attr(expand) " ";
}
div.headline[icon="11"]::before {
    content: url("http://leoeditor.com/box11.GIF") " " attr(expand) " ";
}
div.headline[icon="12"]::before {
    content: url("http://leoeditor.com/box12.GIF") " " attr(expand) " ";
}
div.headline[icon="13"]::before {
    content: url("http://leoeditor.com/box13.GIF") " " attr(expand) " ";
}
div.headline[icon="14"]::before {
    content: url("http://leoeditor.com/box14.GIF") " " attr(expand) " ";
}
div.headline[icon="15"]::before {
    content: url("http://leoeditor.com/box15.GIF") " " attr(expand) " ";
}
code {
    /* works */
    /* background: yellow; */
    font-family: "Monospace";
    font-size: 150%; /* 20pt; */
}

</t>
<t tx="yen.20210612081822.1571"></t>
<t tx="yen.20210612081822.1572">@wrap

This setting specifies **indicator text** that indicates that an @button button has right-click menu items created by @rclick nodes.

Unicode chars like ▼ ▾ and … are typical choices for this text.

For each @button node, Leo adds right-click menu items for:

- @rclick nodes directly *following* the @button.

- @rclick nodes that are *children* of the @button node, provided that the @button node has no ``@others`` directive.

**Important**: Leo adds two standard right-click menu items for each @button node: ``Remove Button`` and ``Goto Script``. Leo adds the indicator text **only** to buttons that contain right-click menu items in addition to these two standard right-click menu items.</t>
<t tx="yen.20210612081822.1573"></t>
<t tx="yen.20210612081822.1574"></t>
<t tx="yen.20210612081822.1575"></t>
<t tx="yen.20210612081822.1576">If set to True then if a match occurs on an @file type node the nodeActions plugin will save the clicked @file type node (and any other @file type nodes) to disk, if modified, before running the script.
</t>
<t tx="yen.20210612081822.1577">Specifies the type of messages to be sent to the log pane.	Specifying a
higher message level will display that level and all lower levels.
The following integer values are supported:

0 = no messages
1 = Plugin triggered and the patterns that were matched (default)
2 = Double-click event passed or not to next plugin
3 = Patterns that did not match
4 = Code debugging messages
</t>
<t tx="yen.20210612081822.1578"></t>
<t tx="yen.20210612081822.1579">One of 'compare', 'ndiff', or 'unified_diff'.  See the nodediff.py docstring for more info.</t>
<t tx="yen.20210612081822.158"></t>
<t tx="yen.20210612081822.1580"></t>
<t tx="yen.20210612081822.1581">@
Default False

If True, all @settings-&gt;@nodewatch nodes in the current outline are executed when the outline loads.

@c</t>
<t tx="yen.20210612081822.1582"></t>
<t tx="yen.20210612081822.1583">True:  Read derived files referenced from @file and @thin nodes when reading .opml files.

False: Do not read derived when reading .opml files.</t>
<t tx="yen.20210612081822.1584">True:  Use &lt;:body&gt; elements to hold body text in &lt;outline&gt; elements.
False: Use :body attributes to hold body text in &lt;outline&gt; elements.</t>
<t tx="yen.20210612081822.1585">This should be either 2.0 or 1.0.
Version 2.0 is more flexible, and should be used unless there are problems.</t>
<t tx="yen.20210612081822.1586">True:  Write body text in either &lt;:body&gt; elements or :body attributes,
       depending on the opml_use_outline_elements setting.

False: Write only outlines.</t>
<t tx="yen.20210612081822.1587">True:  Write derived files when writing .opml files.

False: Do not write derived when reading .opml files.</t>
<t tx="yen.20210612081822.1588">True: Write (as attributes of the opml &lt;outline&gt; elements) the Leo-specific
      attributes written in Leo's &lt;v&gt; elements, namely 'a',
      'descendentTnodeUnknownAttributes', 'expanded', 'marks','t', and
      'tnodeList' elements.
    
False: Do not write such attributes.</t>
<t tx="yen.20210612081822.1589">True:  Write (as attributes of the opml &lt;head&gt; element) the attributes in Leo's &lt;globals&gt; element.
False: Do not write such attributes.</t>
<t tx="yen.20210612081822.159"></t>
<t tx="yen.20210612081822.1590">True:  Write unknown attributes (uA's) in either &lt;:uA&gt; sub-elements of &lt;outline&gt; elements.

False: Do not write uA's.</t>
<t tx="yen.20210612081822.1591">The namespace urn for the xmlns attribute of &lt;opml&gt; elements.
This value typically is not used, but it should refer to Leo in some way.</t>
<t tx="yen.20210612081822.1592"></t>
<t tx="yen.20210612081822.1593">This defines the font size for body text in print outs.

Size is in px.  Default 12.</t>
<t tx="yen.20210612081822.1594">This determines the font family for print outs.  It's highly recommended
to choose a monospaced font.

Default: DejaVu Sans Mono</t>
<t tx="yen.20210612081822.1595"></t>
<t tx="yen.20210612081822.1596">Set this to True for rich text edits to be saved automatically.

BE CAREFUL - plain-text nodes will be converted to rich text
without confirmation if you edit them in rich text mode when
this is True.</t>
<t tx="yen.20210612081822.1597"># This node's non-"#" content should be valid java-script.  This is
# a toolbar configuration for CKEditor 4.2.
# 
# To enable all CKE features, clear this setting, i.e. remove
# everything below these "#" lines in your myLeoSettings.leo

{toolbar: [ 
   	{ name: 'document', groups: [ 'mode', 'document', 'doctools' ], items: [ 'Source' ] },
	{ name: 'clipboard', groups: [ 'clipboard', 'undo' ], items: [ 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo' ] },
	{ name: 'editing', groups: [ 'find', 'selection', 'spellchecker' ], items: [ 'Scayt' ] },
	{ name: 'styles', items: [ 'Styles', 'Format' ] },
	{ name: 'tools', items: [ 'Maximize' ] },
	{ name: 'others', items: [ '-' ] },
	{ name: 'about', items: [ 'About' ] },
	'/',
	{ name: 'basicstyles', groups: [ 'basicstyles', 'cleanup' ], items: [ 'Bold', 'Italic', 'Underline', 'Strike', '-', 'RemoveFormat', "TextColor", "BGColor" ] },
     { name: 'justification', items: ["JustifyLeft", "JustifyCenter", "JustifyRight", "JustifyBlock" ] },
	{ name: 'paragraph', groups: [ 'list', 'indent', 'blocks', 'align' ], items: [ 'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote' ] },
	{ name: 'links', items: [ 'Link', 'Unlink', 'Anchor' ] },
	{ name: 'insert', items: [ 'Image', 'Table', 'HorizontalRule', 'SpecialChar' ] }
]}
</t>
<t tx="yen.20210612081822.1598">Settings for the rss.py plugin.</t>
<t tx="yen.20210612081822.1599">Format for headlines of RSS feed entries.  Valid tokens are:

&lt;date&gt; - the date, formatted according to `@string rss-date-format`
&lt;title&gt; - the entry title
&lt;link&gt; - the entry link (not recommended in headline)
&lt;summary&gt; - the entry summary (extremely not recommeded in headline)</t>
<t tx="yen.20210612081822.16"></t>
<t tx="yen.20210612081822.160"></t>
<t tx="yen.20210612081822.1600">@url &lt;link&gt;
\n
&lt;title&gt;
&lt;date&gt;
\n
&lt;summary&gt;</t>
<t tx="yen.20210612081822.1601">A valid string to act as the `fmt` string datetime.time.strftime().</t>
<t tx="yen.20210612081822.1602">If True, newer entries are on top.
If False, older entries are on top.</t>
<t tx="yen.20210612081822.1603"></t>
<t tx="yen.20210612081822.1604"></t>
<t tx="yen.20210612081822.1605"></t>
<t tx="yen.20210612081822.1606"></t>
<t tx="yen.20210612081822.1607"></t>
<t tx="yen.20210612081822.1608">True: adds a button for every @button node.
</t>
<t tx="yen.20210612081822.1609">@killcolor 

True: create minibuffer commands for each @rclick node.
Default False.</t>
<t tx="yen.20210612081822.161"></t>
<t tx="yen.20210612081822.1610">True: define a minibuffer command for every @command node.
</t>
<t tx="yen.20210612081822.1611">True: dynamically loads plugins in @plugins nodes when a window is created.
</t>
<t tx="yen.20210612081822.1612">True: dynamically executes script in @script nodes when a window is created.  DANGEROUS!
</t>
<t tx="yen.20210612081822.1613">True: create Debug Script button.
</t>
<t tx="yen.20210612081822.1614">True: create Run Script button.

Note: The plugin creates the press-run-script-button command regardless of this setting.</t>
<t tx="yen.20210612081822.1615">True: create Script Button button in icon area.

Note: The plugin creates the press-script-button-button regardless of this setting.</t>
<t tx="yen.20210612081822.1616">The maximum length of button names.
</t>
<t tx="yen.20210612081822.1617"></t>
<t tx="yen.20210612081822.1618">Set to False to make sftp.py prompt you for credentials every time.</t>
<t tx="yen.20210612081822.1619"></t>
<t tx="yen.20210612081822.162"></t>
<t tx="yen.20210612081822.1620"></t>
<t tx="yen.20210612081822.1621"></t>
<t tx="yen.20210612081822.1622"></t>
<t tx="yen.20210612081822.1623"></t>
<t tx="yen.20210612081822.1624">True: Render node headline as top heading.</t>
<t tx="yen.20210612081822.1625">Enable RsT MathJax math rendering</t>
<t tx="yen.20210612081822.1626">True: Enable MD MathJax math rendering.</t>
<t tx="yen.20210612081822.1627">True: Use ``asciidoc3`` if available.
False: Use ``asciidoc``</t>
<t tx="yen.20210612081822.1628"></t>
<t tx="yen.20210612081822.1629">Path to ``asciidoc`` directory</t>
<t tx="yen.20210612081822.163"></t>
<t tx="yen.20210612081822.1630">Default for rendering type: asciidoc, md or rst.</t>
<t tx="yen.20210612081822.1631">MathJax script URL (both RsT and MD). Typically:

file:///D:/utility/mathjax/es5/tex-chtml.js
https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/latest.js?config=TeX-AMS_CHTML</t>
<t tx="yen.20210612081822.1632">"URL for MD stylesheet</t>
<t tx="yen.20210612081822.1633">Name of external asciidoctor processor program
</t>
<t tx="yen.20210612081822.1634">URL for RsT Stylesheet</t>
<t tx="yen.20210612081822.1635">For MacOS X (darwin) the following are typical defaults:

vim_cmd = /Applications/gvim.app/Contents/MacOS/gvim --servername LEO
vim_exe = /Applications/gvim.app/Contents/MacOS/gvim
</t>
<t tx="yen.20210612081822.1636"></t>
<t tx="yen.20210612081822.1637"></t>
<t tx="yen.20210612081822.1638">True: enable detailed traces inside vim.py.</t>
<t tx="yen.20210612081822.1639">True: the vim plugin will open @url nodes when they are double clicked.</t>
<t tx="yen.20210612081822.164"></t>
<t tx="yen.20210612081822.1640"></t>
<t tx="yen.20210612081822.1641"># regex patterns for text to be hidden by the wikiview plugin
# Blanks lines and lines starting with '#' are comment lines.

# Each non-comment line represents a pattern.
# Use \b# for patterns starting with '#'
# Only `groups` parts of the pattern in parentheses will be shown.
# The first character of the pattern (not counting \b) is the leadin character.
# The pattern will be applied only for strings starting with the leadin character.

# UNLs

\bunl:(//.*#.*--&gt;).*
\bunl:(//.*#).*
\bunl:(//.*--&gt;).*
\bunl:(//).*
\bfile:(//.*--&gt;)\S+\b
\bhttps?:(//.*--&gt;)\S+\b

# regular urls

\bhttps?:(//.*/)\w+\b
\bfile:(//.*/)\w+\b

# restructuredText `Visible text &lt;http://invisible.url/here&gt;`

(`)\S+(\s*&lt;https?://\S+&gt;`_)
(`)\S+(\s*&lt;file://\S+&gt;`_)

# Test patterns: see http://pythex.org/

# unl://leoSettings.leo#@settings--&gt;Plugins--&gt;wikiview plugin
# unl://@settings--&gt;Plugins--&gt;wikiview plugin--&gt;@bool wikiview-active = True
# unl://#@settings--&gt;Plugins--&gt;wikiview plugin--&gt;@bool wikiview-active = True
# unl://#@settings--&gt;Plugins--&gt;wikiview plugin--&gt;@bool wikiview-active
# unl://#@settings--&gt;Plugins--&gt;wikiview plugin
# file://#some--&gt;headlines--&gt;mynode
# http://#some--&gt;headlines--&gt;mynode
# https://#some--&gt;headlines--&gt;mynode
# http://www.google.com/search
# https://www.google.com/search
# file://www.google.com/search
# `Python &lt;https://www.python.org/&gt;`_ 
# `Python &lt;file://www.python.org/&gt;`_ 
</t>
<t tx="yen.20210612081822.1642">Should wikiview mode be active by default?</t>
<t tx="yen.20210612081822.1643"></t>
<t tx="yen.20210612081822.1644"></t>
<t tx="yen.20210612081822.1645"></t>
<t tx="yen.20210612081822.1646"># Not used yet.</t>
<t tx="yen.20210612081822.1647"></t>
<t tx="yen.20210612081822.1648">The path to the zodb storage.</t>
<t tx="yen.20210612081822.1649"></t>
<t tx="yen.20210612081822.165"></t>
<t tx="yen.20210612081822.1650"></t>
<t tx="yen.20210612081822.1651"># Lines have the form: color, style
# color may be any kind of Qt color specifier
# See http://pyqt.sourceforge.net/Docs/QScintilla2/classQsciLexerPython.html
# for list of selector names.

# Firebrick3: #CD2626
# Black: #000000
# Green: #008000
# Leo Green: # 00AA00
# Red: #FF0000
# Blue: #0000FF

# Note: the following lines must be indented.

    black, ClassName
    #CD2626, Comment
    #CD2626, CommentBlock
    #00AA00, Decorator
    #00AA00, DoubleQuotedString
    black, FunctionMethodName
    black, HighlightedIdentifier
    black, Identifier
    blue,  Keyword
    black, Number
    black, Operator
    #00AA00, SingleQuotedString
    #00AA00, TripleSingleQuotedString
    #00AA00, TripleDoubleQuotedString
    #00AA00, UnclosedString
</t>
<t tx="yen.20210612081822.1652"></t>
<t tx="yen.20210612081822.1653">Argument to QSciScintilla.zoomIn method.
This allows you to increase the font size.
</t>
<t tx="yen.20210612081822.1654">Valid values are top,bottom,left,right</t>
<t tx="yen.20210612081822.1655"></t>
<t tx="yen.20210612081822.1656"></t>
<t tx="yen.20210612081822.1657">Leo's spell checker requires PyEnchant to be installed.
See: http://pythonhosted.org/pyenchant/tutorial.html#installing-pyenchant
</t>
<t tx="yen.20210612081822.1658">The language code for Enchant.
For information about supported languages, see:
http://pythonhosted.org/pyenchant/tutorial.html#adding-language-dictionaries
</t>
<t tx="yen.20210612081822.1659">Defaults to leo/plugins/spellpyx.txt</t>
<t tx="yen.20210612081822.166"></t>
<t tx="yen.20210612081822.1660"></t>
<t tx="yen.20210612081822.1661">@nocolor-node

These are the settings used by Leo's Qt syntax colorer.

Syntax colors may be any color value or any color name in Leo's color database in leoColor.py.

Examples:

- "00aa00" is the dark green used by IDLE.
- mistyRose1 and solarizedred are in the color database.

Leo converts setting names to the standard form used in the database, so the following are valid:
    
- Misty-Rose1
- solarized-red
</t>
<t tx="yen.20210612081822.1662">True: Leo uses pygments if available.


@string pygments-style-name

The default is "default" (without the quotes). This setting has effect only if @bool use-pygments is True.  It should be the name of a pygments style residing in the pygments/styles folder.  leonine.py defines a style that I used for testing.

</t>
<t tx="yen.20210612081822.1663">True: Use the pygments style given by @string pygments-style-name.

False: Use @color settings to configure pygments tokens.
       This allows per-language configuration, just as with Leo's jEdit-based colorers.


</t>
<t tx="yen.20210612081822.1664">The name of the pygments style to use.
This setting has effect only if *both* @bool use-pygments and @bool use-pygments-styles are True.

The 'leonine' style is recommended. Install it from leo-editor-contrib.
</t>
<t tx="yen.20210612081822.1665">False (legacy): color all @ and @doc parts with a uniform color.
True: call all @ and @doc parts as reStructuredText (@language rest).</t>
<t tx="yen.20210612081822.1666"></t>
<t tx="yen.20210612081822.1667"></t>
<t tx="yen.20210612081822.1668">The color of text in doc parts.
</t>
<t tx="yen.20210612081822.1669">The color of Leo keywords such as @ignore, @color, etc.
</t>
<t tx="yen.20210612081822.167"></t>
<t tx="yen.20210612081822.1670">The color of name in &lt; &lt; name &gt; &gt; when name is defined.
</t>
<t tx="yen.20210612081822.1671">The background color that represents spaces when Show Invisibles mode is in effect.

gray80: #CCCCCC
gray90: #E5E5E5
</t>
<t tx="yen.20210612081822.1672">The foreground color that represents tabs when Show Invisibles mode is in effect.

gray80: #CCCCCC
gray90: #E5E5E5
</t>
<t tx="yen.20210612081822.1673">The color of name in &lt;&lt; name &gt;&gt; when name is undefined.
</t>
<t tx="yen.20210612081822.1674"></t>
<t tx="yen.20210612081822.1675">These @color names map directly to the constants defined in each .py file in the leo/modes folder.

There is a script to generate these .py files directly from the jEdit .xml syntax coloring files.

These names can't be changed.  Leo's colorizing code leoColorizer.py uses these names to init various data structures.  The names are bound (in the modes/*.py files) to arguments to the pattern matches in leoColorizer.py.

Check the .py file in leo/modes for your langauge to see which names are actually used.</t>
<t tx="yen.20210612081822.1676"></t>
<t tx="yen.20210612081822.1677"></t>
<t tx="yen.20210612081822.1678"></t>
<t tx="yen.20210612081822.1679"></t>
<t tx="yen.20210612081822.168"></t>
<t tx="yen.20210612081822.1680"></t>
<t tx="yen.20210612081822.1681"></t>
<t tx="yen.20210612081822.1682"></t>
<t tx="yen.20210612081822.1683"></t>
<t tx="yen.20210612081822.1684"></t>
<t tx="yen.20210612081822.1685"></t>
<t tx="yen.20210612081822.1686"></t>
<t tx="yen.20210612081822.1687"></t>
<t tx="yen.20210612081822.1688"></t>
<t tx="yen.20210612081822.1689"></t>
<t tx="yen.20210612081822.169">Important: changing the Basic Font settings below should be all you need to
do at first. All other font settings are defined in terms of the basic fonts.</t>
<t tx="yen.20210612081822.1690"># Support for solarized colors requires black.</t>
<t tx="yen.20210612081822.1691"># The setting names are names of pygments tokens.
# Not all tokens are represented here.</t>
<t tx="yen.20210612081822.1692"></t>
<t tx="yen.20210612081822.1693"></t>
<t tx="yen.20210612081822.1694"></t>
<t tx="yen.20210612081822.1695"></t>
<t tx="yen.20210612081822.1696"></t>
<t tx="yen.20210612081822.1697"></t>
<t tx="yen.20210612081822.1698"></t>
<t tx="yen.20210612081822.1699"></t>
<t tx="yen.20210612081822.17"></t>
<t tx="yen.20210612081822.170"># All other fonts are defined in terms of these basic fonts.
# Changing the basic fonts are all that most users will want to do.</t>
<t tx="yen.20210612081822.1700"></t>
<t tx="yen.20210612081822.1701"></t>
<t tx="yen.20210612081822.1702"></t>
<t tx="yen.20210612081822.1703"></t>
<t tx="yen.20210612081822.1704"></t>
<t tx="yen.20210612081822.1705"></t>
<t tx="yen.20210612081822.1706"></t>
<t tx="yen.20210612081822.1707"></t>
<t tx="yen.20210612081822.1708"></t>
<t tx="yen.20210612081822.1709"></t>
<t tx="yen.20210612081822.171"></t>
<t tx="yen.20210612081822.1710"></t>
<t tx="yen.20210612081822.1711"></t>
<t tx="yen.20210612081822.1712"></t>
<t tx="yen.20210612081822.1713">Valid settings for _style strings are None, normal, bold, italic, bold-italic.</t>
<t tx="yen.20210612081822.1714"></t>
<t tx="yen.20210612081822.1715"># +</t>
<t tx="yen.20210612081822.1716"># -</t>
<t tx="yen.20210612081822.1717"># @@</t>
<t tx="yen.20210612081822.1718"># +++</t>
<t tx="yen.20210612081822.1719"># ---</t>
<t tx="yen.20210612081822.172">**Important**: This should be set by each user.</t>
<t tx="yen.20210612081822.1720"></t>
<t tx="yen.20210612081822.1721"></t>
<t tx="yen.20210612081822.1722"># php_keyword1_font_family = None
php_keyword1_font_size = 12
    # should be an int, or None.  Suffixes like pt or px will be ignored.
php_keyword1_font_slant = roman
    # roman, italic
php_keyword1_font_weight = normal
    # normal, bold</t>
<t tx="yen.20210612081822.1723">@language text</t>
<t tx="yen.20210612081822.1724"># bold keywords defined in forth-bold-words</t>
<t tx="yen.20210612081822.1725"># bold-italic keywords defined in @data forth-bold-italic-words</t>
<t tx="yen.20210612081822.1726"># italic keywords defined in forth-italic-words</t>
<t tx="yen.20210612081822.1727"></t>
<t tx="yen.20210612081822.1728"></t>
<t tx="yen.20210612081822.1729">:
variable
constant
code
</t>
<t tx="yen.20210612081822.173">A small font size used by default in the check boxes in the Find tab.</t>
<t tx="yen.20210612081822.1730">\Delimiter pairs for forth colorizing, one per line

[ ]
{ }
asm[ ]asm
</t>
<t tx="yen.20210612081822.1731"></t>
<t tx="yen.20210612081822.1732">\ List of supplementary tokens to be syntax-coloured by Leo as Forth 'string words'.
\ Each line contains a pair of tokens.
\ Lines beginning with '\' are comments, and ignored.

" "
c" "
." "
s" "
.( )

abort" "
tty" "
ttyl" "
lcd1" "
lcd2" "
lcd1c" "
lcd2c" "
</t>
<t tx="yen.20210612081822.1733">\ lines beginning with '\' are comments, and ignored.
\ declare any supplementary forth words you want coloured, one per line, below

\ asm[ ]asm     now string delims.
\ :             now a defining word.

!
&lt;
'
+
,
-
1+
2&gt;r
2r&gt;
2drop
2dup
2swap
::
::code
;
&lt;=
=
&gt;
&gt;=
&gt;r
r&gt;
&gt;w
w&gt;
[']
again
and
begin
code
constant
drop
dup
else
end-code
exit
host
if
include
invert
label:
macro
meta
needs
or 
picasm
repeat
return-in-w
swap
target
then
until
v-for
v-next
variable
while
@</t>
<t tx="yen.20210612081822.1734"># defining words in forth

forth_keyword2_family = None
forth_keyword2_size = 12
    # should be an int, or None.  Suffixes like pt or px will be ignored.
forth_keyword2_slant = None
    # roman, italic
forth_keyword2_weight = None
    # normal, bold
</t>
<t tx="yen.20210612081822.1735"># bold words in forth

forth_keyword3_family = None
forth_keyword3_font_size = 12
    # should be an int, or None.  Suffixes like pt or px will be ignored.
forth_keyword3_font_slant = roman
    # roman, italic
forth_keyword3_font_weight = bold
    # normal, bold
</t>
<t tx="yen.20210612081822.1736"># bold-italic words in forth

forth_keyword4_family = None
forth_keyword4_size = 12
    # should be an int, or None.  Suffixes like pt or px will be ignored.
forth_keyword4_slant = slant
    # roman, italic
forth_keyword4_weight = bold
    # normal, bold
</t>
<t tx="yen.20210612081822.1737"># italic words in forth

forth_keyword5_family = None
forth_keyword5_size = 12
    # should be an int, or None.  Suffixes like pt or px will be ignored.
forth_keyword5_slant = slant
    # roman, italic
forth_keyword5_weight = normal
    # normal, bold
</t>
<t tx="yen.20210612081822.1738"></t>
<t tx="yen.20210612081822.1739">True:  Leo colors C language comments in cweb mode as black with LaTeX keywords highlighted.
False: Leo colors C language comments in cweb mode as comments (default red).

Note: this setting does not affect how Leo colors noweb section references and defintions.
</t>
<t tx="yen.20210612081822.174">A small font size used by default in the status area.</t>
<t tx="yen.20210612081822.1740">True:  Leo colors @space, @* and @** sections in cweb mode as black with LaTeX keywords highlighted.
False: Leo colors @space, @* and @** sections in cweb mode as comments (default is red).

Note: this setting does not affect how Leo colors noweb section references and defintions.
</t>
<t tx="yen.20210612081822.1741">True:  Leo colors @directives when @language plain is in effect.
False: Leo colors everything black when @language plain is in effect.
</t>
<t tx="yen.20210612081822.1742">If true, tailing whitespace (spaces and tabs) will be underlined
with small dots in `trailing_whitespace_color` (default red).</t>
<t tx="yen.20210612081822.1743">
</t>
<t tx="yen.20210612081822.1744">True: Underline undefined section names

Only functional if use_hyperlinks = 0

</t>
<t tx="yen.20210612081822.1745">True:  underline "live" links.
False: (recommended): Underline undefined section names.
</t>
<t tx="yen.20210612081822.1746"></t>
<t tx="yen.20210612081822.1747">If zero, all nodes are colorized, regardless of length of body text.
If &gt; 0, only nodes whose body text are smaller than this limit are colorized.

200000</t>
<t tx="yen.20210612081822.1748"></t>
<t tx="yen.20210612081822.1749"></t>
<t tx="yen.20210612081822.175">Valid values are: normal,italic,oblique</t>
<t tx="yen.20210612081822.1750">True: (Recommended) The find commands collapse all nodes that are not ancestors of the node containing the match.
False: The find command expands nodes needed to show the match, but does not collapse any nodes.</t>
<t tx="yen.20210612081822.1751">True: (Recommended) The spell commands collapse all nodes that are not ancestors of the node containing the match.
False: The spell commands do not collapse any nodes.</t>
<t tx="yen.20210612081822.1752">New in Leo 4.9.1.

True (Recommended):
    An excellent, subliminal, improvement.
    The contract-or-goto-parent (Alt-RtArrow) contracts all
    children of the to-be-selected parent.
</t>
<t tx="yen.20210612081822.1753">True: goto-next-node and goto-prev-node commands contract the selected node.</t>
<t tx="yen.20210612081822.1754">Alt drag onto another node indicates dropped node should
be added as a child of the receiving node, set this to
False to not expand the receiving node, keeping a list of
recipient nodes conveniently compact for additional drops.</t>
<t tx="yen.20210612081822.1755">True:  Tell whether drags will move nodes or clone nodes.
False: Don't issue such messages.

</t>
<t tx="yen.20210612081822.1756">False: disable all drag and drop operations in the outline.</t>
<t tx="yen.20210612081822.1757">True:  When a node is expanded, insert new nodes as the last child.
False: (legacy &amp; recommended) When a node is expanded, insert new nodes as the first child.</t>
<t tx="yen.20210612081822.1758">Set to False, dragging nodes between different outlines
creates copies.  Set to True, the node is moved and no
longer exists in the source outline.</t>
<t tx="yen.20210612081822.1759"></t>
<t tx="yen.20210612081822.176">valid values are: normal,bold,100,..,900</t>
<t tx="yen.20210612081822.1760"></t>
<t tx="yen.20210612081822.1761">True: A *single* click in an already selected node begins editing of the headline.</t>
<t tx="yen.20210612081822.1762">True: collapse the parent of the moved node when moving a node left.
</t>
<t tx="yen.20210612081822.1763">True: (Recommended) Selecting an outline node leaves the focus in the outline pane.

If this is False it will be harder to use the arrow keys in the headline.
    
False: (Legacy) Selecting an outline node transfers focus to the body pane.</t>
<t tx="yen.20210612081822.1764">The time (in seconds) that controls how handles keystrokes when the outline pane has focus.

When two keystrokes are separated by less than this time, Leo will attempt to
find the next headline that starts with the previous match, extended by the key
just typed. Otherwise, Leo will find the next headline that starts with the key
just typed.

The outline nav search reverts to a single-character search if the extended
search fails, so in practice everything works well without thinking about what
is happening.
</t>
<t tx="yen.20210612081822.1765"></t>
<t tx="yen.20210612081822.1766"></t>
<t tx="yen.20210612081822.1767">The encoding specified in the following line of new .leo files:

&lt;?xml version="1.0" encoding="UTF-8"&gt;

The recommended value is UTF-8 (upper case for compatibility for old versions of Leo).

iso-8859-1 would be a popular alternative.

Important: Once a .leo file is created the &lt;?xml..."&gt; line can only be changed by hand.  Alas, changing the &lt;?xml..."&gt; line by hand may cause unicode errors the next time the .leo file is loaded.  Therefore, you should change the &lt;?xml..."&gt; line by hand only when first creating a .leo file.</t>
<t tx="yen.20210612081822.1768">The encoding used for files imported by @auto if no @encoding directive is in effect.
Default is UTF-8 (case not important).</t>
<t tx="yen.20210612081822.1769">The encoding used for derived files if no @encoding directive is in effect.
This setting is also used to encode files created by the Tangle commands.
Default is UTF-8 (case not important).</t>
<t tx="yen.20210612081822.177"></t>
<t tx="yen.20210612081822.1770">Please do not change any of these settings.

Doing so would make unit tests fail.
</t>
<t tx="yen.20210612081822.1771"></t>
<t tx="yen.20210612081822.1772"></t>
<t tx="yen.20210612081822.1773"></t>
<t tx="yen.20210612081822.1774"></t>
<t tx="yen.20210612081822.1775"></t>
<t tx="yen.20210612081822.1776">The color of the split bar. gray90 also looks good.</t>
<t tx="yen.20210612081822.1777">The delay, in milliseconds, to wait before resuming recoloring, when NEW_COLORER is True.</t>
<t tx="yen.20210612081822.1778">The maximum number of lines to color at once, when NEW_COLORER is True</t>
<t tx="yen.20210612081822.1779">The default language if no @language or @comment is in effect.

Valid values are (case is ignored):

actionscript,c,csharp,css,cweb,elisp,html,java,latex,
pascal,perl,perlpod,php,plain,plsql,python,rapidq,rebol,shell,tcltk.</t>
<t tx="yen.20210612081822.178"></t>
<t tx="yen.20210612081822.1780"></t>
<t tx="yen.20210612081822.1781">Background color for the cursor in body text.

</t>
<t tx="yen.20210612081822.1782">

Foreground color for the cursor in body text.

</t>
<t tx="yen.20210612081822.1783">Color of insertion cursor

</t>
<t tx="yen.20210612081822.1784">Background color of body text.  This setting *is* used in the QtGui.

#ffecea

Note: this setting can be overridden by the x_mode_bg_color settings.</t>
<t tx="yen.20210612081822.1785">Foreground color of body text.  This setting *is* used in the QtGui.

Note: this setting can be overridden by the x_mode_fg_color settings.</t>
<t tx="yen.20210612081822.1786">Recommended:
    
white                   if top_level_unbound_key_action is command
a color like MistyRose1 if top_level_unbound_key_action is insert or overwrite.

#f2fdff</t>
<t tx="yen.20210612081822.1787">Overrides body_text_foreground_color.</t>
<t tx="yen.20210612081822.1788">Overrides body_text_background_color.

#fdf5f5 A light pink.
#f0fde1 A light green.
#f9e6dd A light orange.</t>
<t tx="yen.20210612081822.1789">Overrides body_text_foreground_color.</t>
<t tx="yen.20210612081822.179"></t>
<t tx="yen.20210612081822.1790">Overrides body_text_background_color.

wheat1
PeachPuff1
LemonChiffon1
cornsilk1
honeydew1
LavenderBlush1
azure2
aquamarine1</t>
<t tx="yen.20210612081822.1791">Overrides body_text_foreground_color.</t>
<t tx="yen.20210612081822.1792">#f9f0f4 light pink
#fbfdfd very light blue

For some reason, colors in the text widget do not match the colors in the canvas widget.</t>
<t tx="yen.20210612081822.1793"></t>
<t tx="yen.20210612081822.1794"></t>
<t tx="yen.20210612081822.1795">Color for error messages written to the log window.</t>
<t tx="yen.20210612081822.1796"></t>
<t tx="yen.20210612081822.1797">Foreground color of log text.

</t>
<t tx="yen.20210612081822.1798">Background color of log text.</t>
<t tx="yen.20210612081822.1799">LightYellow1

#f2fdff</t>
<t tx="yen.20210612081822.18"></t>
<t tx="yen.20210612081822.180"></t>
<t tx="yen.20210612081822.1800">#d6c7d3
#d2cad0
#c6d3d7</t>
<t tx="yen.20210612081822.1801">#d6c7d3
#d2cad0
#c6d3d7
#ffffec # Same as outline.</t>
<t tx="yen.20210612081822.1802"></t>
<t tx="yen.20210612081822.1803"></t>
<t tx="yen.20210612081822.1804"></t>
<t tx="yen.20210612081822.1805"></t>
<t tx="yen.20210612081822.1806"></t>
<t tx="yen.20210612081822.1807"></t>
<t tx="yen.20210612081822.1808"></t>
<t tx="yen.20210612081822.1809"></t>
<t tx="yen.20210612081822.181"></t>
<t tx="yen.20210612081822.1810">Options that require pixel values can be any Python expression that yields an int.
Warning: the number of pixels per inch varies...</t>
<t tx="yen.20210612081822.1811"># Must be four entries: width,height,left,top.
# Put this in myLeoSettings.leo, **not** in individual .leo files.
# This setting has no effect unless @bool fixed_window = True

1200
800
50
50</t>
<t tx="yen.20210612081822.1812"></t>
<t tx="yen.20210612081822.1813"></t>
<t tx="yen.20210612081822.1814">True: (legacy) Select all headline text when editing a headline.
False: Put the cursor at the end of the headline text.</t>
<t tx="yen.20210612081822.1815">True:  auto-indent regardless of how text is colored.
False: suppress auto-indenting if in range @nocolor or @kill.</t>
<t tx="yen.20210612081822.1816">True:  use gmt time.
False: use local time.</t>
<t tx="yen.20210612081822.1817">True: Wrap body text.

</t>
<t tx="yen.20210612081822.1818">True:  enable autocompletion initially.
False: disable autocomopletion initially.

You can use the enable-autocompleter and disable-autocompleter
commands to enable or disable autocompletion at any time.

Note: The 'initially' prefix is needed to distinguish this setting from
enable-autocompleter command. Otherwised they would get 'munged' to the same
configuration value.</t>
<t tx="yen.20210612081822.1819">True:  enable calltip expansion initially.
False: disable calltip expansion initially.

You can use the enable-calltips and disable-calltips
commands to enable or disable autocompletion at any time.

Note: The 'initially' prefix is needed to distinguish this setting from
enable-calltips command. Otherwised they would get 'munged' to the same
configuration value.</t>
<t tx="yen.20210612081822.182">This setting must exist for Ctrl-mousewheel font zooming to work.
</t>
<t tx="yen.20210612081822.1820">True:  auto-indent aligns with open ({[ brackets

False: auto-indent increases indentation by one tab for Python only.</t>
<t tx="yen.20210612081822.1821"></t>
<t tx="yen.20210612081822.1822">Additional border in body text pane, in pixels.</t>
<t tx="yen.20210612081822.1823">The format string used when creating the Time/Date string for the Insert Time/Date command.
See the Python documentation for time.strftime for full details.

Examples:

1/30/2003 8:31:55
%m/%d/%y %H:%M:%S

Thu, 30 Jan 2003 16:57:12
%a, %d %b %Y %H:%M:%S</t>
<t tx="yen.20210612081822.1824"></t>
<t tx="yen.20210612081822.1825"></t>
<t tx="yen.20210612081822.1826"></t>
<t tx="yen.20210612081822.1827">True: Wrap log text.

</t>
<t tx="yen.20210612081822.1828">These options apply only to windows opened with the New command.

**Important**: When using the qttabs gui, these options have no effect.
That is, opening a new "window" means opening a new tab.</t>
<t tx="yen.20210612081822.1829">False (legacy): Top pane contains outline and log panes.
True: Top pane contains only outline.  Bottom pane contains body and log panes.</t>
<t tx="yen.20210612081822.183">Warning: These affect system dialogs.

Don't change these unless you are aware of the consequences</t>
<t tx="yen.20210612081822.1830">True: Outline gets focus when a new window is opened.
False Body pane gets focus when a new window is opened.</t>
<t tx="yen.20210612081822.1831">The ratio of tree pane size to body pane size when splitting primary panes horizontally.

Valid values: 0.0 to 1.0.

**Important**: Leo **does** save this ratio when saving a .leo file, so Leo
always uses this ratio only when creating a new outline.</t>
<t tx="yen.20210612081822.1832">The ratio of outline (tree) pane size to log pane size when splitting the primary panes horizontally.

Valid values: 0.0 to 1.0.

**Important**: Leo does not save this ratio when saving a .leo file, so Leo
always uses this ratio when opening a file that is being split horizontally.</t>
<t tx="yen.20210612081822.1833">The ratio of tree pane size to body pane size when splitting primary panes vertically.

Valid values: 0.0 to 1.0.

**Important**: Leo **does** save this ratio when saving a .leo file, so Leo
always uses this ratio only when creating a new outline.</t>
<t tx="yen.20210612081822.1834">The ratio of outline (tree) pane size to log pane size when splitting the primary panes vertically.

Valid values: 0.0 to 1.0.

**Important**: Leo does not save this ratio when saving a .leo file, so Leo
always uses this ratio when opening a file that is being split vertically.</t>
<t tx="yen.20210612081822.1835">Height of window in pixels.
    
</t>
<t tx="yen.20210612081822.1836">Distance from left of screen of window, in pixels.
</t>
<t tx="yen.20210612081822.1837">Distance from top of screen of window, in pixels.</t>
<t tx="yen.20210612081822.1838">Width window in pixels.

</t>
<t tx="yen.20210612081822.1839"></t>
<t tx="yen.20210612081822.184">@font-family</t>
<t tx="yen.20210612081822.1840">The width of the split bar, in pixels (must be an integer).</t>
<t tx="yen.20210612081822.1841">horizontal: body pane to the right
vertical: body pane on the botton

# #1514: horizontal is now the default.</t>
<t tx="yen.20210612081822.1842">The -relief option for the split bar.</t>
<t tx="yen.20210612081822.1843">Sizes for the status bar splitter. The status bar shows "line: 1, col:
35, fcol: 35" on the left and the path to the current node on the right.

The default value "1 2" gives one third for the line number etc., and 2
thirds for node path.  You may find "1 4" or "1 5" makes it easier to see
all the relevant components of the node path without having to move the
splitter.

The string must be only two integers, separated by spaces and or commas.

Dev. note: this setting is new (201309) and can't be replaced by the
stylesheet, the other settings in this group should probably be handled
by the stylesheet and could be considered for removal.</t>
<t tx="yen.20210612081822.1844">Show close box (the 'X') on outlien tabs - they can be closed with
Ctrl-W or middle mouse click, so this optionally hides the
redundant 'X'</t>
<t tx="yen.20210612081822.185">10pt</t>
<t tx="yen.20210612081822.186">@font-weight</t>
<t tx="yen.20210612081822.187"> @font-style</t>
<t tx="yen.20210612081822.188"></t>
<t tx="yen.20210612081822.189"></t>
<t tx="yen.20210612081822.19"></t>
<t tx="yen.20210612081822.190"></t>
<t tx="yen.20210612081822.191"></t>
<t tx="yen.20210612081822.192"></t>
<t tx="yen.20210612081822.193"></t>
<t tx="yen.20210612081822.194"></t>
<t tx="yen.20210612081822.195">DejaVu Sans Mono</t>
<t tx="yen.20210612081822.196"></t>
<t tx="yen.20210612081822.197"></t>
<t tx="yen.20210612081822.198"></t>
<t tx="yen.20210612081822.199"></t>
<t tx="yen.20210612081822.2"></t>
<t tx="yen.20210612081822.20"></t>
<t tx="yen.20210612081822.200"></t>
<t tx="yen.20210612081822.201"></t>
<t tx="yen.20210612081822.202"></t>
<t tx="yen.20210612081822.203"></t>
<t tx="yen.20210612081822.204"></t>
<t tx="yen.20210612081822.205"></t>
<t tx="yen.20210612081822.206"></t>
<t tx="yen.20210612081822.207"></t>
<t tx="yen.20210612081822.208"></t>
<t tx="yen.20210612081822.209"></t>
<t tx="yen.20210612081822.21">Devs *must not* change these definitions, even within a specific theme!

Use different names instead.</t>
<t tx="yen.20210612081822.210"></t>
<t tx="yen.20210612081822.211"></t>
<t tx="yen.20210612081822.212"></t>
<t tx="yen.20210612081822.213"></t>
<t tx="yen.20210612081822.214"></t>
<t tx="yen.20210612081822.215"></t>
<t tx="yen.20210612081822.216"></t>
<t tx="yen.20210612081822.217"></t>
<t tx="yen.20210612081822.218"></t>
<t tx="yen.20210612081822.219"></t>
<t tx="yen.20210612081822.22"></t>
<t tx="yen.20210612081822.220"></t>
<t tx="yen.20210612081822.221"></t>
<t tx="yen.20210612081822.222"></t>
<t tx="yen.20210612081822.223"></t>
<t tx="yen.20210612081822.224"></t>
<t tx="yen.20210612081822.225"></t>
<t tx="yen.20210612081822.226"></t>
<t tx="yen.20210612081822.227"></t>
<t tx="yen.20210612081822.228"></t>
<t tx="yen.20210612081822.229"></t>
<t tx="yen.20210612081822.23"></t>
<t tx="yen.20210612081822.230">None: Use the default platform font.</t>
<t tx="yen.20210612081822.231"></t>
<t tx="yen.20210612081822.232"></t>
<t tx="yen.20210612081822.233"></t>
<t tx="yen.20210612081822.234"># These control such things as margin width and style.
# The most important settings are the Focused border styles.</t>
<t tx="yen.20210612081822.235"></t>
<t tx="yen.20210612081822.236"></t>
<t tx="yen.20210612081822.237"></t>
<t tx="yen.20210612081822.238">These give the width and style of the border surrounding the active pane.
</t>
<t tx="yen.20210612081822.239"># Set to None to disable border styling.</t>
<t tx="yen.20210612081822.24"></t>
<t tx="yen.20210612081822.240"></t>
<t tx="yen.20210612081822.241"></t>
<t tx="yen.20210612081822.242"></t>
<t tx="yen.20210612081822.243">The amount of extra width to give the gutter, in pixels</t>
<t tx="yen.20210612081822.244">The y offset of the first line of the gutter, in pixels.
</t>
<t tx="yen.20210612081822.245"></t>
<t tx="yen.20210612081822.246"></t>
<t tx="yen.20210612081822.247"></t>
<t tx="yen.20210612081822.248"></t>
<t tx="yen.20210612081822.249"></t>
<t tx="yen.20210612081822.25"></t>
<t tx="yen.20210612081822.250"></t>
<t tx="yen.20210612081822.251"></t>
<t tx="yen.20210612081822.252">These must be @string settings, even though they do affect colors.</t>
<t tx="yen.20210612081822.253"></t>
<t tx="yen.20210612081822.254"></t>
<t tx="yen.20210612081822.255"></t>
<t tx="yen.20210612081822.256"></t>
<t tx="yen.20210612081822.257"></t>
<t tx="yen.20210612081822.258">url(/home/edward/leo.repo/leo-editor/leo/Icons/nodes-dark/triangles/closed.png)</t>
<t tx="yen.20210612081822.259">url(/home/edward/leo.repo/leo-editor/leo/Icons/nodes-dark/triangles/open.png)</t>
<t tx="yen.20210612081822.26"></t>
<t tx="yen.20210612081822.260">Separation between icons on tree node items</t>
<t tx="yen.20210612081822.261"></t>
<t tx="yen.20210612081822.262"></t>
<t tx="yen.20210612081822.263"></t>
<t tx="yen.20210612081822.264"></t>
<t tx="yen.20210612081822.265"></t>
<t tx="yen.20210612081822.266">none or underline</t>
<t tx="yen.20210612081822.267"></t>
<t tx="yen.20210612081822.268"></t>
<t tx="yen.20210612081822.269"></t>
<t tx="yen.20210612081822.27"></t>
<t tx="yen.20210612081822.270"></t>
<t tx="yen.20210612081822.271">Valid values are: normal,italic,oblique</t>
<t tx="yen.20210612081822.272">Huh?
valid values are: normal,bold,100,..,900
</t>
<t tx="yen.20210612081822.273"></t>
<t tx="yen.20210612081822.274"></t>
<t tx="yen.20210612081822.275">none or underline</t>
<t tx="yen.20210612081822.276"></t>
<t tx="yen.20210612081822.277"></t>
<t tx="yen.20210612081822.278"></t>
<t tx="yen.20210612081822.279">bold or regular</t>
<t tx="yen.20210612081822.28"></t>
<t tx="yen.20210612081822.280"></t>
<t tx="yen.20210612081822.281"></t>
<t tx="yen.20210612081822.282">none or underline</t>
<t tx="yen.20210612081822.283"></t>
<t tx="yen.20210612081822.284"></t>
<t tx="yen.20210612081822.285">bold or regular</t>
<t tx="yen.20210612081822.286"></t>
<t tx="yen.20210612081822.287"></t>
<t tx="yen.20210612081822.288">none or underline</t>
<t tx="yen.20210612081822.289"></t>
<t tx="yen.20210612081822.29"></t>
<t tx="yen.20210612081822.290"></t>
<t tx="yen.20210612081822.291">bold or regular</t>
<t tx="yen.20210612081822.292"></t>
<t tx="yen.20210612081822.293"></t>
<t tx="yen.20210612081822.294"></t>
<t tx="yen.20210612081822.295"></t>
<t tx="yen.20210612081822.296"></t>
<t tx="yen.20210612081822.297"></t>
<t tx="yen.20210612081822.298"></t>
<t tx="yen.20210612081822.299">@language rest

Please *do not* change this style sheet, nor any of its descendants.

Instead, copy the *settings* you want to change from the node::

    Qt Gui settings

to myLeoSettings.leo.

Advanced users may create an additional style sheet, called::

    @data qt-gui-user-style-sheet

in myLeoSettings.leo.  But most users will never need to do this.
</t>
<t tx="yen.20210612081822.3">These are definitions of colors not defined by default, so you can refer to "solarized-red" as "@solarized-red" instead of "#dc322f".

**Please do not change these definitions**.

Feel free to *add* to them.
</t>
<t tx="yen.20210612081822.30"># Not an official solarized color.  Same as dark-base-03</t>
<t tx="yen.20210612081822.300">/*
@language css

    leoSettings.leo: @data qt-gui-plugin-style-sheet

    =========== Leo's new, fully parameterized, stylesheet. ===========
    
    This stylesheet is responsible for most of Leo's appearance.
    This stylesheet is composed of this nodes and all its descendants, in outline order.
    
    Leo inserts the settings in the tree "Qt Gui Stylesheet settings" into this stylesheet.
    Modify those settings, *not* this stylesheet.
    
    About Qt stylesheets: http://qt-project.org/doc/qt-4.8/stylesheet.html
*/

</t>
<t tx="yen.20210612081822.301">/* ========== Body pane ========== */

QTextEdit#richTextEdit {
    background-color:           @body-bg;
    color:                      @body-fg;
    selection-color:            @body-sel-fg;
    selection-background-color: @body-sel-bg;
    font-family:                @body-font-family;
    font-size:                  @font-size-body;
    /* Don't use body-font-size for the font-size. */
    font-weight:                @body-font-weight;
    font-style:                 @body-font-style;
}

QTextEdit#bigtextwarning {
    background-color: red; /* No longer used */
}</t>
<t tx="yen.20210612081822.302">/* ========== Buttons ========== 

    Examples::
    
        QPushButton#&lt;button text&gt;-button { &lt;style&gt; }
        QPushButton[button_kind="&lt;button kind&gt;"] { &lt;style&gt; }
*/

/*
    Default for all buttons.
    If you specify the size, you should also specify the font.
*/

/* -----
QPushButton {
    font-family: at-push-button-font-family;
    font-size:   at-push-button-font-size;
}
----- */

QPushButton[button_kind="at-button"] {
    /* Buttons created by @button nodes. */
    background-color: @at-button-btn-bg;
}
QPushButton[button_kind="debug-script"] {
    background-color: @debug-script-btn-bg;
}
QPushButton[button_kind="generic-button"] {
    /* The default styling for buttons. */
    background-color: @generic-button-btn-bg;
}
QPushButton[button_kind="run-script"] {
    /* The singleton run-script button. */
    background-color: @run-script-btn-bg;
}
QPushButton[button_kind="script-button"] {
    /* Buttons created by the script-button button. */
    background-color: @script-button-btn-bg;
}
QPushButton#script-button-button { 
    /* The singleton script-button button. */
    background-color: @script-button-button-btn-bg;
}
</t>
<t tx="yen.20210612081822.303">/*  ========== Dialogs (QLabel) ========== 

    Use care when changing these settings: they are used for dialog text. 
*/

QLabel {
    border:         @dialog-border;
    margin:         @dialog-margin;
    font-family:    @dialog-font-family;
    font-size:      @dialog-font-size;
    font-weight:    @dialog-font-weight;
    font-style:     @dialog-font-style;
}

QCheckBox#TipCheckbox {
    background: lightgrey;
}
</t>
<t tx="yen.20210612081822.304">/* ========== Components of the Find Tab ========== */

QWidget#findTab {
    background-color: @find-tab-bg;
}

QLabel#findHeading, QLabel#findHelp {
    font-family:    @find-font-family;
    font-size:      @find-font-size; 
    font-weight:    @find-font-weight;
    font-style:     @find-font-style; 
}

QLabel#findLabel, QLabel#changeLabel {
    font-family:    @find-font-family;
    font-size:      @find-font-size;
    font-weight:    @find-font-weight;
    font-style:     @find-font-style;
}

QLineEdit#findPattern, QLineEdit#findChange {
    font-family:    @find-pattern-font-family;
    font-size:      @find-font-size;
    font-weight:    @find-font-weight;
    font-style:     @find-font-style;
}

QCheckBox, QRadioButton {
    /* For the Find Tab. */
    font-family:    @checkbox-font-family;
    font-size:      @checkbox-font-size;
}
</t>
<t tx="yen.20210612081822.305">/* ===== Optional line-number gutter ===== */

QFrame#gutter {
    background-color:           @gutter-bg;
    color:                      @gutter-fg;
    font-family:                @gutter-font-family;
    font-size:                  @gutter-font-size;
    font-weight:                @gutter-font-weight;
    font-style:                 @gutter-font-style;
}</t>
<t tx="yen.20210612081822.306">/* ========== The log pane &amp; other text widgets ========== */

QTextEdit:focus {
  border-color: @focused-border-focus-color; 
}

QTextEdit {
    border-color:               @focused-border-unfocus-color; 
    border-style:               @focused-border-style;
    border-width:               @focused-border-width; 
    background-color:           @log-bg;
    color:                      @log-fg;
    selection-color:            @log-sel-fg;
    selection-background-color: @log-sel-bg;
    font-family:                @log-font-family;
    font-size:                  @log-font-size;
    font-weight:                @log-font-weight;
    font-style:                 @log-font-style;
}
</t>
<t tx="yen.20210612081822.307">/* ==========  Minibuffer ========== */

/* ----- The minibuffer itself ----- */

QLineEdit#lineEdit {
    color:                      @minibuffer-fg;
    background-color:           @minibuffer-bg;
    selection-color:            @minibuffer-sel-fg;
    selection-background-color: @minibuffer-sel-bg;
    font-family:                @minibuffer-font-family;
    font-size:                  @minibuffer-font-size;
    font-weight:                @minibuffer-font-weight;
    font-style:                 @minibuffer-font-style;
}

/* ----- The label of the minibuffer ----- */

QLabel#minibufferLabel {
    border:         @minibuffer-border;
    margin:         @minibuffer-margin;
    font-family:    @minibuffer-font-family;
    font-size:      @minibuffer-font-size;
    font-weight:    @minibuffer-font-weight;
    font-style:     @minibuffer-font-style;
}

</t>
<t tx="yen.20210612081822.308">/* ========== Outline pane ========== */

QTreeWidget {
    /* Outline pane defaults. */
    border-style:               @focused-border-style;
    border-width:               @focused-border-width; 
    border-color:               @focused-border-unfocus-color; 
    color:                      @tree-fg;
    background-color:           @tree-bg;
    font-family:                @tree-font-family;
    font-size:                  @tree-font-size;
    font-weight:                @tree-font-weight;
    font-style:                 @tree-font-style;
    show-decoration-selected:   0; /* 1: select entire row */
}

QTreeWidget QLineEdit {
    /* Headlines when they *are* being edited. */
    color:                      @head-fg;
    background-color:           @head-bg;
    selection-color:            @head-sel-fg; 
    selection-background-color: @head-sel-bg;
    font-family:                @head-font-family;
    font-size:                  @head-font-size; 
    font-weight:                @head-font-weight;
    font-style:                 @head-font-style;
}

QTreeWidget:focus {
  border-style:         @focused-border-style;
  border-width:         @focused-border-width; 
  border-color:         @focused-border-focus-color; 
}

QTreeWidget::item:selected {
    /* Headlines when they selected but *not* edited. */
    color:              @edit-label-fg;
    background-color:   @edit-label-bg;
    font-family:        @edit-label-font-family;
    font-size:          @edit-label-font-size;
    font-weight:        @edit-label-font-weight;
    font-style:         @edit-label-font-style;
}

/* ===== 

QTreeView::branch:open{
    color:                      @tree-fg;
    background-color:           @tree-bg;
}

QTreeView::branch:closed{
    color:                      @tree-fg;
    background-color:           @tree-bg;
}

QTreeView::branch:closed:has-children{
    image: AT-tree-image-closed;
}

QTreeView::branch:open:has-children{
    image: At-tree-image-open;
}

===== */

</t>
<t tx="yen.20210612081822.309"></t>
<t tx="yen.20210612081822.31"></t>
<t tx="yen.20210612081822.310">/* ========== bookmarks.py plugin ========== */

#show_bookmarks QPushButton {
    color:              @bookmarks_base_color;
    margin:             @bookmarks_base_margin;
    padding:            @bookmarks_base_padding;
    border:             @bookmarks_base_border;
    font-family:        @bookmarks_base_family;
    font-size:          @bookmarks_base_size;
    font-style:         @bookmarks_base_style;
    font-weight:        @bookmarks_base_weight;
    text-decoration:    @bookmarks_base_decoration;
}


</t>
<t tx="yen.20210612081822.311">/* ========== screencast.py plugin========== */

QPlainTextEdit#screencastcaption {
    background-color:   @screencast-bg;
    font-family:        @screencast-font-family;
    font-size:          @screencaset-font-size;
    font-weight:        @screencast-font-weight;
    font-style:         @screencaset-font-style;
}
</t>
<t tx="yen.20210612081822.312">/* ========== interact.py plugin ========== */

QPushButton[button_kind="interact"] {
    /* Buttons from the interact plugin. */
    background-color: @interact-btn-bg;
}
</t>
<t tx="yen.20210612081822.313">/* ========== quickmove.py plugin ========== */

QPushButton[button_kind="quick-move"] { 
    /* Buttons from the quickmove plugin. */
    background-color: @quick-move-btn-bg;
}</t>
<t tx="yen.20210612081822.314">QWidget#body-text-renderer {
    color:              @render-fg;
    background-color:   @render-bg;
}</t>
<t tx="yen.20210612081822.315">QSplitter {
    border-color:       @splitter-border-fg;
    background-color:   @splitter-bg;
    border-style:       @splitter-border-style;
}

QSplitter::handle {
    /* Supports only background attributes. */
    background-color:   @splitter-handle-bg;
}

QSplitter::handle:hover {
    background-color:   @splitter-hover-bg;
}
</t>
<t tx="yen.20210612081822.316">/* Status areas. */

QLineEdit#status1, QLineEdit#status2 {
    background-color:   @status-bg;
    color:              @status-fg;
    border-color:       @status-border-color;
    border-width:       @status-border-width;
    border-style:       @status-border-style;
    font-family:        @status-font-family;
    font-size:          @status-font-size;
    font-weight:        @status-font-weight;
    font-style:         @status-font-style;
}

</t>
<t tx="yen.20210612081822.317">/* ========== Widgets ========== */

/* ----- Destroys other background colors!
QFrame {
    background-color: at-frame-bg;
}
----- */

QScrollArea {
    background-color:   @scroll-area-bg;
}

QTabbedWidget {
    background-color:   @tabbed-widget-bg;
}

QTabBar::tab {
    background:         @unselected-tab-bg;
}

QTabBar::tab:selected, QTabBar::tab:hover {
    background:         @selected-tab-bg;
}

QStackedWidget {
    border-color:       @stacked-widget-border-color;
    background-color:   @stacked-widget-bg;
    padding:            @stacked-widget-padding;
}
</t>
<t tx="yen.20210612081822.318">/* ----- bookmarks.py ----- */

#show_bookmarks QPushButton[style_class~='bookmark_children'] {
    color:              @bookmarks_children_color;
    font-family:        @bookmarks_children_family;
    font-size:          @bookmarks_children_size;
    font-weight:        @bookmarks_children_weight;
    text-decoration:    @bookmarks_children_decoration;
}

#show_bookmarks QPushButton[style_class~='bookmark_expanded'] {
    font-size:          @bookmarks_expanded_size;
    color:              @bookmarks_expanded_color;
    font-style:         @bookmarks_expanded_style;
    font-weight:        @bookmarks_expanded_weight;
    text-decoration:    @bookmarks_expanded_decoration;
}

#show_bookmarks QPushButton[style_class~='bookmark_current'] {
    font-size:          @bookmarks_current_size;
    color:              @bookmarks_current_color;
    font-style:         @bookmarks_expanded_style;
    font-weight:        @bookmarks_current_weight;
    text-decoration:    @bookmarks_current_decoration;
}</t>
<t tx="yen.20210612081822.319">The following is an example user style sheet containing alternate highlighting for active panes.

To enable:

- Copy to myLeoSettings.leo.
- Remove the @ignore.
- Specify the settings used in the stylesheet.</t>
<t tx="yen.20210612081822.32"></t>
<t tx="yen.20210612081822.320">/* leoSettings.leo: @data qt-gui-user-style-sheet */

/* alternative active pane highlighting */

QTextEdit#log-widget,
QLineEdit#lineEdit,
QScrollArea#findScrollArea,
LeoQTreeWidget#treeWidget,
QTextEdit#richTextEdit {

    border-color: @focused-border-unfocus-color;
    border-style: @focused-border-style;
    border-width: @focused-border-width;
}

QTextEdit:focus#log-widget,
QLineEdit:focus#lineEdit,
QScrollArea:focus#findScrollArea,
LeoQTreeWidget:focus#treeWidget,
QTextEdit:focus#richTextEdit {

    border-color: @focused-border-focus-color;
}

QLineEdit#findPattern, QLineEdit#findChange {
  
    border-color: @focused-border-unfocus-color;
    border-style: @focused-border-style;
    border-width: @focused-border-width;
}

QLineEdit:focus#findPattern, QLineEdit:focus#findChange {

    border-color: @focused-border-focus-color;
    border-style: @focused-border-style;
    border-width: @focused-border-width;
}

QTextEdit:hover#log-widget, LeoQTreeWidget:hover#treeWidget,
QTextEdit:hover#richTextEdit {

}</t>
<t tx="yen.20210612081822.321"></t>
<t tx="yen.20210612081822.322"></t>
<t tx="yen.20210612081822.323">True: Automatically extend the completed text to the longest common prefix of all completions.</t>
<t tx="yen.20210612081822.324">True: When typing an opening bracket '(','[' or '{', immediately type the
corresponding closing bracket.  To move past the closing bracket, just type it.</t>
<t tx="yen.20210612081822.325"></t>
<t tx="yen.20210612081822.326">True: Don't add characters during autocompletion that are not part of any computed completion.</t>
<t tx="yen.20210612081822.327">True: use jedi for autocompletion if available.
See https://jedi.readthedocs.io/en/latest/index.html
</t>
<t tx="yen.20210612081822.328">True:  show completions in a QCompleter popup.
False: show completions in Leo's Completions tab.

**Note**: this option has effect only when using the qt or qttabs gui's.
</t>
<t tx="yen.20210612081822.329"></t>
<t tx="yen.20210612081822.33"></t>
<t tx="yen.20210612081822.330">True: flash matching bracket when typing (, ), [, ], { or }.</t>
<t tx="yen.20210612081822.331"></t>
<t tx="yen.20210612081822.332"></t>
<t tx="yen.20210612081822.333">The number of times to flash matching brackets.</t>
<t tx="yen.20210612081822.334">One half the total cycle time of bracket flashes, in milliseconds.</t>
<t tx="yen.20210612081822.335"></t>
<t tx="yen.20210612081822.336">True:  Chapter tabs appear in the outline pane.
False: Chapter tabs do not appear.</t>
<t tx="yen.20210612081822.337">True:  Chapter commands are functional.
False: Chapter commands do not exists.

Leo shows the chapters dropdown box only if this setting is True.
</t>
<t tx="yen.20210612081822.338">See the "Tree Operation" node for settings that affect how the tree pane works.</t>
<t tx="yen.20210612081822.339">True: find-def (ctrl-click on word) creates a clone of the defining node.</t>
<t tx="yen.20210612081822.34"></t>
<t tx="yen.20210612081822.340">True: the execute-script command executes the entire body, even if text is selected.</t>
<t tx="yen.20210612081822.341"></t>
<t tx="yen.20210612081822.342">True: (Recommended) Make a "Recovered Nodes" node whenever Leo reads a file that has been changed outside of Leo.
</t>
<t tx="yen.20210612081822.343"># True: Show user tips on startup.</t>
<t tx="yen.20210612081822.344">True: warn if a command has no setting.</t>
<t tx="yen.20210612081822.345"># Lines starting with '#' are comment lines.
# A list of command names to be pre-loaded into the history list.
pylint
sort-lines
</t>
<t tx="yen.20210612081822.346">The maximum line length allowed by the find-long-lines command.</t>
<t tx="yen.20210612081822.347">The maximum number of lines to show in @data nodes.

0 causes all lines to be shown.
</t>
<t tx="yen.20210612081822.348">The string to be appended to file names resulting from the Remove Sentinels command.
If the value starts with . the extension is appended to the original file name.
Otherwise, the extension is appended before the file extension.
Example 1:
  File name x.y
  remove_sentinels_extension = _ns
  Result: x_ns.y
Example 2:
  File name x.y
  remove_sentinels_extension = .txt
  Result: x.y.txt

</t>
<t tx="yen.20210612081822.349"></t>
<t tx="yen.20210612081822.35"></t>
<t tx="yen.20210612081822.350">True:  allow joined lines to contain strings.
False: (Recommended by EKR): Retain alignment of strings.</t>
<t tx="yen.20210612081822.351">Should be &lt;= beautify-max-split-line-length.
Zero suppresses all line joining.</t>
<t tx="yen.20210612081822.352">Zero suppresses all line splitting.</t>
<t tx="yen.20210612081822.353"></t>
<t tx="yen.20210612081822.354">Important: the order the open_flash_brackets and close_flash_brackets settings must be consistent.</t>
<t tx="yen.20210612081822.355">Important: the order the open_flash_brackets and close_flash_brackets settings must be consistent.</t>
<t tx="yen.20210612081822.356"></t>
<t tx="yen.20210612081822.357"># The names of your classes, one per line.

Commands
vnode
position
</t>
<t tx="yen.20210612081822.358"># The names of your typedef types and standard types, one per line.
#
# c-to-python converts::
#
#   new aType(...)
#
# to::
#
#   aType(...)

char
void
short
long
int
double
float
unsigned</t>
<t tx="yen.20210612081822.359"># The instance variables (ivars) used by your programs classes.
# This creates a dictionary.  Keys are class names, values are lists of ivars.

# Lines ending with a colon specify keys.
# All other lines are comma-delimited lists of ivars for the last-seen key.
# Trailing commas are ignored.

atFile:
    mCommands, mErrors, mStructureErrors,
    mTargetFileName, mOutputFileName, mOutputStream,
    mStartSentinelComment, mEndSentinelComment, mRoot

vnode:
    mCommands, mJoinList, mIconVal, mTreeID, mT, mStatusBits

tnode:
    mBodyString, mBodyRTF, mJoinHead, mStatusBits, mFileIndex,
    mSelectionStart, mSelectionLength, mCloneIndex,

LeoFrame:
    mNextFrame, mPrevFrame, mCommands,

Commands:
# public
    mCurrentVnode, mLeoFrame, mInhibitOnTreeChanged, mMaxTnodeIndex,
    mTreeCtrl, mBodyCtrl, mFirstWindowAndNeverSaved,
#private
    mTabWidth, mChanged, mOutlineExpansionLevel, mUsingClipboard,
    mFileName, mMemoryInputStream, mMemoryOutputStream, mFileInputStream,
    mInputFile, mFileOutputStream, mFileSize, mTopVnode, mTagList,
    mMaxVnodeTag,
    mUndoType, mUndoVnode, mUndoParent, mUndoBack, mUndoN,
    mUndoDVnodes, mUndoLastChild, mUndoablyDeletedVnode,
</t>
<t tx="yen.20210612081822.36"></t>
<t tx="yen.20210612081822.360"></t>
<t tx="yen.20210612081822.361">True: add stuff consisting only of whitespace to the kill ring.</t>
<t tx="yen.20210612081822.362"></t>
<t tx="yen.20210612081822.363"></t>
<t tx="yen.20210612081822.364"></t>
<t tx="yen.20210612081822.365">The format string used when creating the Time/Date string for the Insert Time/Date command.

See the Python documentation for time.strftime for full details.

Examples:
1/30
%m/%d

1/30/03 8:31:02
%m/%d/%y %H:%M:%S

Thu, 30 Jan 2003 16:57:12
%a, %d %b %Y %H:%M:%S
</t>
<t tx="yen.20210612081822.366">For use by make-stub-files command.</t>
<t tx="yen.20210612081822.367">True: allow stub files to be overwritten
</t>
<t tx="yen.20210612081822.368"></t>
<t tx="yen.20210612081822.369"></t>
<t tx="yen.20210612081822.37"></t>
<t tx="yen.20210612081822.370"></t>
<t tx="yen.20210612081822.371"></t>
<t tx="yen.20210612081822.372"></t>
<t tx="yen.20210612081822.373">True: use verbose mode.</t>
<t tx="yen.20210612081822.374">
</t>
<t tx="yen.20210612081822.375">AstFormatter.*: str
Pattern.all_matches: Sequence
Pattern.full_balanced_match: Optional[int]
Pattern.match_balanced: int
Pattern.match_entire_string: bool
StandAloneMakeStubFile.scan_types: Dict[str, str]
StubFormatter.do_.*: str
StubTraverser.format_returns: str
StubTraverser.match_return_patterns: Tuple[bool,str]
StubTraverser.match_return_pattern: Optional[str]
StubTraverser.match_balanced: int</t>
<t tx="yen.20210612081822.376"># Patterns to be applied to argument lists and return expressions.

aList: Sequence
controller: StandAloneMakeStubFile
fn: str
i[0-3]*: int
node: Node
parser: optparse.OptionParser
repr(*): str
s[0-3]*: str
str%(*): str
str%str: str
str.join(*): str
str.replace(*): str

# Leo patterns:

aList: Sequence
aList1: Sequence
aList2: Sequence
c: C
c1: C
c2: C
i: int
j: int
k: int
node: ast.Ast
p: P
p1: P
p2: P
s: str
s2: str
strict: bool
v: V
v1: V
v2: V</t>
<t tx="yen.20210612081822.377"># Lines to be inserted at the start of each stub file.

from typing import Any, Dict, Optional, Sequence, Tuple, Union

# At present, I don't understand how to tell mypy about ast.Node
# import ast
# Node = ast.Node

Node = Any
</t>
<t tx="yen.20210612081822.378"># Regular expression patterns.

.*__name__: str
</t>
<t tx="yen.20210612081822.379">The directory to which stub files are written.</t>
<t tx="yen.20210612081822.38"># Not an official solarized color: same as solorarized-base3</t>
<t tx="yen.20210612081822.380"></t>
<t tx="yen.20210612081822.381">True: allow stub files to be overwritten
</t>
<t tx="yen.20210612081822.382">The directory to which stub files are written.</t>
<t tx="yen.20210612081822.383">@color</t>
<t tx="yen.20210612081822.384"></t>
<t tx="yen.20210612081822.385"></t>
<t tx="yen.20210612081822.386"></t>
<t tx="yen.20210612081822.387"></t>
<t tx="yen.20210612081822.388"></t>
<t tx="yen.20210612081822.389"></t>
<t tx="yen.20210612081822.39"></t>
<t tx="yen.20210612081822.390"></t>
<t tx="yen.20210612081822.391"></t>
<t tx="yen.20210612081822.392"></t>
<t tx="yen.20210612081822.393"></t>
<t tx="yen.20210612081822.394"></t>
<t tx="yen.20210612081822.395"></t>
<t tx="yen.20210612081822.396"></t>
<t tx="yen.20210612081822.397"></t>
<t tx="yen.20210612081822.398"></t>
<t tx="yen.20210612081822.399"></t>
<t tx="yen.20210612081822.4"></t>
<t tx="yen.20210612081822.40">To see these colors: http://ethanschoonover.com/solarized

For both light and dark
=======================

blue      #268bd2
cyan      #2aa198 
green     #859900
magenta   #d33682
orange    #cb4b16
red       #dc322f
violet    #6c71c4
yellow    #b58900


blue      #268bd2  4/4 blue      33 #0087ff 55 -10 -45  38 139 210 205  82  82
cyan      #2aa198  6/6 cyan      37 #00afaf 60 -35 -05  42 161 152 175  74  63
green     #859900  2/2 green     64 #5f8700 60 -20  65 133 153   0  68 100  60
magenta   #d33682  5/5 magenta  125 #af005f 50  65 -05 211  54 130 331  74  83
orange    #cb4b16  9/3 brred    166 #d75f00 50  50  55 203  75  22  18  89  80
red       #dc322f  1/1 red      160 #d70000 50  65  45 220  50  47   1  79  86
violet    #6c71c4 13/5 brmagenta 61 #5f5faf 50  15 -45 108 113 196 237  45  77
yellow    #b58900  3/3 yellow   136 #af8700 60  10  65 181 137   0  45 100  71


base03    #002b36  8/4 brblack  234 #1c1c1c 15 -12 -12   0  43  54 193 100  21
base02    #073642  0/4 black    235 #262626 20 -12 -12   7  54  66 192  90  26
base01    #586e75 10/7 brgreen  240 #585858 45 -07 -07  88 110 117 194  25  46
base00    #657b83 11/7 bryellow 241 #626262 50 -07 -07 101 123 131 195  23  51
base0     #839496 12/6 brblue   244 #808080 60 -06 -03 131 148 150 186  13  59
base1     #93a1a1 14/4 brcyan   245 #8a8a8a 65 -05 -02 147 161 161 180   9  63
base2     #eee8d5  7/7 white    254 #e4e4e4 92 -00  10 238 232 213  44  11  93
base3     #fdf6e3 15/7 brwhite  230 #ffffd7 97  00  10 253 246 227  44  10  99

Dark
====

    base1 optional emphasized content (keywords)
  * base0 default (body text)
    
    base01 comments
    base02 background highlights (selected background)
  * base03 background
    
Light
=====

    base01 optional emphasized content (keywords)
  * base00 default (body text)
    base1 comments
    base2 background highlights (selected background)
  * base3 background
</t>
<t tx="yen.20210612081822.400">Required if using Sphinx markup.</t>
<t tx="yen.20210612081822.401"></t>
<t tx="yen.20210612081822.402"># True: generate rst markup from @code and @doc parts.</t>
<t tx="yen.20210612081822.403"># True: generate only from @doc parts.</t>
<t tx="yen.20210612081822.404"># True: generate rst markup. False: generate plain text.</t>
<t tx="yen.20210612081822.405">True: write comment line of the form:
    
.. rst3: filename: &lt;filename&gt;

at start of intermediate file. Requires rst3_generate_rst and
rst3_write_intermediate_file options both to be true.</t>
<t tx="yen.20210612081822.406"># Formatting options that apply to both code and rst modes....</t>
<t tx="yen.20210612081822.407"># Can be set by @rst-no-head headlines.</t>
<t tx="yen.20210612081822.408"></t>
<t tx="yen.20210612081822.409"></t>
<t tx="yen.20210612081822.41"></t>
<t tx="yen.20210612081822.410"></t>
<t tx="yen.20210612081822.411"></t>
<t tx="yen.20210612081822.412"></t>
<t tx="yen.20210612081822.413"></t>
<t tx="yen.20210612081822.414"></t>
<t tx="yen.20210612081822.415"></t>
<t tx="yen.20210612081822.416">@nocolor-node

The rST markup string preceding code parts.

The default for the C, Perl, Python and Ruby languages is: 

'**code**:\n\n.. code-block:: %s\n' % language.title()

The default for all other languages is:
    
'**code**:\n\n.. class:: code\n..\n\n::\n'

A reasonable alternative would be:
    
'\n.. class:: code\n..\n\n::\n'</t>
<t tx="yen.20210612081822.417"></t>
<t tx="yen.20210612081822.418">True:  The Save command clears undo buffer.
False: The undo buffer persists across saves.</t>
<t tx="yen.20210612081822.419">Zero (recommended): unlimited stack size.
Non-zero: limit the maximum stack size to the given number.</t>
<t tx="yen.20210612081822.42">True: enable abbreviations
False disable abbreviations
</t>
<t tx="yen.20210612081822.420">node granularity: start a new undo unit when typing moves to a new node.
line granularity: start a new undo unit when typing moves to new line.
word granularity: start a new undo unit when typing starts a new word.
char granularity: start a new undo unit for each character typed.

'line' granularity is the default used if no valid setting is specified.

Leo used char granularity for all version prior to 4.3. char granularity is not
recommended; it is clumsy and wasteful of computer memory.</t>
<t tx="yen.20210612081822.421">@language rest

All @button nodes in the @buttons tree define **global buttons** that
appear in all Leo outlines.

All other @button nodes define **local buttons** that appear only in this
outline.

@language python
</t>
<t tx="yen.20210612081822.422">@language rest

All @button nodes in the @buttons tree define **global buttons** that appear in all Leo outlines.

All other @button nodes define **local buttons** that appear only in this outline.

@language python
</t>
<t tx="yen.20210612081822.423">@language rest

All @command nodes in the @commands tree define **global commands** that
appear in all Leo outlines.

All other @command nodes define **local commands** that are defined only in
this outline.
</t>
<t tx="yen.20210612081822.424">@language python
@nocolor-node

All @command nodes in the @commands tree define **global commands** that appear in all Leo outlines.

All other @command nodes define **local commands** that are defined only in this outline.
</t>
<t tx="yen.20210612081822.425"></t>
<t tx="yen.20210612081822.426">True: (Recommended) The execute script command writes the script to be executed
      to a file, then executes the script using Python's execFile function. The
      script_file_path setting specifies the path to this file.
      
False (legacy): The execute script command uses Python's exec command to execute the script. </t>
<t tx="yen.20210612081822.427">The path to the file to be written by the execute-script command.

The default path is home/.leo/scriptFile.py if no path is given.
  
Notes:
    
- This setting has effect only if the write_script_file setting is True.
- Use / to as the path delimiter, regardless of platform.
- The filename should end in .py.
</t>
<t tx="yen.20210612081822.428">idle: use Python's standard Idle debugger.

winpdb: (recommended) use winpdb debugger.

To use winpdb you must download and install winpdb from:
http://www.digitalpeers.com/pythondebugger/

There is no special support for Idle, so you may as well open Idle using Leo's
open-python-window command.</t>
<t tx="yen.20210612081822.429">c:\Python24\Scripts\_winpdb.py</t>
<t tx="yen.20210612081822.43">Scripting abbreviations will be enabled if:
    
1. @bool enable-abbreviations = True
2. *either* this setting or @bool scripting-at-script-nodes = True</t>
<t tx="yen.20210612081822.430"></t>
<t tx="yen.20210612081822.431" lineYOffset="4b002e">Set to True to enable node appearance modifications
See tree-declutter-patterns
</t>
<t tx="yen.20210612081822.432" lineYOffset="4b002e"># **Decluttering** replaces controls custom formatting of headlines, including:

# - Hiding or changing headline text,
# - Adding icons to headlines,
# - Changing the styling of headlines.

# @bool tree-declutter must be True to enable decluttering.

# blank lines and lines starting with '#' are ignored.
# See the children of this node for details.
</t>
<t tx="yen.20210612081822.433"># **Decluttering** replaces controls custom formatting of headlines, including:

# - Hiding or changing headline text,
# - Adding icons to headlines,
# - Changing the styling of headlines.

# Decluttering is *inactive* when you are editing a headline.

# Decluttering is *completely optional*. To enable decluttering, use::

     # @bool tree-declutter = True
     
# Decluttering is controlled by **decluttering rulesets**.
# You specify decluttering rulesets in the body text of::
     
    # @data tree-declutter-patterns
    
# As usual with @data nodes:

# - Blank lines and lines starting with '#' are ignored.
# - You may organize the text of the @data node using child nodes.

# Each ruleset consists of a list of lines:

# - The first line is a **rule line**, containing a **find pattern**.
# - The second line is a **replacement line**.
# - The ruleset ends with zero or more **style lines**.

# Find patterns are `regular expressions &lt;https://docs.python.org/2/library/re.html&gt;`_.
# Decluttering affects only those headlines that match a rule pattern. 

# The following section shows some example rulesets. Later sections discuss decluttering commands, patterns and styles in more detail.
</t>
<t tx="yen.20210612081822.434"># All rulesets start with a **rule line** of the form::

    # RULE &lt;regular expression&gt;
    
# The ruleset matches a headline if and only if the regular expression matches. Matches can start anywhere in the headline. Leo first attempts to a match using re.match. If that doesn't work, Leo tries re.search.

# A **replacement line** must follow the rule line. Here are the valid forms::

    # REPLACE &lt;substitution expression&gt;
    # REPLACE-HEAD
    # REPLACE-TAIL
    # REPLACE-REST
    
# - REPLACE replaces the headline by the value of the substitution expression.  For example::

    # REPLACE \1
    
  # matches replaces the headline by the first matched regex group.

# - REPLACE-HEAD replaces replace the headline by the text that precedes the matched text.

# - REPLACE-TAIL replaces the headline by the text that follows the matched text.

# - REPLACE-REST replaces the headline by everything except the matched text.
</t>
<t tx="yen.20210612081822.435"># Leo applies style lines only if they appear in a ruleset that matches a headline.
# Style lines do the following...

# Add an icon to the headline::

    # ICON path/to/icon
    
# Set the background or foreground color to a color number or names::

    # BG #FF8800
    # FG @solarized-magenta

# Set the font to a given font name::

    # Font Times
    
# Set the font size in pixels (PX) or points (PT)::

    # PX 40
    # PT 16
    
# Enable or disable italics::

    # ITALIC 0
    # ITALIC 1

# Set the font weight to one of Light, Normal, DemiBold, Bold, Black::

    # WEIGHT DemoBold
</t>
<t tx="yen.20210612081822.436"># Add Icon to folders and remove /-/
RULE ^/(.*)/$
REPLACE \1 
ICON file_icons/folder.png

# Add icon to path folders and remove @path
RULE ^@path (.*)
REPLACE \1 
ICON file_icons/folder_path.png

# Add Icon to removed folders and remove */-/*
RULE ^\*/(.*)/\*$
REPLACE \1 
ICON file_icons/folder_removed.png

# Add Icon to removed files and remove *-* but not **-**
RULE ^\*([^\*/]*[^\*]*[^\*/]*)\*$
REPLACE \1 
ICON file_icons/removed.png
</t>
<t tx="yen.20210612081822.437"># if the node name starts with 'peacock node DEMO', make a mess of it
RULE ^(peacock node DEMO)
REPLACE LOOK: \1
ICON Tango/16x16/emotes/face-grin.png
ICON Tango/16x16/emotes/face-wink.png
FG @solarized-magenta
BG white
FONT Times
PX 40
ITALIC 1
WEIGHT Bold
</t>
<t tx="yen.20210612081822.438"># RULE :([\w_@]+:)+\s*$
# REPLACE-HEAD
</t>
<t tx="yen.20210612081822.439"># remove @clean etc. and use an icon
RULE ^@clean (.*)
REPLACE \1
ICON file_icons/file_clean.png

RULE ^@auto (.*)
REPLACE \1
ICON file_icons/file_auto.png

RULE ^@edit (.*)
REPLACE \1
ICON file_icons/file_edit.png

RULE ^@asis (.*)
REPLACE \1
ICON file_icons/file_asis.png

RULE ^@nosent (.*)
REPLACE \1
ICON file_icons/file_nosent.png

RULE ^@file (.*)
REPLACE \1
ICON file_icons/file_file.png
</t>
<t tx="yen.20210612081822.44"># Comments lines (lines starting with '#') are ignored.
# Non-comment lines should have the form::
#
#    name=definition

# Definitions in @data abbreviation nodes override definitions in @data
# global-abbreviation nodes.

# Typically you would define @data global-abbreviation nodes
# in myLeoSettings.leo and @data abbreviation nodes in local files.
</t>
<t tx="yen.20210612081822.440"># show the last part of long filenames
RULE ^.{1,1000}/(.{20})
REPLACE …/\1
</t>
<t tx="yen.20210612081822.441"></t>
<t tx="yen.20210612081822.442">Automatically wrap text (insert newline) when typing exceeds this column.

Toggle on/off with `justify-toggle-auto` command, off initially unless
`autojustify-on-at-start` is True.
</t>
<t tx="yen.20210612081822.443">Turn text wrapping (newling insertion) on by default.

See `@int autojustify`
</t>
<t tx="yen.20210612081822.444"></t>
<t tx="yen.20210612081822.445"></t>
<t tx="yen.20210612081822.446">True: call os.chdir(base) when handling a relative path.
      as specified by the @string relative_path_base_directory setting.
      
False: Do not call os.chdir(base) when handing a relative path.</t>
<t tx="yen.20210612081822.447">With @clean and @file, Leo can store persistent data in nodes. This
information consists of the node’s gnx (Global Node Index) and the node’s
uA, (User Attributes).

The gnx gives each node a unique, immutable identity. Gnx’s make clones
possible. The uA allows scripts and plugins to associate arbitrarily much
additional data with each node.

By default, Leo’s importers preserve neither gnx’s nor uA’s. This makes
imported @auto trees second class citizens. To remedy this, if an outline
contains an @persistence node, Leo will save data in the @persistence tree
that allows Leo to recover gnx’s and uA’s when re-reading @auto files
later. This allows clone links and uA’s to persist.

This is an optional feature. The stored data is akin to bookmarks. The data
can “break” (become inaccessible) if the structure (including
class/method/function names) changes.
</t>
<t tx="yen.20210612081822.448">This option applies to directories specified in filenames in all kinds of @file trees, and to filenames specified in the @path directive.

True:  Leo attempts to create directories if they do not exist.
False: Leo never attempts to create directories.</t>
<t tx="yen.20210612081822.449"></t>
<t tx="yen.20210612081822.45"># EKR 2013/09/25: revised docstring and improved get_user().
# EKR 2015/04/28: added insert() and do(). Split this node into pieces.

@language python

"""

**Important**: scripting abbreviations are in effect only if the following
setting is in effect::
    
    @bool enable-abbreviations = True
    
and one (or both) of the following are in effect::
    
    @bool scripting-at-script-nodes = True
    @bool scripting-abbreviations = True

This node defines the environment in which substitution scripts are
evaluated. For example, if this node contains `import time`, then an
abbreviation like::

    date;;={|{import time;x=time.asctime()}|}

can be written more simply as::

    date;;={|{x=time.asctime()}|}

The environment will contain the following pre-defined values:

- `c` and `g`, as usual.
- `values`: a dict. see ask() and get() below.
- `_abr`, the abbreviation being expanded.

"""

# helpful imports
import os
import sys
import time
import datetime

# globals
try:
    import pwd  # for full name of user in templates
except:
    pwd = None
try:
    _user_name = os.environ['LOGNAME']
    if pwd and _user_name:
        _user_name = pwd.getpwnam(_user_name).pw_gecos.rstrip(',')
except KeyError:
    _user_name = None
</t>
<t tx="yen.20210612081822.450">True: report unchanged files when saving a .leo file.</t>
<t tx="yen.20210612081822.451">
</t>
<t tx="yen.20210612081822.452"></t>
<t tx="yen.20210612081822.453">This option specifies the directory to be used as a prefix for &lt;filename&gt; in

@path &lt;filename&gt;
@file &lt;filename&gt;
@root &lt;filename&gt;

when &lt;filename&gt; is a relative path.

Valid values for this option:

'!' means relative to the location leo.py (recommended).
'.' means relative to the location of the .leo file in the top window.

An absolute path (in platform-dependent format).

Relative paths are not allowed because their meaning would depend on the changing value of the current working directory.</t>
<t tx="yen.20210612081822.454"></t>
<t tx="yen.20210612081822.455"></t>
<t tx="yen.20210612081822.456">This option has effect only when importing so-called non-strict languages,
for which leading whitespace is not terribly significant.

True: @auto warns about mismatches that occur solely in leading whitespace.</t>
<t tx="yen.20210612081822.457">True: check all @&lt;file&gt; nodes in the outline for changes in corresponding external files.

Warning: Checking many networked files can hang Leo. See:
https://github.com/leo-editor/leo-editor/issues/262
</t>
<t tx="yen.20210612081822.458"></t>
<t tx="yen.20210612081822.459">True: run Pyflakes on each saved files, but only if it has been changed.</t>
<t tx="yen.20210612081822.46">def ask(s, default="", prompt=None):
    """Ask, always, for a value for template field 's'"""
    x = g.app.gui.runAskOkCancelStringDialog(
        c,
        title = s,
        message = prompt or s,
        default = default,
    )
    _values[s] = x
    return x or ''
</t>
<t tx="yen.20210612081822.460">True: write check messages to Leo's log pane as well as the console.

Note: check-outline always writes error messages to both log and console.</t>
<t tx="yen.20210612081822.461">True: raise a dialog warning about Python errors when writing files.</t>
<t tx="yen.20210612081822.462"></t>
<t tx="yen.20210612081822.463">This option affects how Leo treats body text in @root trees.

True:    Body text in @root trees start in doc mode.

This is the way @root trees always worked prior to version 3.10.

False:    Body text in @root trees start in code mode.

This way makes @root trees more compatible with @file trees.</t>
<t tx="yen.20210612081822.464">True:  Leo ensures that non-empty body text ends in a newline in @nosent trees.
False: Leo leaves body text alone when writing @nosent trees.</t>
<t tx="yen.20210612081822.465">nl or lf: (recommended) All lines end with "\n"
cr:       All lines end with "\r"
crlf:     All lines end with "\r\n"
platform: Lines end in platform-specific way.

With platform Leo opens output files in "w" mode rather than "wb" mode and writes '\n'

Please specify nl when uploading files to Leo's CVS site.</t>
<t tx="yen.20210612081822.466">The escape string that Leo inserts to represent underindented lines.

If a line starts with \\-N, Leo will write the line with N fewer spaces
than expected.

An **underindented line** is a line of body text that is indented less then
the starting line of the class, method or function in which it appears. Leo
outlines can not represent such lines exactly: every line in an external
file will have at least the indentation of any unindented line of the
corresponding node in the outline. Leo will issue a warning (not an error)
for underindented Python comment lines. Such lines can not change the
meaning of Python programs.
</t>
<t tx="yen.20210612081822.467"></t>
<t tx="yen.20210612081822.468">Example:

"Created by Leo at @date"

A comment to be iserted in derived files just after the initial @+leo line.
The comment will appear in an @comment sentinel.
Notes:
1. Leo replaces @date with the date and time that the derived file was created.
2. Use \n to separate lines.
3. This must be empty for compatibility with older versions of Leo.
4. Please use an empty comment when updating to CVS!</t>
<t tx="yen.20210612081822.469">@language rest

If present, say::
    
    @string stylesheet = x
    
The .leo file will contain the following line::

  &lt;?xml-stylesheet x ?&gt;

**Note**: x should contain any needed XML escapes.

**Note**: if x is empty, Leo will retain any xml-stylesheet line in the .leo file.
</t>
<t tx="yen.20210612081822.47">def close_xml():
    """simple, but usually right, code to close open XML tags"""
    tCurPosition = c.frame.body.widget.textCursor().position()    
    i = tCurPosition - len(_abr)
    b = c.p.b
    skips = 1
    while i and skips:
        s = []
        while i and b[i] != '&gt;':
            i -= 1
        i -= 1
        while i and (b[i] != '&lt;' or (s and b[i] == '&lt;' and s[0] == '/')):
            s[0:0] = b[i]
            i -= 1
            if s and s[0] == '&lt;' and len(s) &gt; 1 and s[1] == '/':
                skips += 1  # a closed tag indicates search one more tag
        skips -= 1
    s = ''.join([i if i.isalpha() else ' ' for i in s])
    if s.strip():
        return "&lt;/%s&gt;" % (s.split(None, 1)[0])
    else:
        return "&lt;/"
</t>
<t tx="yen.20210612081822.470"></t>
<t tx="yen.20210612081822.471"></t>
<t tx="yen.20210612081822.472"></t>
<t tx="yen.20210612081822.473">True: if the same file (basename) occurs more than once in the recent files
list, i.e. on two different paths it will appear as a submenu with the basename
as its heading, and the two (or more) paths as its entries.  This is easier to
scan visually than multiple full paths.  If recent_files_omit_directories is
True this setting has no effect.

False: don't use submenus for multiple path entries, unless recent_files_group_always
is true (and recent_files_omit_directories is False)
</t>
<t tx="yen.20210612081822.474">True: same as recent_files_group, except that even files (basenames) which are unique
have their containing path listed in the submenu - so visual clutter is reduced
but you can still see where things come from before you load them.

False: don't use submenus for multiple path entries, unless recent_files_group
is true (and recent_files_omit_directories is False)
</t>
<t tx="yen.20210612081822.475"># pairs of lines in this text indicate search and replace targets for
# cleaning the recent files list.  Each pair of lines should start with
# "REPLACE:" (first line) and "WITH:" (second line).  For example:
#
#  REPLACE: .gnome-desktop
#     WITH: My Desktop
#  REPLACE: /mnt/usr1/
#     WITH: /

</t>
<t tx="yen.20210612081822.476"></t>
<t tx="yen.20210612081822.477"></t>
<t tx="yen.20210612081822.478"></t>
<t tx="yen.20210612081822.479"></t>
<t tx="yen.20210612081822.48">def django_tag():
    """expand {block content} to 
       {% block content %}\n{% end_block content %} with proper
       indentation (for Django web templates)"""
    from leo.core.leoQt import QtCore
    widget = c.frame.body.widget
    scrollPosition = widget.getYScrollPosition()
    textCursor = widget.textCursor()
    tCurPosition = textCursor.position()  
    i = tCurPosition - len(_abr)
    b = c.p.b
    s = []
    while i and b[i] != '{':
        s[0:0] = b[i]
        i -= 1
    start = i
    s = ''.join(s)
    s_close = s.split()[0]
    indent = 0
    while i and b[i] != '\n':
        indent += 1
        i -= 1
    if indent:
        indent -= 1
    def later(c=c, indent=indent, b=b, s=s, _abr=_abr):
        offset = len("%s{%% %s %%}\n    %s" % (b[:start], s, ' '*indent))
        c.p.b = "%s{%% %s %%}\n    %s\n%s{%% end%s %%}%s" % (
            b[:start], s, ' '*indent, ' '*indent, s_close, b[start+len(s)+len(_abr):]
        )
        widget.setYScrollPosition(scrollPosition)
        textCursor.setPosition(offset)
        widget.setTextCursor(textCursor)
        c.bodyWantsFocusNow()
        
    QtCore.QTimer.singleShot(0, later)

</t>
<t tx="yen.20210612081822.480">
</t>
<t tx="yen.20210612081822.481">True:  Scroll the find tab ensure find input field visible. (fixes bug 1254861)
False: Never scroll the find tab automatically.</t>
<t tx="yen.20210612081822.482">True: Match each cloned node only once.
False: Match each cloned node for every cloned instance.</t>
<t tx="yen.20210612081822.483">@language rest

The @bool use-find-dialog and @bool minibuffer-find-mode settings comprise
a tri-state setting, as shown in this table:
    
minibuffer-find-mode    use-find-dialog     mode: Ctrl-F puts focus in
--------------------    ---------------     --------------------------
    True                    Ignored         minibuffer
    False                   True            dialog
    False                   False           Find tab in the log pane

*All modes*

- Start the search with Ctrl-F (start-search).
- Enter the find pattern.
- (Optional) Use &lt;Tab&gt; to enter the search pattern.
- Use &lt;Enter&gt; to start the search.

*dialog and find tab modes*

- Non-functional "buttons" remind you of key bindings.

*minibuffer mode*

- Use Ctrl-G as always to leave the minibuffer.
- The Find tab is not made visible, but the status area shows the settings.</t>
<t tx="yen.20210612081822.484">Should find commands show their result in the status line?
This setting must be explicitly set to `False` to suppress
the status line output, just deleting it to get a value of `None`
won't work - this preserves the default `True` action in the
absence of this setting.</t>
<t tx="yen.20210612081822.485">True: start-search (F3) automatically loads the Find Pattern.</t>
<t tx="yen.20210612081822.486">@language rest

The @bool use-find-dialog and @bool minibuffer-find-mode settings comprise
a tri-state setting, as shown in this table:
    
minibuffer-find-mode    use-find-dialog     mode: Ctrl-F puts focus in
--------------------    ---------------     --------------------------
    True                    Ignored         minibuffer
    False                   True            dialog
    False                   False           Find tab in the log pane

*All modes*

- Start the search with Ctrl-F (start-search).
- Enter the find pattern.
- (Optional) Use &lt;Tab&gt; to enter the search pattern.
- Use &lt;Enter&gt; to start the search.

*dialog and find tab modes*

- Non-functional "buttons" remind you of key bindings.

*minibuffer mode*

- Use Ctrl-G as always to leave the minibuffer.
- The Find tab is not made visible, but the status area shows the settings.</t>
<t tx="yen.20210612081822.487">The change string (without the quotes unless quotes are part of the string).

N.B. Leo requires utf-8 encoding for any non-ascii characters.</t>
<t tx="yen.20210612081822.488">The find string (without the quotes unless quotes are part of the string).

N.B. Leo requires utf-8 encoding for any non-ascii characters.

</t>
<t tx="yen.20210612081822.489"></t>
<t tx="yen.20210612081822.49">def do(commandName):
    '''Execute a command by name.'''
    c.k.simulateCommand(commandName,event=None)
</t>
<t tx="yen.20210612081822.490">These settings determine whether the corresponding checkbox is checked by default.</t>
<t tx="yen.20210612081822.491">Despite its name, this setting affects the default value of the Show Context checkbox.</t>
<t tx="yen.20210612081822.492">When checked, the Find and Change commands ignore the case of alphabetic characters when determining matches.
</t>
<t tx="yen.20210612081822.493">When checked, the Change command marks all headlines whose headline or body text are changed by the command.
</t>
<t tx="yen.20210612081822.494">When checked, the Find and Change commands mark all headlines in which a match is found with the pattern.
</t>
<t tx="yen.20210612081822.495"></t>
<t tx="yen.20210612081822.496">When checked, the Find and Change commands treat several characters specially in
the find pattern. The '*' character matches any sequence of zero or more
characters. The '.' character matches any single character. The '^' character at
the start of a pattern, or a '$' character at the end of a pattern matches a
newline.

Examples:

The pattern "^abc$" matches lines that only contain "abc".
The pattern "^a" matches any line starting with "A".
The pattern "a$" matches any line ending with "a".
The pattern "^*$" matches any line at all.</t>
<t tx="yen.20210612081822.497">When checked, the Find and Change commands search body text.
</t>
<t tx="yen.20210612081822.498">When checked, the Find and Change commands search headline text.
</t>
<t tx="yen.20210612081822.499"></t>
<t tx="yen.20210612081822.5">Leo's traditional tree color.</t>
<t tx="yen.20210612081822.50">def file_name():
    """dafault name of this file if implied by headline"""
    if c.p.h.endswith(".py"):
        return g.os_path_split(c.p.h)[-1]
    return ".py"
</t>
<t tx="yen.20210612081822.500"></t>
<t tx="yen.20210612081822.501">If neither is checked, Leo searches the entire outline.</t>
<t tx="yen.20210612081822.502"></t>
<t tx="yen.20210612081822.503">When checked, the Find and Change commands search only the currently selected headline and its offspring.
</t>
<t tx="yen.20210612081822.504">@language rest
@wrap

</t>
<t tx="yen.20210612081822.505">If True, uses headline "Foo.bar" for bar() defined in class Foo.

If False, does not do the above, useful if you don't use clones and don't
want the visual clutter of repeated class / file names.</t>
<t tx="yen.20210612081822.506">*Note*: Used only if @bool add-context-to-headlines is True.

If True, use headline "bar (foo.py)" for bar() defined at top level in foo.py. This is
useful if you've cloned the node so its origin is not obvious from context.

If False, does not do the above, useful if you don't use clones and don't
want the visual clutter of repeated class / file names.</t>
<t tx="yen.20210612081822.507">True: The cython importer will copy the first decorator preceding a
      function/method into the headline of the imported node.
      
**Note**: The importer will copy only the first line of a multiline decorator.</t>
<t tx="yen.20210612081822.508">True: The python importer will copy the first decorator preceding a
      function/method into the headline of the imported node.
      
**Note**: The importer will copy only the first line of a multiline decorator.</t>
<t tx="yen.20210612081822.509">False: (recommended) Enable import parsing for @shadow and @auto
True: @shadow and @auto create a single node for the entire file.</t>
<t tx="yen.20210612081822.51">def get(s, default='', prompt=''):
    """Ask for template field 's' only if not already known"""
    if s in _values:
        return _values[s]
    else:
        return ask(s, default=default, prompt=prompt) or ''
</t>
<t tx="yen.20210612081822.510"># typedef names, one per line

# These fix #545:

    # _Bool
    # scr_enter_status_t
    # scr_exec_status_t
    # scr_exit_status_t
    # scr_node_api_t
    # scr_update_status_t
    # uint16_t
    # uint8_t
</t>
<t tx="yen.20210612081822.511"># lowercase html tags, one per line.

a
abbr
acronym
address
applet
area
b
base
basefont
bdo
big
blockquote
body
br
button
caption
center
cite
code
col
colgroup
dd
del
dfn
dir
div
dl
dt
em
fieldset
font
form
frame
frameset
head
h1
h2
h3
h4
h5
h6
hr
html
i
iframe
img
input
ins
kbd
label
legend
li
link
map
menu
meta
noframes
noscript
object
ol
optgroup
option
p
param
pre
q
s
samp
script
select
small
span
strike
strong
style
sub
sup
table
tbody
td
textarea
tfoot
th
thead
title
tr
tt
u
ul
var</t>
<t tx="yen.20210612081822.512"># lowercase xml tags, one per line.

html
body
head
div
table
</t>
<t tx="yen.20210612081822.513"></t>
<t tx="yen.20210612081822.514"></t>
<t tx="yen.20210612081822.515"></t>
<t tx="yen.20210612081822.516"></t>
<t tx="yen.20210612081822.517"></t>
<t tx="yen.20210612081822.518"></t>
<t tx="yen.20210612081822.519">These are needed to handle shortcuts for the find panel!</t>
<t tx="yen.20210612081822.52">def get_language():
    '''Get a language name, and set name and cap_name in the namespace.'''
    x = g.app.gui.runAskOkCancelStringDialog(
        c,
        title = 'Language',
        message = 'Enter language name. Case does not matter.',
    )
    # g.trace('===== x:', repr(x))
    if not x: x = 'no-language!'
    _values = c.abbrev_subst_env['name'] = x.lower()
    _values = c.abbrev_subst_env['cap_name'] = x.capitalize()
    return x.lower()
</t>
<t tx="yen.20210612081822.520"></t>
<t tx="yen.20210612081822.521">True: plain keys in the outline pane search for headlines.
False: Ignore plain keys in the outline pane.
</t>
<t tx="yen.20210612081822.522">The setting only has effect on MacOS.
False: Legacy operation.
True:  Replace the Meta key with the Alt Key.
       This allows Windows Keyboards to be used without changing key bindings.
</t>
<t tx="yen.20210612081822.523"></t>
<t tx="yen.20210612081822.524">True: use smart quotes when typing.</t>
<t tx="yen.20210612081822.525">True: Remove Shift modifier when the desired key is a colon or semicolon.
      This fixes an infelicity in German keyboards.
</t>
<t tx="yen.20210612081822.526">True: use built-in vim emulation.</t>
<t tx="yen.20210612081822.527"></t>
<t tx="yen.20210612081822.528"></t>
<t tx="yen.20210612081822.529"></t>
<t tx="yen.20210612081822.53">def html_tag():
    """expand &lt;tag&gt; to 
       &lt;tag&gt;\n&lt;/tag&gt; with proper indendation"""
    from leo.core.leoQt import QtCore
    widget = c.frame.body.widget
    scrollPosition = widget.getYScrollPosition()
    textCursor = widget.textCursor()
    tCurPosition = textCursor.position()  
    i = tCurPosition - len(_abr)
    b = c.p.b
    s = []
    while i and b[i] != '&lt;':
        s[0:0] = b[i]
        i -= 1
    start = i
    s = ''.join(s)
    s_close = s.split()[0]
    indent = 0
    while i and b[i] != '\n':
        indent += 1
        i -= 1
    if indent:
        indent -= 1
    def later(c=c, indent=indent, b=b, s=s, _abr=_abr):
        offset = len("%s&lt;%s&gt;\n%s    " % (b[:start], s, ' '*indent))
        c.p.b = "%s&lt;%s&gt;\n%s    \n%s&lt;/%s&gt;%s" % (
            b[:start], s, ' '*indent, ' '*indent, s_close, b[start+len(s)+len(_abr):]
        )
        widget.setYScrollPosition(scrollPosition)
        textCursor.setPosition(offset)
        widget.setTextCursor(textCursor)
        c.bodyWantsFocusNow()
        
    QtCore.QTimer.singleShot(0, later)
</t>
<t tx="yen.20210612081822.530">@nocolor

This setting determines the initial binding for otherwise-unbound keystrokes
when no mode is in effect.  Note: the keyboard-quit command exits all modes.

The valid values are::

command:  Leo ignores the key (like Vim).
insert:  Leo inserts the key at the cursor (like Emacs)
overwrite: Leo replaces the character at the cursor.</t>
<t tx="yen.20210612081822.531">This node contains sets of key bindings and settings.

These sets should have headlines starting with @keys so that the Check Bindings
script can find them.

- The *inactive* sets should be children of the node '@ignore Unused key bindings'

- The *active* set should be *outside* of the @ignore and its descendants.
</t>
<t tx="yen.20210612081822.532">A shortcut specification has the form:

command-name = shortcutSpecifier

or

command-name ! pane = shortcutSpecifier

The first form creates a binding for all panes except the minibuffer. The second
form creates a binding for one or more panes. The possible values for 'pane'
are:

pane    bound panes
----    -----------
all     body,log,tree
body    body
log     log
mini    minibuffer
text    body,log
tree    tree
    
You may use None as the specifier. Otherwise, a shortcut specifier consists of a
head followed by a tail. The head may be empty, or may be a concatenation of the
following: (All entries in each row are equivalent).
    
Shift+ Shift-
Alt+ or Alt-
Control+, Control-, Ctrl+ or Ctrl-

Notes:

1. The case of plain letters is significant:  a is not A.

2. The Shift- (or Shift+) prefix can be applied *only* to letters or multi-letter tails. Leo will ignore (with a warning) the shift prefix applied to other single letters, e.g., Ctrl-Shift-(

3. The case of letters prefixed by Ctrl-, Alt-, Key- or Shift- is *not* significant.

The following table illustrates these rules.  In each row, the first entry is the key (for k.bindingsDict) and the other entries are equivalents that the user may specify in leoSettings.leo:

a, Key-a, Key-A
A, Shift-A
Alt-a, Alt-A
Alt-A, Alt-Shift-a, Alt-Shift-A
Ctrl-a, Ctrl-A
Ctrl-A, Ctrl-Shift-a, Ctrl-Shift-A
!, Key-!,Key-exclam,exclam
    
See "About shortcut specifiers" for a full discussion of what may appear in the tail of a shortcut.</t>
<t tx="yen.20210612081822.533">The following special single characters may be used in the tails of shortcuts.
They are listed along with their associated Tk binding value. Leo contains
special code to handle these characters. No other single characters may be
specified.

For example, you could specify Ctrl+! as a shortcut, and Leo will create a
binding for &lt;Control+exclam&gt;. Some of these values may be invalid on some
machines.

The full list is at http://tcl.activestate.com/man/tcl8.4/TkCmd/keysyms.htm

! exclam
" quotedbl
# numbersign
$ dollar
% percent
&amp; ampersand
' quoteright
( parenleft
) parenright
* asterisk
+ plus
, comma
- minus
. period
/ slash
: colon
; semicolon
&lt; less
= equal
&gt; greater
? question
@ at
[ bracketleft
\ backslash
] bracketright
^ asciicircum
_ underscore
` quoteleft
{ braceleft
| bar
} braceright
~ asciitilde

Leo recognizes the following mult-character names, and translates the indicated
strings in the menu items:
    
"bksp"     : "BkSp"
"dnarrow"  : "DnArrow"
"ltarrow"  : "LtArrow"
"rtarrow"  : "RtArrow"
"uparrow"  : "UpArrow"
"pageup"   : "PgUp"),
"pagedn"   : "PgDn")

For example, "Ctrl-uparrow"  will appear as "Ctrl+UpArrow" in the menu.

Leo passes all other mult-character names verbatim to Qt, so on some platforms
you may be able to use any of the following. Most appear on the numeric keypad.
For example, the following may work on some systems:
    
"Ctrl+BackSpace"

Don't use these if you want to be sure that the binding work on all platforms.
The complete list of names may be found at:
http://tcl.activestate.com/man/tcl8.4/TkCmd/keysyms.htm.
    
F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
BackSpace, Break, Clear, Delete, Escape, Linefeed, Return, Tab, 
Down, Left, Right, Up,
Begin, End, Home, Next, Prior,
Num_Lock, Pause, Scroll_Lock, Sys_Req,
KP_Add, KP_Decimal, KP_Divide, KP_Enter, KP_Equal,
KP_Multiply, KP_Separator, KP_Space, KP_Subtract, KP_Tab,
KP_F1, KP_F2, KP_F3, KP_F4,
KP_0, KP_1, KP_2, KP_3, KP_4, KP_5, KP_6, KP_7, KP_8, KP_9</t>
<t tx="yen.20210612081822.534">@nocolor

Standard keys (Windows defaults in parens)

F1 help
Windows key + F1 Windows Help
F2 find-prev (Rename)
F3 find-next (Find Files)
F4 None (Address bar in Windows Explorer)
F5 None (Refresh, Reload in Windows Explorer)
F6 None (Should cycle from window to window)
F7 spell-tab-open (Spell in Word)
Shift-F7 None (Thesaurus in Word)
F8 None (Safe mode)
F9 None
F10 None (Activate menu bar in many programs)
F11 None (Toggle full screen mode in explorer)
F12 None

You can use F10 to highlight the first menu choice, and then use the arrow keys to move around the menus. Pressing the Shift key while pressing F10 will bring up the shortcut menu. This is similar to right-clicking on an object.</t>
<t tx="yen.20210612081822.535">A mode is a temporary set of key bindings. Modes are created by nodes whose
headline has the form:

@mode &lt;mode name&gt;

The body text contains a list of shortcut specifiers. @mode nodes work just like
@shortcuts, but as a side effect they create the enter-&lt;mode name&gt;-mode
command.  For example, 

@mode quick-commands

creates the enter-quick-commands command. You can bind keys to such commands in
@shortcuts nodes as usual.

Notes:

- If the @mode headline contains ::, everything following the :: is the
  mode prompt. For example::
    
    @mode abc :: xyz
    
creates the enter-abc-mode command, but the prompt for the command is xyz.

- Pane specifiers are ignored in @mode nodes. Bindings apply only to a single
mode.

- @shortcuts nodes specify the bindings in effect for the 'default' or
'top-level' mode. The keyboard-quit command always set the mode to the top-level
mode.

- The top_level_unbound_key_action setting determines what happens to unbound
keys *only* for the top-level mode.

- A mode contains *only* the key bindings explicitly specified in the @mode
node. The only default key binding is the binding for the keyboard-quit command
(usually Control-g). Thus, all modes except the top-level mode act as if
top_level_unbound_key_action = 'ignore'. In particular, the set-command-state,
set-insert-state and set-overwrite-state commands affect only the top-level mode.

- The mode-help command (recommend binding is Tab) lists all bound keystrokes in
a mode.

- ** New in 4.4.1: In @mode nodes, shortcut specifier lines of the form::

    --&gt; command-name
    
Specify that the named command will be executed before entering the mode. More
than one such **mode-entry commands may appear.

- In @mode nodes, shortcut specifier lines of the form:

    command-name -&gt; mode-name = binding

specify that Leo will enter the named mode after executing the command. As a
special case,

    command-name -&gt; same = binding

will cause the command to be executed without changing mode.</t>
<t tx="yen.20210612081822.536">- To enable vim-like bindings, put the following in the @settings tree in
  myLeoSettings.leo:

    @strings [command,insert, overwrite] top_level_unbound_key_action = command

- I like the following setting even in "legacy" operation, and I especially
recommend it, or something like it, for when using vim-like bindings:

    @color insert_mode_bg_color = #fdf5f5

It's a soft pink that contrasts nicely with the soft yellow color gets shown in
the body pane when the body pane does *not* have focus.

- vim-like bindings are defined in leoSettings.leo in the node:

    @shortcuts Vim plain keys

Play with these as you will. For multi-key sequences, like 'dd', you would have
to define a 'd' mode that handles the follow-on characters after the first d. On
my list: munge mode names so they make pleasing prompts in the minibuffer. Maybe
today.

I'd like to offer a $100 prize for the best vim simulation. This would require
modes for all plain keys that have more than one continuation. I might be
tempted to add more vim-like features, especially support for vim '.', if I knew
that people were really using heavy-duty vim bindings.

If you define your own key bindings in myLeoSettings.leo, I highly recommend
basing them on the new bindings in the '@keys EKR bindings' tree. You will
probably find that your bindings are much easier to understand.
</t>
<t tx="yen.20210612081822.537">The following commands are useful for operating Leo without a mouse.

Clicks

click-icon-box
double-click-icon-box

Cursor moves and selection (Basic Emacs commands)

back-char
back-char-extend-selection
back-paragraph
back-paragraph-extend-selection
back-sentence
back-sentence-extend-selection
back-to-indentation
back-word
back-word-extend-selection
backward-delete-char
backward-kill-paragraph
backward-kill-sentence
backward-kill-word
beginning-of-buffer
beginning-of-buffer-extend-selection
beginning-of-line
beginning-of-line-extend-selection
delete-char
end-of-buffer
end-of-buffer-extend-selection
end-of-line
end-of-line-extend-selection
exchange-point-mark
forward-char
forward-char-extend-selection
forward-paragraph
forward-paragraph-extend-selection
forward-sentence
forward-sentence-extend-selection
forward-word
forward-word-extend-selection
insert-newline
kill-line
kill-to-end-of-line
kill-paragraph
kill-region
kill-region-save
kill-sentence
kill-word
move-past-close
move-past-close-extend-selection
newline-and-indent 
next-line
next-line-extend-selection
paste-text
previous-line
previous-line-extend-selection
rectangle-kill
scroll-down-half-page
scroll-down-line
scroll-down-page
scroll-up-line
scroll-up-page
yank
yank-pop  
zap-to-character

Focus

abort-edit-headline
# cycle-focus
edit-headline
end-edit-headline
focus-to-body
focus-to-find
focus-to-log
focus-to-minibuffer
focus-to-tree
spell-tab-open

Menus

activate-cmds-menu
activate-edit-menu
activate-file-menu
activate-help-menu
activate-outline-menu
activate-plugins-menu
activate-window-menu

Nodes: selecting, expanding and contracting

contract-all
contract-node
contract-or-go-left
contract-parent
equal-sized-panes
expand-all
expand-and-go-right
expand-next-level
expand-node
expand-or-go-right
expand-prev-level
go-back
go-forward
goto-char
goto-first-node
goto-first-sibling
goto-first-visible-node
goto-last-node
goto-last-sibling
goto-last-visible-node
goto-next-node
goto-next-sibling
goto-next-visible
goto-parent
goto-prev-node
goto-prev-sibling
goto-prev-visible

Panes

spell-tab-hide

Furthermore, the find commands are a good tool for using Leo without a mouse
(More commands are coming)

replace
replace-all
replace-then-find
find-next
find-all
find-prev
isearch-backward
isearch-backward-regexp
isearch-forward
isearch-forward-regexp
find-tab-open
replace-string
search-again
search-backward
search-forward
set-replace-string

Setting find options:

enter-find-options-mode
set-find-everywhere
set-find-node-only
set-find-suboutline-only
show-find-options
toggle-find-ignore-case-option
toggle-find-in-body-option
toggle-find-in-headline-option
toggle-find-mark-changes-option
toggle-find-mark-finds-option
toggle-find-regex-option
toggle-find-word-option
toggle-find-wrap-around-option
word-search-backward
word-search-forward</t>
<t tx="yen.20210612081822.538">These bindings are a mixture of emacs bindings, windows bindings and vim bindings.</t>
<t tx="yen.20210612081822.539"># Must keep all these bindings for basic vim compatibility.

beginning-of-line           = a
# unused                    = b
# unused                    = c
enter-d-mode                = d
end-of-line                 = e
find-character              = f
# find-word                 = Shift-f
# unused                    = g
# unused                    = h
set-insert-state            = i
# unused                    = j
kill-line                   = k
select-all                  = l
# unused                    = m
# unused                    = n
focus-to-tree               = o
# unused                    = p
enter-quick-command-mode    = q
# unused                    = r
# toggle-from-minibuffer    = t
# unused                    = u
toggle-extend-mode          = v
forward-word                = w
back-word                   = Shift-w
delete-char                 = x
yank                        = y
undo                        = z
redo                        = Shift-z
full-command                = :
# enter-newline-insert-mode   ! body = Return

# cursor movement keys...
    # back-char           = h
    # forward-char        = l
    # next-line           = j
    # previous-line       = k
    
    # A 	Append to the end of the current line.
    # C 	Change the rest of the current line.
    # H 	To the first line of the screen.
    # I 	Insert to the start of the current line. (first non-whitespace char)
    # L 	To the the last line of the screen.
    # M 	To the middle line of the screen.
    # N 	Scan for next search match but opposite direction.
    # O 	Open a new line above and insert.
    # P 	Put characters before the cursor. Put lines above the current line.
    # V 	Start highlighting lines.
    # U 	Undo all the latest changes that were made to the current line.
    # X 	Delete characters before the cursor.
    # ^ 	Move to the first non-whitespace character of a line.
    # $ 	Move to the end of a line.
    # Ctrl + r 	Redo.
    
    # a 	Append after cursor.
    # b 	Move to the beginning of a word.
    # d6  Delete 6 lines.
    # dd  Delete the current line.
    # e  	Move to the end of a word.
    # i  	Insert before cursor.
    # o 	Open a new line below and insert.
    # n 	Scan for next search match in the same direction.
    # p 	Put (paste) the text you yanked or deleted.
        # Put characters after the cursor. Put lines below the current line.
    # r 	Overwrite one character. After overwriting the single character, go back to command mode.
    # v  	Start highlighting characters. Use the normal movement keys and commands to select text for highlighting.
        # Then use any other command, like d, on the region.
    # u  	Undo the last action.
    # x  	Delete characters under the cursor.
    # /pattern Incremental search for pattern.
    
    # # Commands for visual mode
    # &gt; Shift right.
    # &lt; Shift left.
    # c Change the highlighted text.
    # yy or Y Yank the highlighted text and copy to clipboard.
    # d Delete the highlighted text and copy to clipboar.
    
    # # Perhaps less useful
    # # ~  	Change the case of characters.
    # #   - In visual mode, change the case of highlighted characters.
    # #   - In command mode, change the case of the character uder cursor.
    # # R 	Enter insert mode but replace characters rather than inserting.
    # # E 	To the end of a whitespace-delimited word.
    # # B 	To the beginning of a whitespace-delimited word.
    
    # # Commands...
    # . repeat last complete editing command.
    # % match paren
    # : enter file (command?) mode
    # :42&lt;return&gt; go to line 42
    # :d Delete the current line.
    
    # :s/foo/bar 	Substitute foo with bar on current line
    # :s/foo/bar c Confirm each substitution. y: make match, n: skip match, a: all remaining, q: quit.
    # :s/foo/bar/g Substitute all occurances on current line.
    # :s/foo/bar/i Ignore case
    # :s/foo/bar/gi (combination of arguments)
    # :s/foo/bar/I Do not ignore case
    # :42s/foo/bar Substitute on line 42
    # :%s/foo/bar Substitute on entire file.
    # :y Yank the current line.
</t>
<t tx="yen.20210612081822.54">def in_class():  # return "self, " if in a class definition
    """return "self" if in a class definition (from headline)"""
    for nd in c.p.self_and_parents_iter():
        if nd.h.startswith('class'):
            return "self, "
    return ""
</t>
<t tx="yen.20210612081822.540"># q in vim bindings.
# The mode prompt is everything following the ::
# Allows temporary rebindings without interfering with typical bindings.

--&gt; set-silent-mode
--&gt; mode-help

keyboard-quit           = Ctrl-g # not needed, but a good reminder
keyboard-quit           = Return
keyboard-quit           = Escape

rectangle-close         = c
convert-blanks          = b
convert-tabs            = t
execute-script          = e
rectangle-open          = o
repeat-complex-command  = a
reformat-paragraph      = r
remove-blank-lines      = Shift-B
sort-lines              = l
sort-siblings           = s

# enter-emacs-mode        = space
# enter-buttons-mode      = b
# enter-commands-mode     = c
# enter-edit-mode         = e
# enter-file-mode         = f
# enter-gui-mode          = g
# enter-help-mode         = h
# enter-kill-mode         = k
# enter-modes-mode        = m
# enter-outline-mode      = o
# enter-move-outline-mode = Shift-o
# enter-toggle-find-mode  = t
# enter-extract-mode      = x</t>
<t tx="yen.20210612081822.541"># Now that we know what commands are single-line editing commands,
# Only &lt;return&gt; and arrow keys need per-pane bindings.

# These all cause problems on Ubuntu...

# do-nothing    = Ctrl-PageUp  # 20130210 - TNB - defined for tab-flipping,
# do-nothing    = Ctrl-PageDn  # working in Xfce at least

end-edit-headline           ! tree = Return # Escape is also possible.
# end-edit-headline           ! tree = Escape # May interfere with dismissing dialogs.
insert-newline              ! body = Return
insert-newline              ! text = Insert
#
# Keypad variants...
end-edit-headline           ! tree = Keypad+Return
insert-newline              ! body = Keypad+Return

back-char                   ! text = LtArrow
forward-char                ! text = RtArrow
next-line                   ! text = DnArrow
previous-line               ! text = UpArrow
#
# Keypad variants...
back-char                   ! text = Keypad+LtArrow
forward-char                ! text = Keypad+RtArrow
next-line                   ! text = Keypad+DnArrow
previous-line               ! text = Keypad+UpArrow

back-char-extend-selection      ! text = Shift-LtArrow
forward-char-extend-selection   ! text = Shift-RtArrow
next-line-extend-selection      ! text = Shift-DnArrow
previous-line-extend-selection  ! text = Shift-UpArrow
#
# Keypad variants...
back-char-extend-selection      ! text = Keypad+Shift-LtArrow
forward-char-extend-selection   ! text = Keypad+Shift-RtArrow
next-line-extend-selection      ! text = Keypad+Shift-DnArrow
previous-line-extend-selection  ! text = Keypad+Shift-UpArrow

contract-or-go-left         ! tree = LtArrow
expand-and-go-right         ! tree = RtArrow
goto-next-visible           ! tree = DnArrow
goto-prev-visible           ! tree = UpArrow
move-outline-down           ! tree = Shift-DnArrow
move-outline-left           ! tree = Shift-LtArrow
move-outline-right          ! tree = Shift-RtArrow
move-outline-up             ! tree = Shift-UpArrow
#
# Keypad variants...
contract-or-go-left         ! tree = Keypad+LtArrow
expand-and-go-right         ! tree = Keypad+RtArrow
goto-next-visible           ! tree = Keypad+DnArrow
goto-prev-visible           ! tree = Keypad+UpArrow
move-outline-down           ! tree = Keypad+Shift-DnArrow
move-outline-left           ! tree = Keypad+Shift-LtArrow
move-outline-right          ! tree = Keypad+Shift-RtArrow
move-outline-up             ! tree = Keypad+Shift-UpArrow
#
# These cause problems with editing headlines.
# goto-first-visible-node     ! tree= Home
# goto-last-visible-node      ! tree= End
contract-or-go-left         = Alt-LtArrow
expand-and-go-right         = Alt-RtArrow
goto-next-visible           = Alt-DnArrow
goto-prev-visible           = Alt-UpArrow
move-outline-down           = Alt-Shift-DnArrow
move-outline-left           = Alt-Shift-LtArrow
move-outline-right          = Alt-Shift-RtArrow
move-outline-up             = Alt-Shift-UpArrow
#
# Keypad variants...
contract-or-go-left         = Keypad+Alt-LtArrow
expand-and-go-right         = Keypad+Alt-RtArrow
goto-next-visible           = Keypad+Alt-DnArrow
goto-prev-visible           = Keypad+Alt-UpArrow
move-outline-down           = Keypad+Alt-Shift-DnArrow
move-outline-left           = Keypad+Alt-Shift-LtArrow
move-outline-right          = Keypad+Alt-Shift-RtArrow
move-outline-up             = Keypad+Alt-Shift-UpArrow

do-nothing                  ! tree = Ctrl-DnArrow
do-nothing                  ! tree = Ctrl-UpArrow
move-lines-up               ! body = Ctrl-UpArrow
move-lines-down             ! body = Ctrl-DnArrow
#
# Keypad variants...
do-nothing                  ! tree = Keypad+Ctrl-DnArrow
do-nothing                  ! tree = Keypad+Ctrl-UpArrow
move-lines-up               ! body = Keypad+Ctrl-UpArrow
move-lines-down             ! body = Keypad+Ctrl-DnArrow
  
goto-first-visible-node     = Alt-Home
goto-last-sibling           = Alt-End
#
# Keypad variants...
goto-first-visible-node     = Keypad+Alt-Home
goto-last-sibling           = Keypad+Alt-End

back-page                       ! text = PageUp
back-page-extend-selection      ! text = Shift-PageUp
forward-page                    ! text = PageDn
forward-page-extend-selection   ! text = Shift-PageDn
#
# Keypad variants...
back-page                       ! text = Keypad+PageUp
back-page-extend-selection      ! text = Keypad+Shift-PageUp
forward-page                    ! text = Keypad-PageDn
forward-page-extend-selection   ! text = Keypad+Shift-PageDn

scroll-down-half-page   ! tree = Shift-PageDn
scroll-down-page        ! tree = PageDn
scroll-up-half-page     ! tree = Shift-PageUp
scroll-up-page          ! tree = PageUp
#
# Keypad variants...
scroll-down-half-page   ! tree = Keypad+Shift-PageDn
scroll-down-page        ! tree = Keypad+PageDn
scroll-up-half-page     ! tree = Keypad+Shift-PageUp
scroll-up-page          ! tree = Keypad+PageUp
</t>
<t tx="yen.20210612081822.542"># cycle-focus                       = None
# cycle-all-focus                   = Ctrl-Shift-tab

back-word                           = Ctrl-LtArrow
back-word-extend-selection          = Ctrl-Shift-LtArrow
beginning-of-buffer                 = Ctrl-Home
beginning-of-buffer-extend-selection= Ctrl-Shift-Home
end-of-buffer                       = Ctrl-End
end-of-buffer-extend-selection      = Ctrl-Shift-End
forward-word                        = Ctrl-RtArrow
forward-word-extend-selection       = Ctrl-Shift-RtArrow
#
# Keypad variants...
back-word                           = Keypad+Ctrl-LtArrow
back-word-extend-selection          = Keypad+Ctrl-Shift-LtArrow
beginning-of-buffer                 = Keypad+Ctrl-Home
beginning-of-buffer-extend-selection= Keypad+Ctrl-Shift-Home
end-of-buffer                       = Keypad+Ctrl-End
end-of-buffer-extend-selection      = Keypad+Ctrl-Shift-End
forward-word                        = Keypad+Ctrl-RtArrow
forward-word-extend-selection       = Keypad+Ctrl-Shift-RtArrow

# beginning-of-line                   = Home
back-to-home                        = Home
beginning-of-line-extend-selection  = Shift-Home
end-of-line                         = End
end-of-line-extend-selection        = Shift-End
#
# Keypad variants...
back-to-home                        = Keypad+Home
beginning-of-line-extend-selection  = Keypad+Shift-Home
end-of-line                         = Keypad+End
end-of-line-extend-selection        = Keypad+Shift-End
</t>
<t tx="yen.20210612081822.543"># Important: arrow keys also move the cursor: all arrow keys are handled elsewhere.

back-word                           = Alt-b  
back-word-extend-selection          = Alt-Shift-b
back-to-indentation                 = None # Ctrl-space
beginning-of-line                   = None # Ctrl-a
beginning-of-line-extend-selection  = Ctrl-Shift-a
end-of-line                         = Ctrl-e
exchange-point-mark                 = Alt-M     # Should be Ctrl-X Ctrl-X.
end-of-line-extend-selection        = Ctrl-Shift-e
extend-to-line                      = Alt-L
extend-to-word                      = Ctrl-W # Alt-W
forward-paragraph                   = Alt-}
forward-paragraph-extend-selection  = None # Alt-Ctrl-}
forward-sentence                    = None # Alt-e
forward-sentence-extend-selection   = None # Alt-Shift-e
forward-word                        = None # Alt-f
forward-word-extend-selection       = None # Alt-Shift-f
goto-global-line                    = Alt-g
# match-brackets                    = Ctrl-K    # kill-line
move-past-close                     = Alt-parenright # Same as Alt-shift-parenright
move-past-close-extend-selection    = None

# Brian Theado
# next-or-end-of-line                 ! text = Down
# next-or-end-of-line-extend-selection ! text = Shift-Down

# next-line                         = Ctrl-N
# next-line-extend-selection        = Ctrl-Shift-N
# previous-line                     = Ctrl-P
# previous-line-extend-selection    = Ctrl-Shift-P

# Brian Theado
# previous-or-beginning-of-line                   ! text = Up
# previous-or-beginning-of-line-extend-selection  ! text = Shift-Up
select-all                          = Ctrl-a</t>
<t tx="yen.20210612081822.544"># Open current node in external editor. 'v' is mnemonic for 'vi', because vi users request this most
# cm-external-editor = Alt-v</t>
<t tx="yen.20210612081822.545"># These are needed because Qt reports Ctrl-( as Ctrl-Shift-9, etc.

# add-comments        = Ctrl-Shift-9  # Ctrl-parenleft
# delete-comments     = Ctrl-Shift-0  # Ctrl-parenright
# demote              = Ctrl-Shift-]  # Ctrl-}
# move-past-close     = Alt-Shift-0   # Alt-parenright
# promote             = Ctrl-Shift-[  # Ctrl-{
</t>
<t tx="yen.20210612081822.546"># Unbound F-Keys cause problems on Ubuntu
help            = F1
# find-prev     = F2    # Set elsewhere
# find-next     = F3    # Set elsewhere
do-nothing      = F4
do-nothing      = F5
do-nothing      = F6
spell-tab-open  = F7
do-nothing      = F8
do-nothing      = F9
do-nothing      = F10
help-for-command= F11
help-for-python = F12

do-nothing              = Ctrl-F1
do-nothing              = Ctrl-F2
double-click-icon-box   = Ctrl-F3
# close-window          = Ctrl-F4 # Set in File Commands.
do-nothing              = Ctrl-F5
do-nothing              = Ctrl-F6
do-nothing              = Ctrl-F7
do-nothing              = Ctrl-F8
do-nothing              = Ctrl-F9
do-nothing              = Ctrl-F10
do-nothing              = Ctrl-F11
do-nothing              = Ctrl-F12

do-nothing = Shift-F1
do-nothing = Shift-F2
do-nothing = Shift-F3
do-nothing = Shift-F4
do-nothing = Shift-F5
do-nothing = Shift-F6
do-nothing = Shift-F7
do-nothing = Shift-F8
do-nothing = Shift-F9
do-nothing = Shift-F10
do-nothing = Shift-F11
do-nothing = Shift-F12</t>
<t tx="yen.20210612081822.547">close-window                = Ctrl-F4   # (was Alt-F4) Fixes bug 824087: Alt-F4 is not the same as Alt-F, c
exit-leo                    = Ctrl-q
new                         = Ctrl-n    # Ctrl-n conflicts with next-line.
open-outline                = Ctrl-o
save-file                   = Ctrl-s
write-at-file-nodes         = Shift-Ctrl-W
write-dirty-at-file-nodes   = Shift-Ctrl-Q
</t>
<t tx="yen.20210612081822.548"># Quick finds
backward-find-character                     = Alt-Q
backward-find-character-extend-selection    = Alt-Shift-Q
find-character                              = None ### = Alt-P
find-character-extend-selection             = None ### = Alt-Shift-P

# To start finds and changes...
start-search                        = Ctrl-f
set-replace-string                  = None # Ctrl-Shift-r
find-tab-hide                       = None
find-tab-open                       = None

clone-find-all                      = None
isearch-backward                    = Alt-R
isearch-backward-regexp             = None
isearch-forward                     = Alt-I # Alt-S conflicts with &amp;Search and &amp;Settings menus.
isearch-forward-regexp              = None
search-backward                     = None
search-forward                      = None
search-return-to-origin             = None
word-search-backward                = None 
word-search-forward                 = None

# To coninue finds and changes...
find-next                           = F3
find-all                            = None
find-prev                           = F2
replace                              = Ctrl-=
replace-all                         = None  # Not recommended to bind this to a shortcut.
replace-then-find                   = Ctrl--

set-find-everywhere                 = Alt-Ctrl-e
set-find-node-only                  = Alt-Ctrl-n
set-find-suboutline-only            = Alt-Ctrl-s
toggle-find-ignore-case-option      = Alt-Ctrl-i
toggle-find-in-body-option          = Alt-Ctrl-b
toggle-find-in-headline-option      = Alt-Ctrl-h
toggle-find-mark-changes-option     = Alt-Ctrl-c
toggle-find-mark-finds-option       = Alt-Ctrl-f
toggle-find-regex-option            = Alt-Ctrl-x
toggle-find-word-option             = Alt-Ctrl-w
toggle-find-wrap-around-option      = Alt-Ctrl-a

search-return-to-origin             = Alt+F3</t>
<t tx="yen.20210612081822.549"># contract-pane       = Alt-Ctrl--
# expand-pane         = Alt-Ctrl-=
focus-to-body       = Alt-d
focus-to-tree       = Alt-t
toggle-active-pane  = Ctrl-t
keyboard-quit       = Ctrl-g

tab-cycle-previous  = Ctrl-Prior
tab-cycle-next      = Ctrl-Next
tab-cycle-next      = Ctrl-Tab

# Possible alternatives.
# keyboard-quit     = Escape # Hard to type, interferes with dismissing dialogs.
# focus-to-tree     = Ctrl-T
edit-setting        = Ctrl+Key-0
</t>
<t tx="yen.20210612081822.55">def insert(s):
    '''Insert the string s in the current widget.'''
    try:
        w = c.abbrevCommands.w
        if w:
            i = w.getInsertPoint()
            w.insert(i,s)
    except AttributeError:
        pass
</t>
<t tx="yen.20210612081822.550"># For testing only.

start-ipython           = Alt-Ctrl-Shift-i
push-to-ipython         = Alt-Shift-i # Alt-i is now bind to isearch-forward.
</t>
<t tx="yen.20210612081822.551"># These commands do nothing except serve as placeholders for the show-bindings command.
menu-shortcut = Alt-C # Cmds menu.
menu-shortcut = Alt-E # Edit menu.
menu-shortcut = Alt-F # File menu.
menu-shortcut = Alt-H # Help menu.
menu-shortcut = Alt-O # Outline menu.
menu-shortcut = Alt-P # Plugins menu.
menu-shortcut = Alt-S # Search and Settings menus.
menu-shortcut = Alt-W # Window menu.
</t>
<t tx="yen.20210612081822.552">full-command            = Alt-x
# negative-argument     = None      # Alt-minus conflicts with contract-all.
repeat-complex-command  = Ctrl-P
# universal-argument    = Alt-u   # Usually Ctrl-u, conflicts with move-outline-up.



</t>
<t tx="yen.20210612081822.553">auto-complete-force         = Ctrl-space
auto-complete               = period
debug                       = None
dabbrev-completion          = Alt-Ctrl-slash
dabbrev-expands             = Alt-slash
edit-setting                = None
execute-script              = Ctrl-B
redo                        = Shift-Ctrl-Z
run-all-unit-tests-externally       = None
run-all-unit-tests-locally          = None
run-marked-unit-tests-externally    = None
run-marked-unit-tests-locally       = None
run-selected-unit-tests-externally  = None
run-selected-unit-tests-locally     = None
show-calltips               = parenleft
show-calltips-force         = None # This command needs work before it is useful. Alt-parenleft
sort-siblings               = Alt-A
toggle-autocompleter        = Alt-1
toggle-calltips             = Alt-2
toggle-extend-mode          = Alt-3
undo                        = Ctrl-Z</t>
<t tx="yen.20210612081822.554">clone-node                  = Ctrl-`
chapter-select              = None
contract-node               = None
copy-node                   = Shift-Ctrl-c
cut-node                    = Shift-Ctrl-x
contract-all                = Alt--
edit-headline               = Ctrl-h
delete-node                 !tree = Delete
delete-node                 !tree = Keypad+Delete
delete-node                 !tree = BackSpace
demote                      = Ctrl-}
demote                      = Ctrl-]
expand-next-level           = None
expand-node                 = Alt-]
extract                     = Shift-Ctrl-D
extract-names               = Shift-Ctrl-N
goto-next-clone             = Alt-N
insert-child                = Ctrl-Insert
insert-node                 = Ctrl-I
insert-node                 !tree = Insert
insert-node                 = Shift-Insert
mark                        = Ctrl-M
move-outline-down           = Ctrl-D
move-outline-left           = Ctrl-L
move-outline-right          = Ctrl-R
move-outline-up             = Ctrl-U
paste-node                  = Shift-Ctrl-V
promote                     = Ctrl-{
promote                     = Ctrl-[</t>
<t tx="yen.20210612081822.555">find-quick-selected = Ctrl-Shift-F
vr-toggle = Alt-0</t>
<t tx="yen.20210612081822.556">add-comments                        = Ctrl-parenleft
backward-delete-char                !text = BackSpace
backward-delete-char                = Shift-BackSpace
backward-delete-word                = Ctrl-BackSpace
backward-kill-word                  = Alt-BackSpace
copy-text                           = Ctrl-c        # Conflicts with Emacs ctrl-c
cut-text                            = Ctrl-x
delete-char                         = Shift-Delete
delete-char                         = Keypad+Shift+Delete
delete-char                         !text = Delete
delete-char                         !text = Keypad+Delete
delete-comments                     = Ctrl-parenright # Shift-Ctrl-0
delete-word                         = Ctrl-Delete
delete-word                         = Keypad+Ctrl+Delete
delete-spaces                       = None
indent-region                       !text = Tab
indent-region                       = ctrl-greater # Ctrl-shift-&gt;
kill-line                           = Ctrl-k
kill-to-end-of-line                 = None
newline-and-indent                  = Ctrl-j
### newline-and-indent              !text = Tab
focus-to-body                       !tree = Tab
paste-text                          = Ctrl-v
reformat-paragraph                  = Shift-Ctrl-p
split-line                          = None
unformat-paragraph                  = Shift-Ctrl-u
unindent-region                     = ctrl-less # Ctrl-Shift-&lt;
unindent-region                     = Shift-tab # Only when text is selected.
yank                                = Ctrl-Y
yank-pop                            = Alt-Y
zap-to-character                    = Alt-z</t>
<t tx="yen.20210612081822.557">This node contains unused key bindings. To make them active, copy them to
your copy of myLeoSettings.leo.
</t>
<t tx="yen.20210612081822.558">This node and its descendants contains settings that make Leo work somewhat
like vim.

To enable vim emulation, place a copy this "@keys Vim bindings" node and
its sub-nodes into your myLeoSettings.leo file under the "@settings" node.
</t>
<t tx="yen.20210612081822.559">@nocolor

This setting determines the initial binding for otherwise-unbound keystrokes
when no mode is in effect.  Note: the keyboard-quit command exits all modes.

The valid values are::

ignore:  Leo ignores the key (like Vim).
insert:  Leo inserts the key at the cursor (like Emacs)
overwrite: Leo replaces the character at the cursor.</t>
<t tx="yen.20210612081822.56">def long_word():
    """example of an abbreviation substitution which inspects
    the current content of the body text, see `;;;` example
    in @@data abbreviations-examples
    """
    words = c.p.b.split()
    tCurPosition = c.frame.body.widget.textCursor().position() 
    i = tCurPosition - len(_abr)
    b = c.p.b
    s = []
    while i and b[i].isalpha():
        s[0:0] = b[i]
        i -= 1
    s = ''.join(s)
    for i in words:
        if i.startswith(s) and i != s:
            return i[len(s):]
    return ''
</t>
<t tx="yen.20210612081822.560">To enable vim emulation, place a copy of this node (and its sub-nodes) into
your myLeoSettings.leo file under the "@settings" node.
</t>
<t tx="yen.20210612081822.561">Vi emulation - User documentation:
	Installation
	| Place a copy of the "@keys Vim bindings" node and its sub-nodes,
	| located in the leoSettings.leo file, under the "@settings" node
	| in the myLeoSettings.leo file
	|
	| The same procedure is performed to upgrade to a new version.
	| Note: Place any local customized key bindings in a "@keys My Vi" node
	|       below (not underneath) the "@keys Vim bindings" node in the
	|       myLeoSettings.leo file.

	Commands supported
	| Documentation of the supported vi commands is provided in Chapter 22 of
	| Leo's User Guide (http://webpages.charter.net/edreamleo/vimBindings.html).

	Commands not supported
	| Most unsupported Vi commands are either due to a Leo architecture problem
	| or the lack of an equivelent Leo function.
	| (See the Vim Developer Documentation for a detailed list of open issues)
	|
	| Most extensions to the Vi editor implemented in Vim are not supported
	| by Leo's Vi/Vim emulation at this time.

	Vi emulation in the Outline pane:
		Editing the headline text:
		| Only Vi commands that operate on a single line of text are supported.
		| Some workarounds were required due to the current Leo implementation.
		| Problems associated with editing a node's headline text are documented
		| in the "Open issues" section in the Vim Developer Documentation node.

		Traversing and reorganizing the outline:
		| Outline navigation and manipulation are mapped to keys based on Vi's
		| use of the H, J, K, and L key to move left, down, up, and right.  Refer
		| to Leo's User Guide for details on the operation's supported and their
		| key mappings.

		Outline traversing from the Body pane:
		| Outline navigation commands can also be invoked while in the body
		| panes' command mode.  This reduces the keystrokes necessary to switch
		| to Outline pane, select another node, and switch back to the body pane.
		| (Refer to Chapter 22 of the Leo User Guide for more details)
</t>
<t tx="yen.20210612081822.562">History
	Version 03-07-10
		Assigned line scroll by one line to 'j' and 'k' keys when the
		   focus is in the outline 
		Fixed unexpected switch from Body to Outline focus when inserting
			character into 1st column of 1st row.
		Removed duplicate key bindings
			'p' and 'P' commands in "@shortcuts - vi in Outline pane" node
	Version 10-06-09
		Restored buffer 'scroll' by page in body pane (works in Tk GUI)
			(Moves cursor, scrolling to keep cursor visible)
		Added buffer 'scroll' by half-page and line in body pane
			(Moves cursor, scrolling to keep cursor visible)
		Added paragraph reformating using 'gqq' and 'gqap' commands
			Also added 'gww' and 'gwap' (should not move cursor but does)
		Mapped period key to repeat-complex-command.
			Repeats Leo's command line. Should repeat key commands.
		Removed mapping of Ctrl-[ to "Promote" function.
			Using Ctrl-[ to exit a search string entry was promoting the node.
	Version 12-Jul-09
		Fixed commands using beginning-of-line and end-of-line.  Functions
			in leoEditCommands.py were updated in past months to stay on
			current line when called when cursor at beginning/end of line.
		Effected commands:
			beginning-of-line function (&lt;vi command&gt; - &lt;node changed&gt;)
				|   - @mode body-beginning-of-line-mode
				O   - @mode body-new-line-above
				dd  - @mode body-delete-line
				dG  - @mode body-delete-to-end-of-buffer
				yy  - @mode body-yank-line
				yG  - @mode body-yank-to-end-of-buffer
				cc  - @mode body-change-line
				cG  - @mode body-change-to-end-of-buffer
				-   - @mode body-goto-indent-previous-line
			end-of-line function (&lt;vi command&gt; - &lt;node changed&gt;)
				o   - @mode body-new-line-below
				A   - @mode body-append
				dgg - @mode body-delete-to-beginning-of-buffer
				ygg - @mode body-yank-to-beginning-of-buffer
				cgg - @mode body-change-to-beginning-of-buffer
				$   - @mode body-end-of-line
				J   - @mode body-join
	Version 07-Mar-09
		Added "Vim Settings" node containing the Leo settings needed/used to
			support Vim emulation.
		Removed binding of '=' key to "double-click-icon-box" function
		| It is not a Vi/Vim related function
		| Re-enable it by placing the following bindings in an "@keys" node
		|   double-click-icon-box  ! body = equal
		|   enter-tree-double-click-node-mode ! tree = equal        
		Corrected installation procedure in the Vim User Documentation node
		Clarified descriptions in the User and Developer documentation nodes.
	Version 21-Oct-08
		Split the "Vim documentation" node into "Vim User Documentation"
			and "Vim Developer Documentation" nodes.
		Updated User and Developer documentation.
		Fixed '|' to not go to previous line if key pressed while at column 1
		Fixed '-' to go to previous line (Goes to column 1 instead of indent)
	Version 06-Aug-08
		Removed mapping of 'Ctrl-v' in the outline to toggle select mode.
			'Ctrl-v' already assigned to paste a node into the outline.
	Version 05-Aug-08
		Updated Vim documentation in the Users Guide.
		Changed key mapped to insert-node from 'Ctrl-o' to 'o'.
		Added mapping of 'Ctrl-v' in addition to 'v' to toggle select mode.
		Fixed unindent, now shifts one tab width instead of all.
		Added unindent by sentence, paragraph, and buffer support.
		Removed 'Ctrl-n' and 'Alt-n' as alternatives for 'n'.
		Removed '' and `` to go to last edit, use Undo/Redo (Leo limitation)
	Version 23-Jul-08
		Updated Vim documentation in the Users Guide.
		Added '^' key to move to the first column when in the outline pane.
		Modified 'Ctrl-/' to set one of multiple search options (see User Guide).
		Fixed move backward to beginning of word in headline text ('b' key).
		Fixed yank to end of paragraph to not yank trailing blank line ("y}" key).
		Removed selecting of text when using W,B,E keys in outline.
		Removed binding of "goto-line" to Ctrl-G as "&lt;num&gt;G" replacement (broken).
	Version 22-Jul-08
		Updated Vim documentation in the Users Guide.
		Added support for vi's Mark and Go To Mark commands in body pane.
		Added support for deleting selected text in body pane ("d&lt;cr&gt;").
		Added support for changing selected text in body pane ("c&lt;cr&gt;").
		Modified yank-selected-text ("y&lt;cr&gt;"), now exits select mode (body pane).
		Modified searches in outline to limit search to node and its subnodes.
		Modified searches in node's body to limit search to node's body.
		Added command to set search scope to "everything" ('Ctrl-/')
		Added command to "paste from clipboard then find next" ('Ctrl-p')
		Added command to prompt user for search and replace strings ('Alt-/')
		Added command to "replace then search" using 'Alt-/' strings ('Alt-p')
		Fixed ':w' (tree pane) and ':wq' (tree and body panes) commands
	Version 22-Jun-08
		Updated Vim documentation in the Users Guide.
		Improved "dd" command (handles blank lines correctly)
		added "'." and "`." commands to go to location of last edit.
		Added y&lt;cr&gt; mapping to yank selected text (removed Alt-Y).
		Added paste text support for node headlines.
		Added Delete,Yank,Change to beginning and end of buffer.
		Added &lt;cr&gt; to :wq command.
		Added text selection workaround for yt&lt;char&gt; and ct&lt;char&gt;.
		Added j and k to move to next/previous node when outline in focus.
		Added Ctrl-w j and Crl-w k to switch active view in a split window.
		Added Alt-G support when outline in focus.
		Removed binding of Ctrl-s to save-file (Not Vi, done by default).
		Removed all arrow key bindings (see open issues section) 
	Version 27-May-08
		Newly found commands
			| Additional commands were found that are available for mapping to
			| keys.  The "@shortcuts - unbind all commands" node has been
			| updated.
		Added Vim's window support (basic) to the body pane (Leo's editors)
			| 'Ctrl-w s' or 'Ctrl-w n' will add another editing window.
			| 'Ctrl-w w' or 'Ctrl-w p' will cycle focus between editor windows.
			| 'Ctrl-w c' or 'Ctrl-w q' will close the editor window with focus.
		Fixed Arrow mappings
			| All arrows were mapped to a goto-node command in outline pane.
			| Left and right arrows in outline pane move cursor one character.
		Added Ctrl-Arrow support in Outline and Body pane.
			| Ctrl-Arrow keys are also mapped to the goto-node commands
		Added Ctrl-Shift-Arrow support in Outline pane
			| Ctrl-Shift-Arrow keys are also mapped to the move-node commands
		Added vi's 'e' key mapping to move to the end of the current word.
			| Made possible by the newly found forward-end-word command.
		Added 'Shift-e' key mapping to select to the end of the current word.
			| Not-vi but useful until text editing commands work in headlines.
			| Made possible by the newly found forward-end-word-extend-select
		Added vi's Shift-f key mapping to go backwards to a character.
			| Made possible by the newly found backward-to-character command.
		Mapped '=' to double-click-icon-box command (Not Vi/Vim)
			| Use open-with plug-in to invoke external Vim editor without
			| mouse. Made possible by the newly found double-click-icon-box
			| command.
		Added vi's Ctrl-y and Ctrl-e to scroll outline up and down by lines.
			| Made possible by newly found scroll-outline-up/down-line commands
			| Also mapped vi's Ctrl-d,-u,-f,-b to same (until implemented).
		Removed Ctrl-y,Ctrl-d,Ctrl-p in outline to copy,delete,paste nodes.
			| Keys are used in vi for other functions. Use Ctrl-c,Ctrl-x,Ctrl-v
		Remapped copy-text to Alt-y to avoid use of vi key mappings
			| copy-text yanks the currently selected text into the clipboard.
			| Vi doesn't have a concept of "selected text" but it is useful.
		Mapped vi's Ctrl-d,-u,-e,-y to Ctrl-f,-b in body (until implemented)
		Fixed missing @mode node mapped to Ctrl-Shift-l
	Version 26-May-08
		Body pane key mappings - added and corrected
		Outline pane key mappings - initial release
		non-vi support key mappings - merged into Body and Outline mappings
		Documentation - Added
	Version 22-May-08
		Body pane key mappings - Released
		non-vi support key mappings - Released
	Version 18-May-08
		Body pane key mappings - Updated
		non-vi support key mappings - Updated

Vim Modeline (used by Vim for file specific settings)
	| vim: noet filetype=otl foldcolumn=1
</t>
<t tx="yen.20210612081822.563">Vi emulation - Developer documentation:
	Realization:
		Leo Configuration:
		| The following configuration was used for all testing:
			@strings top_level_unbound_key_action = command
			@bool stayInTreeAfterSelect = True
			@bool outline_pane_has_initial_focus = True
		
		Leo's Panes:
		| A "pane" is a area of the screen containing a user interface dedicated
		| to supporting a common set of tasks.  Vi key mappings are associated
		| with the Outline pane, the Body pane, or to the entire Leo program.
		| (See the "Leo's @mode nodes" section bellow)
		
		Leo's Command/Insert States:
			Command state - Denoted by a blue background color (Outline,Body pane)
			| Keys are mapped to commands.
			Insert state - Denoted by a red background color (Outline,Body pane)
			| Keys pressed are inserted into the text.
			Grayed state - Denoted by a gray background color (Outline pane)
			| Keys pressed will cause the next node with a headline starting with
			| that key to be selected.  This "select node by first character"
			| feature is built into Leo. It is not part of the vi support.
			| 
			| This state is intentionally avoided in the vi based outline key
			| mappings. If in the "Grayed" state, enter Ctrl-i to switch to the
			| "Command" state.  The "Grayed" state can be entered from the
			| outline's "Command" state by pressing the Ctrl-] key.
		
		Leo's @mode nodes:
		| Most vi commands are implemented using Leo's @mode nodes to execute
		| macros or to implement Vi's multi-key commands.
		| 
		| Functions that act on the Outline pane are implemented in the
		| "@shortcuts - vi in Outline pane" node and its sub-nodes.
		| Modes associated with functions invoked when the Outline pane has
		| focus begin with "tree-".
		| Modes associated with functions invoked when the Body pane has
		| focus begin with "body-".
		|
		| Functions that act on the Body pane are implemented in the
		| "@shortcuts - vi in Body pane" node and its sub-nodes.
		|
		| Functions with both an Outline and a Body pane component are
		| implemented in the "@shortcuts - vi miscellaneous" node and
		| its sub-nodes.

			Multi-key Vi commands:
			| Vi has many commands that require multiple keys to invoke.
			| Each key except the last in the command are assigned to an
			| @mode node that, when executed, maps the subsequent allowed
			| keys in the command sequence.
			| The last key in the sequence is mapped directly to a Leo
			| command or to a "Macro" mode (see below). Any modes mapped
			| to a key by another mode are located in a child node of the
			| @mode node doing the mapping.
			| 
			| Example:
			| The "dtw" key sequence, which performs a "Delete To the 'W'
			| character" command (note the capital letters) has the following
			| key bindings:
			|   The 'd' key is mapped to the "vi-delete-object" @mode node.
			|   The "vi-delete-object" node binds the 't' key to the
			|       "vi-delete-to-char" @mode node.
			|   The "vi-delete-to-char" contains the Leo commands to emulate
			|       the vi "Delete to &lt;character&gt;" command.

			Macros
			| Many vi commands do not have an equivalent Leo command.
			| Instead, an @mode node is used to store a macro containing
			| a series of Leo commands that, when executed, emulates the
			| Vi functionality.

	Open issues
		Current character:
		| Vi normally uses two different "current character" designators
		| depending on the current state.

			Insert state:
			| In the Insert state, a vertical bar is placed between two
			| characters to indicate where the next key will be inserted.
			| Leo's cursor is of this type.

			Command state: 
			| In the Command state, vi expects that the cursor is highlighting
			| a current character and provides commands to enter the insert
			| state or paste text either before or after that current
			| character.  Leo's vi emulation currently does not support a
			| "current character" cursor. As a result, inserting and pasting
			| before or after is replaced by inserting or pasting "at" the
			| current cursor location.  For example, the 'i' and 'a' command
			| are both mapped to enter the insert state at the current cursor
			| location.

		Commands requesting user input:
		| Commands requesting user input must be the last command executed within
		| an @mode node.  This prevents the implementation of commands such as
		| "yank to &lt;character&gt;" that requires a "copy to clipboard" operation
		| after the "find-character" command.

		Editing node headlines using @mode nodes:
		| Commands modifying or selecting headline text do not work correctly
		| within a @mode node.  This eliminates accurate implementation of
		| vi's delete/change/substitute/yank object commands.  As a workaround,
		| the commands are currently written to only select the text.  The user
		| must perform the subsequent delete, change, substitute, and yank.

		Repeat last editing command:
		| The ability to repeat the last editing related command by pressing the
		| period key is not supported and there is no workaround in place.

		Repeat last cursor movement command:
		| The ability to repeat the last "To character" or "Find character"
		| command by selecting the ";" key is not supported and there is no
		| workaround in place.

		Range prefix to commands:
		| The ability to specify a numeric range prefix is not supported.  For
		| example, entering "3dd" will not delete the next three lines and "20G"
		| will not move the cursor to the 20th line in the file.

		Range prefix to objects:
		| The ability to specify a numeric range prefix to an object is not
		| supported.  For example, the "d2fx" command should Delete up to and
		| including the 2nd Found "x" character.

		Binding numeric keys:
		| Mapping a number to a command or an @mode node works but can not be
		| used as it prevents the number from being entered as text while in Vi's
		| insert state.

		Binding Arrow keys:
		| Binding arrow keys, with or without Shift, Ctrl, Alt, and their
		| combinations, to commands or @mode nodes have no effect. 

		Binding 'bksp' key:
		| Binding 'bksp' key to back-char to move back a character in command
		| mode prevents 'bksp' from deleting characters in text edit mode.

		Undo command:
		| Using the "undo" command (key 'u') to undo a change to a node's
		| headline text only works correctly after another node has been
		| selected.  It appears that changes made to a node's headline text are
		| not recorded in Leo's change history until the edited node has lost
		| focus.

		Functions missing or require changes:
			Toggle case:
			| Leo provides support for switching to upper or lower case but no
			| method exists to toggle between cases (used by Vi's "~" command).

			Replace current character:
			| Vi's "r" command allows user to replace the current character with
			| the next entered character.

			Move current line:
			| Vi has a collection of "z&lt;movement&gt;" commands that will move the
			| current line to the top, middle, and bottom of the screen.  They are
			| not supported in Leo.

			Move buffer up/down:
			| Vi maps keys to scroll the text up/down one line and by half the
			| number of visible lines.  Leo does not support this.

			Word related commands:
			| Vi supports two types of words in its commands: Words that consist
			| of only a subset of the character set and words that considers all
			| characters except the space and tab characters as part of a word.
			|
			| Leo's always considers a word to consist of a subset of characters
			| although some word related commands include different characters
			| than others.

			Forward and backward by sentences:
			| Leo's sentence related functions do not stop at empty lines nor do
			| they skip over periods within words nor do they stop at sentences
			| ending in non-periods nor do they stop at the end or beginning of
			| the buffer. Note: see forwardSentenceHelper and backSentenceHelper
			| functions.

			Focus to Body pane:
			| Leo functions exist which unconditionally set focus to the body pane
			| regardless of the active pane.
			|
			| For example, bracket matching commands ("%" key) do not work within
			| a node's headline text.  Instead, the command is performed on the
			| node's body text.

			Displaying mode help:
			| The "--&gt; mode-help" command has the following issues related to the
			| display of the "Help" tab:
				Key label always capitalized:
				| Vim commands are mapped to both lower-case and upper-case keys
				| but always appear mapped to upper-case keys within the "Help"
				| tab.
				Layout of tab's contents:
				| To improve readability and better support narrow tab cards,
				| display the mode's label without the "enter-" and "-mode" text
				| and place the key label before the mode label.
				|
				| For example, the following entries would change from:
				| 		enter-vi-delete-line-mode d
				| 		enter-vi-delete-to-begin-of-word-mode b
				| to:
				| 		d : vi-delete-line
				| 		b : vi-delete-to-begin-of-word

	Notes:
		Yank vs. Yank:
		| Vi's "yank" commands copy the selected text TO the clipboard.
		| Leo's "yank" commands insert text FROM the clipboard.

		copy-text in modes:
		| Leo's copy-text command does not work within a mode.  As a result,
		| all "copy to clipboard" capability is being implemented using the
		| kill-&lt;object&gt; command followed by Leo's "yank" command to put the
		| text back.

		paste-text in modes:
		| The paste-text command does not work within an @mode node.  Leo's
		| "yank" command is used instead.

		delete-node does not copy node to clipboard:
		| A copy-node command is issued to copy the node to the clipboard
		| followed by the delete-node command.

Vim Modeline (used by Vim for file specific settings)
	| vim: noet filetype=otl foldcolumn=1
</t>
<t tx="yen.20210612081822.564"></t>
<t tx="yen.20210612081822.565">@nocolor

This setting determines the initial binding for otherwise-unbound keystrokes
when no mode is in effect.  Note: the keyboard-quit command exits all modes.

The valid values are::

command:  Leo ignores the key (like Vim).
insert:  Leo inserts the key at the cursor (like Emacs)
overwrite: Leo replaces the character at the cursor.</t>
<t tx="yen.20210612081822.566">True:  Outline gets focus when a new window is opened.
False: Body pane gets focus when a new window is opened.</t>
<t tx="yen.20210612081822.567">True: (Recommended) Selecting an outline node leaves the focus in the outline pane.

If this is False it will be harder to use the arrow keys in the headline.
    
False: (Legacy) Selecting an outline node transfers focus to the body pane.</t>
<t tx="yen.20210612081822.568">#Miscellaneous vi commands
#---------------------------------

#Prevent Ctrl-[ (= Esc) from promoting node when invoked to exit entry of search string
promote                           ! kill = Ctrl-[

enter-focus-to-tree-mode          ! body = Tab      #Focus to Outline pane
enter-focus-to-body-mode          ! tree = Tab

enter-body-command-line-mode      ! body = colon    #Enter vi's command line
enter-tree-command-line-mode      ! tree = colon
full-command                      = Ctrl-colon      #Enter Leo's command mode

#undo/redo commands (vim commands using multiple Leo commands will need multiple undo commands)
undo                              = u               #Undo last command
enter-tree-undo-mode              ! tree = u
redo                              ! body = Ctrl-r   #Re-do undone command
enter-tree-redo-mode              ! tree = Ctrl-r
repeat-complex-command            = period          #Re-do last command

goto-global-line                  = Alt-g           #Goto line (in derived file)

enter-body-shift-z-mode           = Shift-z         #ZZ command - Save file and exit
</t>
<t tx="yen.20210612081822.569">#Undo last headline edit
#Bind: u
#Note: undo only seems to work from body pane
--&gt; focus-to-body
--&gt; undo
--&gt; edit-headline
--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.57">def param_doc(k=None):
    """make an epydoc / rst style parameter documentation block"""
    if not k:
        k = "Params, comma sep."
        indent = '    '
    else:  # assume in an __init__ def'n
        indent = '        '
    if k in _values and _values[k]:
        return "\n\n%s:Parameters:\n%s" % (indent, '\n'.join(
            ["%s- `%s`: &lt;|describe %s|&gt;" % (
                indent, i.split('=',1)[0].strip(), i.split('=',1)[0].strip()
             ) for i in _values[k].split(',')]))
    return ""
</t>
<t tx="yen.20210612081822.570">#Redo last headline edit
#Bind: Ctrl-r
#Note: redo only seems to work from body pane
--&gt; focus-to-body
--&gt; redo
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.571">#Focus to Outline pane
#Bind: &lt;Tab&gt;

--&gt; focus-to-tree
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.572">#Focus to Body pane
#Bind: &lt;Tab&gt;

--&gt; end-edit-headline
--&gt; focus-to-body
#   exit-named-mode: Prevents focus returning to outline
#                    when inserting character in 1st row/col.
--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.573">#Enter vi's command line
#Bind: :

--&gt; set-silent-mode
#--&gt; mode-help

enter-body-command-revert-mode = e
enter-body-command-save-mode = w
enter-body-command-quit-mode = q
</t>
<t tx="yen.20210612081822.574">#Reload current file
#Bind: :e&lt;cr&gt;
#Note: Vi command is :e!&lt;cr&gt;.
#      '!' not used since Leo prompts to save file changes.

revert = return</t>
<t tx="yen.20210612081822.575">#Save current file (and maybe quit)
#Bind: :w[q]&lt;cr&gt;

--&gt; set-silent-mode
#--&gt; mode-help

save-file                           = return
enter-body-command-save-quit-mode   = q</t>
<t tx="yen.20210612081822.576">#Save file and exit Leo
#Bind: :wq&lt;cr&gt;

enter-body-command-save-quit-return-mode = return
</t>
<t tx="yen.20210612081822.577">#Save file and exit Leo
#Bind: :wq&lt;cr&gt;

--&gt; save-file
--&gt; exit-leo
</t>
<t tx="yen.20210612081822.578">#Exit Leo
#Bind: :q&lt;cr&gt;

exit-leo = return</t>
<t tx="yen.20210612081822.579">#Enter vi's command line
#Bind: :

--&gt; set-silent-mode
#--&gt; mode-help

--&gt; focus-to-body
enter-tree-command-revert-mode   = e
enter-tree-command-save-mode     = w
enter-tree-command-quit-mode     = q
</t>
<t tx="yen.20210612081822.58">def user_name():
    """get user's full name if available"""
    global _user_name
    if not _user_name:
        _user_name = ask('LOGNAME','LOGNAME')
    return _user_name
</t>
<t tx="yen.20210612081822.580">#Reload current file
#Bind: :e&lt;cr&gt;
#Note: Vi command is :e!&lt;cr&gt;.
#      '!' not used since Leo prompts to save file changes.

revert = return</t>
<t tx="yen.20210612081822.581">#Save current file (and maybe quit)
#Bind: :w[q]&lt;cr&gt;

--&gt; set-silent-mode
#--&gt; mode-help

enter-tree-command-save-only-mode      = return
enter-tree-command-save-quit-mode   = q
</t>
<t tx="yen.20210612081822.582">#Not in use, see "@mode tree-comm#Save file
#Bind: :w&lt;cr&gt;

--&gt; save-file
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.583">#Save file and exit Leo
#Bind: :wq&lt;cr&gt;

enter-tree-command-save-quit-return-mode = return
</t>
<t tx="yen.20210612081822.584">#Save file and exit Leo
#Bind: :wq&lt;cr&gt;

--&gt; save-file
--&gt; exit-leo
</t>
<t tx="yen.20210612081822.585">#Exit Leo
#Bind: :q&lt;cr&gt;

exit-leo = return</t>
<t tx="yen.20210612081822.586">#Save buffers and exit Leo
#Bind: ZZ

enter-body-shift-z-save-quit-mode = Shift-Z</t>
<t tx="yen.20210612081822.587">#Save file and exit Leo
#Bind: ZZ

--&gt; save-file
--&gt; exit-leo
</t>
<t tx="yen.20210612081822.588"># vi key bindings - Outline pane #
 ################################

#State change commands
#--------------------------------
set-insert-state                 ! tree = i        #To insert from command state
set-insert-state                 ! tree = a        #To insert from command state

edit-headline                    ! tree = Ctrl-i   #To command from grayed state
#end-edit-headline                ! tree = Ctrl-]   #To grayed from command state

set-command-state                ! tree = Ctrl-[   #To command from insert state
set-command-state                ! tree = Esc      #To command from insert state
set-command-state                ! tree = return   #To command from insert state

#Yank text commands
#--------------------------------
end-of-line-extend-selection     ! tree = Shift-y  #Select to end of line
enter-tree-yank-object-mode      ! tree = y        #'yy' selects line, 'y&lt;return&gt;' yanks selected text
toggle-extend-mode               ! tree = v        #select characters on/off (Vim selects lines)
#toggle-extend-mode              ! tree = Ctrl-v   #Not used. Leo uses Ctrl-v to paste nodes.

#Change text commands
#--------------------------------
end-of-line-extend-selection     ! tree = Shift-c  #Select to end of line
enter-tree-change-object-mode    ! tree = c        #Only 'cc' supported, follow with 'i'

#Substitute text commands
#--------------------------------
forward-char-extend-selection    ! tree = s
#kill-line                        ! tree = Shift-s #kill-line seems to only work within @mode

#Delete text commands
#--------------------------------
end-of-line-extend-selection     ! tree = Shift-d  #Temporary workaround, follow with 'i'
enter-tree-delete-text-object-mode ! tree = d      #Only 'dd' supported

delete-char                      ! tree = x
delete-char                      ! tree = delete

#Scroll commands
#--------------------------------
scroll-outline-up-page           ! tree = Ctrl-b   #Scroll full window
scroll-outline-down-page         ! tree = Ctrl-f

scroll-outline-up-page           ! tree = Ctrl-u   #Should scroll 1/2 window
scroll-outline-down-page         ! tree = Ctrl-d

scroll-outline-up-line           ! tree = Ctrl-y   #Scroll 1 line
scroll-outline-down-line         ! tree = Ctrl-e

#Move within line commands
#--------------------------------
forward-char                     ! tree = RtArrow
forward-char                     ! tree = l
back-char                        ! tree = Left     #LtArrow
back-char                        ! tree = h

forward-word                     ! tree = w
forward-word                     ! tree = Shift-w  #no before/after support.
back-word                        ! tree = b
back-word                        ! tree = Shift-b  #no before/after support.
forward-end-word                 ! tree = e        #no before/after support.
forward-end-word                 ! tree = Shift-e

beginning-of-line                ! tree = bar      #beginning-of-line (Vi style)
beginning-of-line                ! tree = ^        #beginning-of-line (Vi style)
end-of-line                      ! tree = $        #end-of-line (Vi style)

match-brackets                   ! tree = %        #Go to matching bracket

#Move within tree commands
#--------------------------------
enter-tree-goto-mode                ! tree = g        #gg command (go to first)
enter-tree-goto-last-node-mode      ! tree = Shift-g

enter-tree-goto-next-visible-mode   ! tree = Ctrl-j
enter-tree-goto-next-visible-mode   ! tree = DnArrow
enter-tree-goto-next-visible-mode   ! tree = Ctrl-DnArrow

enter-tree-goto-prev-visible-mode   ! tree = Ctrl-k
enter-tree-goto-prev-visible-mode   ! tree = UpArrow
enter-tree-goto-prev-visible-mode   ! tree = Ctrl-UpArrow

enter-tree-contract-or-go-left-mode ! tree = Ctrl-h
enter-tree-contract-or-go-left-mode ! tree = Ctrl-LtArrow
enter-tree-expand-and-go-right-mode ! tree = Ctrl-l
enter-tree-expand-and-go-right-mode ! tree = Ctrl-RtArrow

#Move with body pane (focus remains in tree pane)
#------------------------------------------------
enter-tree-goto-next-line-mode      ! tree = j
enter-tree-goto-prev-line-mode      ! tree = k

#Find character commands
#-----------------------
find-character                      ! tree = f
backward-find-character             ! tree = Shift-f

#search text commands (limited to node and subnodes unless stated otherwise)
#  Note: Backward searches ('?') not supported. They do not go beyond current node's body pane.
#---------------------------
enter-tree-search-forward-mode      ! tree = /        #Search forward within node and subnodes
do-nothing                          ! tree = ?        #Does not work, scope only current body
do-nothing                          ! tree = Ctrl-?   #Does not work, scope only current body
find-next                           ! tree = n        #Find next (same scope, same direction)
find-prev                           ! tree = Shift-n  #Find next (same scope, other direction)
enter-body-search-options-mode      ! tree = Ctrl-/   #Change search options
#Note: changing options puts cursor in body and exits @mode macro. Use &lt;tab&gt; to go to headline.

#Replace [and find next (scope set by search command)] using paste buffer (clipboard)
#  Note: Scope and direction set by last search command '/', '?' or 'Ctrl-/'(scope only)
#  Note: Same replace commands implemented for both "tree" and "body" panes
#--------------------------------
paste-text                          ! tree = p        #Paste text before cursor.
paste-text                          ! tree = Shift-p  #Paste after not supported
do-nothing                          ! tree = Ctrl-p   #Does not work in headlines, use 'pn'

#Replace and find next (user prompted) (search direction taken from last use of '/' or '?')
enter-tree-replace-string-mode      ! tree = Alt-/    #Prompt for search &amp; replace string
replace-then-find                   ! tree = Alt-p    #Replace then search (use after Alt-/)

#Node create/delete/copy/paste commands
#--------------------------------------
insert-node                      ! tree = o

enter-tree-copy-node-mode        ! tree = Ctrl-c
enter-tree-delete-node-mode      ! tree = Ctrl-x
enter-tree-paste-node-mode       ! tree = Ctrl-v

#Move nodes
#--------------------------------
enter-tree-move-outline-down-mode   ! tree = Ctrl-Shift-j
enter-tree-move-outline-left-mode   ! tree = Ctrl-Shift-h
enter-tree-move-outline-right-mode  ! tree = Ctrl-Shift-l
enter-tree-move-outline-up-mode     ! tree = Ctrl-Shift-k

enter-tree-move-outline-down-mode   ! tree = Ctrl-Shift-DnArrow
enter-tree-move-outline-left-mode   ! tree = Ctrl-Shift-LtArrow
enter-tree-move-outline-right-mode  ! tree = Ctrl-Shift-RtArrow
enter-tree-move-outline-up-mode     ! tree = Ctrl-Shift-UpArrow

#Transclude nodes commands
#--------------------------------
enter-tree-clone-node-mode             ! tree = t        #Clone current node
enter-tree-goto-next-clone-node-mode   ! tree = Ctrl-t

#Mark nodes commands
#--------------------------------
enter-tree-mark-node-mode              ! tree = m
enter-tree-goto-next-marked-node-mode  ! tree = Ctrl-m
enter-tree-unmark-all-nodes-mode       ! tree = Alt-m
</t>
<t tx="yen.20210612081822.589">#Yank &lt;obj&gt; (vi's yank is the same as Leo's copy-text)
#Bind: y&lt;obj&gt;
#Note: Problem, all comamnds that select text switch to body pane.
      
--&gt; set-silent-mode

copy-text   = return
select-all  = y
</t>
<t tx="yen.20210612081822.59"># Comments lines (lines starting with '#') are ignored.
# Non-comment lines should have the form::
#
#    name=definition

# Definitions in @data abbreviation nodes override definitions in @data
# global-abbreviation nodes. 

# Typically you would define @data global-abbreviation nodes
# in myLeoSettings.leo and @data abbreviation nodes in local files.

# type html;; to insert template and ,, to select next &lt;|placeholder|&gt;
html;;=&lt;html&gt;
\:&lt;head&gt;
\:&lt;title&gt;&lt;|title|&gt;&lt;/title&gt;
\:&lt;style&gt;
\:&lt;/style&gt;
\:&lt;/head&gt;
\:&lt;body&gt;
\:&lt;|content|&gt;
\:&lt;/body&gt;
\:&lt;/html&gt;

# this abbreviation will only work with @bool scripting-abbreviations = True
# (or @bool scripting-at-script-nodes = True)
date;;={|{x=time.asctime()}|}
</t>
<t tx="yen.20210612081822.590">#Change &lt;object&gt;
#Bind: c&lt;obj&gt;
#Note: Problem, any select text commands switches focus to body pane.

--&gt; set-silent-mode

kill-line = c	   #follow with 'i' to enter text
</t>
<t tx="yen.20210612081822.591">--&gt; set-silent-mode
kill-line = d
</t>
<t tx="yen.20210612081822.592">--&gt; end-edit-headline
--&gt; copy-node
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.593">#Paste node
#Bind: Ctrl-v

--&gt; end-edit-headline
--&gt; paste-node
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.594">--&gt; end-edit-headline
--&gt; copy-node
--&gt; delete-node         #Does not copy to clipboard
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.595">#Go to first node
#Bind: gg 

--&gt; set-silent-mode
--&gt; goto-last-node
--&gt; edit-headline

--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.596">#Go to specified node location
#Bind: g&lt;location&gt;

--&gt; set-silent-mode
#--&gt; mode-help

enter-node-goto-first-node-mode     = g</t>
<t tx="yen.20210612081822.597">#Go to first node
#Bind: gg 

--&gt; set-silent-mode
--&gt; goto-first-node
--&gt; edit-headline

--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.598">--&gt; goto-next-visible
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.599">--&gt; goto-prev-visible
--&gt; edit-headline

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.6">These defaults settings ensure that legacy themes continue to work as before.

May be overridden by themes.</t>
<t tx="yen.20210612081822.60"># The headline must be: @outline-data tree-abbreviations

# A list tree abbreviation names.

# For each abbreviation name, there should be corresponding child node,
# the **abbreviation node** whose headline matches the abbreviation name.

# When a tree abbreviation fires, Leo pastes all the descendants of
# the abbreviation node as the last children of the presently selected node.

importer;;
per-commander-plugin;;
demo;;
</t>
<t tx="yen.20210612081822.600">#Search forward within suboutline
#Bind: /
--&gt; set-find-suboutline-only
--&gt; search-forward</t>
<t tx="yen.20210612081822.601">#Specify search and replace string
#  then Search in direction of last '/', '?' command within suboutline
#  (follow with 'p' to replace or 'Ctrl-p' to replace and search)
#Bind: Ctrl-/

--&gt; set-find-suboutline-only
--&gt; replace-string</t>
<t tx="yen.20210612081822.602">--&gt; contract-or-go-left
--&gt; edit-headline

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.603">--&gt; contract-node
--&gt; edit-headline

--&gt; exit-named-mode 
</t>
<t tx="yen.20210612081822.604">--&gt; expand-and-go-right
--&gt; edit-headline

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.605">--&gt; move-outline-up
--&gt; edit-headline
--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.606">--&gt; move-outline-down
--&gt; edit-headline
--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.607">--&gt; move-outline-left
--&gt; edit-headline
--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.608">--&gt; move-outline-right
--&gt; edit-headline
--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.609">#Clone current node
#Bind: t

--&gt; clone-node
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.61"></t>
<t tx="yen.20210612081822.610">#Go to next cloned node
#Bind: ctrl-t

--&gt; goto-next-clone
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.611">#Mark current node
#Bind: m

--&gt; mark
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.612">#Go to next marked node
#Bind: ctrl-m

--&gt; goto-next-marked
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.613">#Unmark all nodes
#Bind: Alt-m

--&gt; unmark-all
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.614"></t>
<t tx="yen.20210612081822.615">#Scroll body up one page when focus is in the outline pane
#Bind: j

#--&gt; focus-to-body
--&gt; next-line
--&gt; focus-to-tree
--&gt; edit-headline
--&gt; exit-named-mode   #Runs faster when used
</t>
<t tx="yen.20210612081822.616">#Scroll body up one line when focus is in the outline pane
#Bind: k

#--&gt; focus-to-body
--&gt; previous-line
--&gt; focus-to-tree
--&gt; edit-headline
--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.617"># vi key bindings - body pane #
 ##############################

#State change commands
#--------------------------------
set-insert-state                 ! body = i        #Insert at cursor
set-insert-state                 ! body = a        #Insert at cursor
enter-body-insert-at-indent-mode ! body = Shift-i  #Insert at first non-space
enter-body-append-mode           ! body = Shift-a  #Insert at end of line
set-overwrite-state              ! body = Shift-r  #Overwrite text
enter-body-new-line-below-mode   ! body = o        #Open new line below
enter-body-new-line-above-mode   ! body = Shift-o  #Open new line above
keyboard-quit                    ! body = Ctrl-[   #Exit insert state
keyboard-quit                    ! body = esc      #Exit insert state

#Change commands
#--------------------------------
enter-body-change-to-end-of-line-mode ! body = Shift-c
enter-body-change-object-mode         ! body = c        #Supports 'cd','cw','cb'

#Substitute commands
#--------------------------------
enter-body-substitute-char-mode    ! body = s        #Replace current character
enter-body-substitute-line-mode    ! body = Shift-s  #Replace current line

#Delete commands
#--------------------------------
enter-body-delete-object-mode    ! body = d        #Supports 'dd','dw','db'
enter-body-delete-to-end-of-line-mode ! body = Shift-d
delete-char                      ! body = x
delete-char                      ! body = delete

#Yank text commands
#--------------------------------
enter-body-yank-to-end-of-line-mode   ! body = Shift-y
enter-body-yank-object-mode      ! body = y        #Yank objects
toggle-extend-mode               ! body = Ctrl-v   #select characters-on/off
toggle-extend-mode               ! body = v        #select characters-on/off (Vim selects lines)

#Indent line commands
#--------------------------------
enter-body-indent-mode           ! body = greater  #&gt;&lt;obj&gt; commands
enter-body-unindent-mode         ! body = less     #&lt;&lt;obj&gt; command

#Join lines
#--------------------------------
enter-body-join-mode             ! body = Shift-j

#Move within line commands
#--------------------------------
back-char                        ! body = h
back-char                        ! body = LtArrow
#back-char                       ! body = bksp     #Prob: Effects bksp in edit
forward-char                     ! body = l
forward-char                     ! body = RtArrow

forward-word                     ! body = w        #no before/after support.
forward-word                     ! body = Shift-w
back-word                        ! body = b        #no before/after support.
back-word                        ! body = Shift-b  #
forward-end-word                 ! body = e        #no before/after support.
forward-end-word                 ! body = Shift-e

beginning-of-line											  ! body = |
back-to-indentation                ! body = ^
end-of-line									        ! body = $
enter-body-goto-indent-previous-line-mode   !body = minus

#Move within tree commands (while focus is in body pane)
#-------------------------------------------------------
enter-body-goto-prev-visible-mode   ! body = Ctrl-k
enter-body-goto-prev-visible-mode   ! body = Ctrl-UpArrow
enter-body-contract-or-go-left-mode ! body = Ctrl-h
enter-body-contract-or-go-left-mode ! body = Ctrl-LtArrow
enter-body-expand-and-go-right-mode ! body = Ctrl-l
enter-body-expand-and-go-right-mode ! body = Ctrl-RtArrow
enter-body-goto-next-visible-mode   ! body = Ctrl-j
enter-body-goto-next-visible-mode   ! body = Ctrl-DnArrow

#Move within buffer commands
#--------------------------------
next-line                         ! body = j
next-line                         ! body = DnArrow
previous-line                     ! body = k
previous-line                     ! body = UpArrow

forward-sentence                  ! body = )
back-sentence                     ! body = (
enter-body-goto-after-paragraph-mode  ! body = }
enter-body-goto-before-paragraph-mode ! body = {

enter-body-g-mode                   ! body = g        #g commands - Goto line, reformat text)
enter-body-goto-end-of-buffer-mode  ! body = Shift-g

enter-body-match-mode               ! body = %

#Scroll commands
#--------------------------------
scroll-up-page                           ! body = Ctrl-b   #Scrolls full window
scroll-down-page                         ! body = Ctrl-f

scroll-up-half-page                      ! body = Ctrl-u   #should scroll 1/2
scroll-down-half-page                    ! body = Ctrl-d

scroll-up-line                           ! body = Ctrl-y   #should scroll 1 line
scroll-down-line                         ! body = Ctrl-e

#Find character commands
#--------------------------------
find-character                      ! body = f
backward-find-character             ! body = Shift-f

#search text commands (limited to current node's body text unless stated otherwise)
#---------------------------
enter-body-search-forward-mode      ! body = /        #Search forward within node's body text
enter-body-search-backward-mode     ! body = ?        #Search backward within node's body text
find-next                           ! body = n        #Find next (same scope, same direction)
find-prev                           ! body = Shift-n  #Find next (same scope, other direction)
enter-body-search-options-mode      ! body = Ctrl-/   #Change search options

#Replace [and find next] using paste buffer (clipboard)
#  Note: Scope and direction set by last search command '/', '?' or 'Ctrl-/'(scope only)
#--------------------------------
paste-text                          ! body = p        #To paste a line before current: use '|p'
paste-text                          ! body = Shift-p  #Paste text before cursor.
enter-body-paste-then-find-mode     ! body = Ctrl-p   #Replace then find next from last /,?

#Replace and find next 'simple' string (search direction taken from last use of '/' or '?')
enter-body-replace-string-mode      ! body = Alt-/    #Prompt for search &amp; replace string
replace-then-find                   ! body = Alt-p    #Replace then search (use after Alt-/)

#Mark and go to mark commands
#----------------------------
# point-to-register    ! body = m
# jump-to-register     ! body = quoteright  # '
# jump-to-register     ! body = quoteleft   # `

#Window commands
#--------------------------------
enter-vim-window-commands-mode      ! body = Ctrl-w
</t>
<t tx="yen.20210612081822.618">#Search forward within node
#Bind: /

--&gt; set-find-node-only
--&gt; search-forward
</t>
<t tx="yen.20210612081822.619">#Search forward within node
#Bind: /

--&gt; set-find-node-only
--&gt; search-backward
</t>
<t tx="yen.20210612081822.62">'''
The @auto importer for the {|{x=get_language()}|} language.

Created {|{x=time.strftime("%Y/%m/%d")}|} by the `importer;;` abbreviation.
'''
import leo.plugins.importers.linescanner as linescanner
Importer = linescanner.Importer
@others
importer_dict = {
    'class': {|{x=cap_name}|}_Importer,
    'extensions': [&lt;|comma-separated lists of extensions|&gt;],
        # Example: ['.c', '.cc', '.c++', '.cpp', '.cxx', '.h', '.h++']
}
@language python
@tabwidth -4


</t>
<t tx="yen.20210612081822.620">#Search forward within node
#Bind: /

--&gt; set-find-node-only
--&gt; search-forward
</t>
<t tx="yen.20210612081822.621">#Set search scope to search all nodes in current direction
#Bind: Ctrl-/

--&gt; set-silent-mode
--&gt; mode-help

enter-body-search-all-nodes-mode          = return
enter-body-search-all-nodes-mode          = a

enter-body-search-toggle-headline-mode    = h
enter-body-search-toggle-headline-mode    = o
enter-body-search-toggle-body-mode        = b
enter-body-search-toggle-mark-mode        = m
enter-body-search-toggle-regex-mode       = r
</t>
<t tx="yen.20210612081822.622">#Set search scope to search all nodes in current direction
#Bind: Ctrl-/ &lt;cr&gt;

--&gt; set-find-everywhere

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.623">#Set search scope to search all nodes in current direction
#Bind: Ctrl-/ h
#      Ctrl-/ o

--&gt; toggle-find-in-headline-option

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.624">#Set search scope to search all nodes in current direction
#Bind: Ctrl-/ b

--&gt; toggle-find-in-body-option

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.625">#Set search scope to search all nodes in current direction
#Bind: Ctrl-/ m

enter-body-search-toggle-mark-finds-mode   = f
enter-body-search-toggle-mark-changes-mode = c
</t>
<t tx="yen.20210612081822.626">#Set search scope to search all nodes in current direction
#Bind: Ctrl-/ m f

--&gt; toggle-find-mark-finds-option

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.627">#Set search scope to search all nodes in current direction
#Bind: Ctrl-/ m c

--&gt; toggle-find-mark-changes-option

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.628">#Set search scope to search all nodes in current direction
#Bind: Ctrl-/ r

--&gt; toggle-find-regex-option

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.629">#Specify search and replace string
#  then search in direction of last '/', '?' command within node
#  (follow with 'p' to replace or 'Ctrl-p' to replace and search)
#Bind: Alt-/

--&gt; set-find-node-only
--&gt; replace-string
</t>
<t tx="yen.20210612081822.63">class {|{x=cap_name}|}_Importer(Importer):
    '''The importer for the {|{x=name}|} lanuage.'''

    def __init__(self, importCommands):
        '''{|{x=cap_name}|}_Importer.__init__'''
        super().__init__(
            importCommands,
            language = '{|{x=name}|}',
            state_class = {|{x=cap_name}|}_ScanState,
            strict = &lt;|True leading whitespace is significant. Otherwise False|&gt;,
        )
        
    @others
</t>
<t tx="yen.20210612081822.630">#Paste then search in current direction
#  (Preceeded by '/' or '?' to find first occurance)
#Bind: Alt-p

--&gt; yank
--&gt; find-next

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.631">#Go to end of buffer
#Bind: G

--&gt; set-silent-mode
--&gt; end-of-buffer
--&gt; beginning-of-line   #vi puts curser in first column of last row

--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.632">#Go to &lt;object&gt;
#Bind: g&lt;obj&gt;

--&gt; set-silent-mode
#--&gt; mode-help

enter-body-g-beginning-of-buffer-mode   ! body = g

#Reformat text - cursor moved to end of formated text
enter-body-g-q-mode                        ! body = q

#Reformat text - cursor remains at current location (not supported)
enter-body-g-w-mode                        ! body = w
</t>
<t tx="yen.20210612081822.633">#Go to top of buffer
#Bind: gg (Vim)
#Note: Vi key binding of '1G' not used. Bound numbers are not entered when editing.
#Note: Vim also supports 'gg' to go to top of buffer.
--&gt; set-silent-mode
--&gt; beginning-of-buffer

--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.634">#Format text &lt;object&gt; (Moving cursor to end of formatted text)
#Bind: gq&lt;obj&gt;

fill-paragraph ! body = q		       #gqq - Format the entire paragraph
#Note: reformat-paragraph also exists; Seems to do the same thing

enter-body-g-wq-a-mode ! body = a		#gqa&lt;obj&gt; - Format all of the specified scope</t>
<t tx="yen.20210612081822.635">#Format text &lt;object&gt; - Keeping cursor at same location (not supported yet)
#Bind: gw&lt;obj&gt;

fill-paragraph ! body = w	#gww - Format the entire paragraph
#Note: reformat-paragraph also exists; Seems to do the same thing

enter-body-g-wq-a-mode ! body = a		#gqa&lt;obj&gt; - Format all of the specified scope</t>
<t tx="yen.20210612081822.636">#Format paragraph
#Bind: gqap

fill-paragraph ! body = p		#Format the entire paragraph
#Note: reformat-paragraph also exists; Seems to do the same thing
</t>
<t tx="yen.20210612081822.637">#Open new line below current line
#Bind: o

--&gt; set-silent-mode
--&gt; end-of-line
--&gt; insert-newline   #Enter insert mode

--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.638">#Open new line above current line
#Bind: O

--&gt; set-silent-mode
--&gt; beginning-of-line
--&gt; insert-newline
--&gt; keyboard-quit
--&gt; previous-line
--&gt; set-insert-state

--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.639">#Append text to end of current line
#Bind: A

--&gt; set-silent-mode
--&gt; end-of-line      #Delete the &lt;cr&gt;&lt;lf&gt; at the end of the line
--&gt; set-insert-state

--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.64"># These can be overridden in subclasses.
</t>
<t tx="yen.20210612081822.640">#Insert text at first non-blank character in current line
#Bind: I

--&gt; set-silent-mode
--&gt; back-char        #Move cursor to cancel any selected text.
--&gt; forward-char     #  otherwise insert will replace selected text.
--&gt; back-to-indentation #cursor to beginning of first word in line
--&gt; set-insert-state

--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.641">#Delete to the end of the current line
#Bind: D
#Note: If cursor at end of line, command will delete next line

--&gt; set-silent-mode
--&gt; end-of-line-extend-selection
--&gt; kill-region

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.642">#Delete &lt;obj&gt; command
#Bind: d&lt;obj&gt;

--&gt; set-silent-mode
#--&gt; mode-help

enter-body-delete-line-mode      = d
enter-body-delete-selected-mode  = return       #Delete selected text(exit select mode)


enter-body-delete-to-end-of-word-mode           = w
enter-body-delete-to-end-of-word-mode           = Shift-w
enter-body-delete-to-begin-of-word-mode         = b
enter-body-delete-to-begin-of-word-mode         = Shift-b
enter-body-delete-to-end-of-sentence-mode       = )
enter-body-delete-to-beginning-of-sentence-mode = (
enter-body-delete-to-end-of-paragraph-mode      = }
enter-body-delete-to-beginning-of-paragraph-mode  = {
enter-body-delete-section-mode                  = %
enter-body-delete-to-g-object-mode              = g
enter-body-delete-to-end-of-buffer-mode         = shift-g

enter-body-delete-to-char-mode     = t</t>
<t tx="yen.20210612081822.643">#Deleted current line
#Bind: dd
#Note: Last line in file will not be deleted.

--&gt; set-silent-mode

--&gt; beginning-of-line               #   on beginning of current line

--&gt; next-line-extend-selection      #Select line and the &lt;cr&gt;
--&gt; kill-region                     #Remove text, place in paste buffer

--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.644">#Deleted to end of word
#Bind: dw
#Note: Travels past end of line.
#Note: Forward-word-extend-selection not used, it consumes all
#      trailing non-alpha-numeric characters.

--&gt; set-silent-mode
--&gt; split-line       #Split word (kill-word only deletes whole words)
--&gt; kill-word        #Delete to end of word, copies text into paste-buffer
--&gt; back-char        #Restore split line
--&gt; delete-char      #

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.645">#Delete to beginning of word.i
#Bind: db
#Note: Travels past beginning of line.

--&gt; set-silent-mode
--&gt; split-line
--&gt; back-word        #Problem: doesn't stop at beginning of line
--&gt; kill-word
--&gt; delete-char      #Restore split line

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.646">#Delete to end of sentence
#Bind: d)

--&gt; set-silent-mode
--&gt; forward-sentence-extend-selection
--&gt; kill-region

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.647">#Delete to beginning of sentence
#Bind: d(

--&gt; set-silent-mode
--&gt; back-sentence-extend-selection
--&gt; kill-region

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.648">#Delete to end of paragraph
#Bind: d}

--&gt; set-silent-mode
--&gt; forward-paragraph-extend-selection
--&gt; back-char-extend-selection
--&gt; back-char-extend-selection
--&gt; kill-region

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.649">#Delete to beginning of paragraph
#Bind: d{

--&gt; set-silent-mode
--&gt; back-paragraph-extend-selection
--&gt; forward-char-extend-selection
--&gt; kill-region

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.65">### Define an override if desired...

if 0: # The base class
    def clean_headline(self, s):
        '''Return a cleaned up headline s.'''
        return s.strip()
        
# A more complex example, for the C language.

# def clean_headline(self, s):
    # '''Return a cleaned up headline s.'''
    # import re
    # type1 = r'(static|extern)*'
    # type2 = r'(void|int|float|double|char)*'
    # class_pattern = r'\s*(%s)\s*class\s+(\w+)' % (type1)
    # pattern = r'\s*(%s)\s*(%s)\s*(\w+)' % (type1, type2)
    # m = re.match(class_pattern, s)
    # if m:
        # prefix1 = '%s ' % (m.group(1)) if m.group(1) else ''
        # return '%sclass %s' % (prefix1, m.group(2))
    # m = re.match(pattern, s)
    # if m:
        # prefix1 = '%s ' % (m.group(1)) if m.group(1) else ''
        # prefix2 = '%s ' % (m.group(2)) if m.group(2) else ''
        # h = m.group(3) or '&lt;no c function name&gt;'
        # return '%s%s%s' % (prefix1, prefix2, h)
    # else:
        # return s
</t>
<t tx="yen.20210612081822.650">#Delete to 'g' type object (ex: gg is 1st line in buffer)
#Bind: dg

enter-body-delete-to-beginning-of-buffer-mode     = g
</t>
<t tx="yen.20210612081822.651">#Delete to beginning of buffer (including all of current line)
#Bind: dgg

--&gt; set-silent-mode

--&gt; end-of-line
--&gt; forward-char
#--&gt; beginning-of-line

--&gt; beginning-of-buffer-extend-selection
--&gt; kill-region

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.652">#Delete to end of buffer
#Bind: dG

--&gt; set-silent-mode

--&gt; beginning-of-line
--&gt; back-char

--&gt; end-of-buffer-extend-selection
--&gt; kill-region
--&gt; beginning-of-line

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.653">#Delete from current bracket type to its apposing bracket
#Bind: d%

--&gt; set-silent-mode

--&gt; set-extend-mode
--&gt; match-brackets
--&gt; clear-extend-mode

--&gt; kill-region

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.654">#Delete to character
#Bind: dt&lt;character&gt;
#Note: Character search not limited to current line.

--&gt; set-silent-mode
--&gt; zap-to-character

</t>
<t tx="yen.20210612081822.655">#Delete selected text
#Bind: d&lt;cr&gt;


#Copy to clipboard (copy-text doesn't work in modes)
--&gt; kill-region

#Turn off select mode
--&gt; clear-extend-mode

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.656">#Yank text to the end of the current line
#Bind: Y

--&gt; set-silent-mode
--&gt; end-of-line-extend-selection
--&gt; kill-region
--&gt; yank
--&gt; back-char
--&gt; forward-char

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.657">#Yank &lt;obj&gt; (Leo's copy-text)
#Bind: y&lt;obj&gt;
#Note: yank-to-character not supported.  Can not issue yank command.
      #Leo's zap-to-character must be last command (needs user input)
      #Issue 'dt&lt;char&gt;' followed by 'p'
      
--&gt; set-silent-mode
#--&gt; mode-help

enter-body-yank-selected-mode                     = return #Yank selected text(exit select mode)
enter-body-yank-line-mode                         = y
enter-body-yank-to-beginning-of-next-word-mode    = w
enter-body-yank-to-beginning-of-current-word-mode = b
enter-body-yank-to-end-of-sentence-mode           = )
enter-body-yank-to-beginning-of-sentence-mode     = (
enter-body-yank-to-end-of-paragraph-mode          = }
enter-body-yank-to-beginning-of-paragraph-mode    = {
enter-body-yank-to-g-object-mode                  = g
enter-body-yank-to-end-of-buffer-mode             = Shift-g
enter-body-yank-section-mode                      = %

#Yank to user specified character
#Workaround used until @mode's execute commands after
#command requesting user input.
#follow command with "y&lt;cr&gt;" to yank &amp; "v" to unselect
find-character-extend-selection                 = t
backward-find-character-extend-selection        = Shift-t
</t>
<t tx="yen.20210612081822.658">#Yank current line
#Bind: yy
#Note: Problem yanking empty line. Also yanks line below it.
#Note: Problem yanking last line.  Does not yank a trailing &lt;cr&gt;

--&gt; set-silent-mode

#body-delete-line macro
--&gt; set-silent-mode
--&gt; beginning-of-line
--&gt; end-of-line-extend-selection    #Select all text on current line and
--&gt; forward-char-extend-selection   #  select the &lt;cr&gt;
--&gt; kill-region                     #Remove text, place in paste buffer

#Put text back
--&gt; yank
#Clear selection
--&gt; back-char
--&gt; beginning-of-line
#--&gt; forward-char

--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.659">#Yank to beginning of next word
#Bind: dw
#Note: Travels past end of line.
#Note: Forward-word-extend-selection not used, it consumes all
#      trailing non-alpha-numeric characters.

--&gt; set-silent-mode
--&gt; split-line
--&gt; kill-word        #Delete to beginning of next word, copies text into paste-buffer
--&gt; back-char        #Restore split line
--&gt; delete-char      #

#Put text back
--&gt; yank
#Clear selection
--&gt; back-char
--&gt; forward-char


--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.66">def clean_nodes(self, parent):
    '''
    Clean all nodes in parent's tree.
    Subclasses override this as desired.
    See perl_i.clean_nodes for an examplle.
    '''
    pass
</t>
<t tx="yen.20210612081822.660">#Yank to beginning of current word.
#Bind: yb
#Note: Travels past beginning of line.
#Note: AlphaNumeric word in contact with a non-alphanumeric word
      #is not handled correctly. Can cause text to be deleted or replicated.

--&gt; set-silent-mode
--&gt; split-line
--&gt; back-word        #Problem: doesn't stop at beginning of line
--&gt; kill-word
--&gt; delete-char      #Restore split line

#Put text back
--&gt; yank
#Clear selection
--&gt; back-char
--&gt; forward-char


--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.661">#Yank to end of sentence
#Bind: y)

--&gt; set-silent-mode
--&gt; forward-sentence-extend-selection
--&gt; kill-region
#Put text back
--&gt; yank
#Clear selection
--&gt; back-char
--&gt; forward-char

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.662">#Yank to beginning of sentence
#Bind: y(

--&gt; set-silent-mode
--&gt; back-sentence-extend-selection
--&gt; kill-region
#Put text back
--&gt; yank
#Clear selection
--&gt; back-char
--&gt; forward-char

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.663">#Yank to end of paragraph
#Bind: y}
#Note: Yanking paragraph at end of body will not yank 1 or
#      two characters (Characters after final cursor position)

--&gt; set-silent-mode
--&gt; forward-paragraph-extend-selection
--&gt; back-char-extend-selection
--&gt; back-char-extend-selection
--&gt; kill-region
#Put text back
--&gt; yank
#Clear selection
--&gt; back-char
--&gt; forward-char

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.664">#Yank to beginning of paragraph
#Bind: y{

--&gt; set-silent-mode
--&gt; back-paragraph-extend-selection
--&gt; forward-char-extend-selection
--&gt; kill-region
#Put text back
--&gt; yank
#Clear selection
--&gt; back-char
--&gt; forward-char

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.665">#Yank to 'g' type object (ex: gg is 1st line in buffer)
#Bind: yg

enter-body-yank-to-beginning-of-buffer-mode     = g
</t>
<t tx="yen.20210612081822.666">#Yank to beginning of buffer
#Bind: ygg

--&gt; set-silent-mode

--&gt; end-of-line
--&gt; forward-char
#--&gt; beginning-of-line

--&gt; beginning-of-buffer-extend-selection
--&gt; kill-region
--&gt; yank

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.667">#Yank to end of buffer
#Bind: yG

--&gt; set-silent-mode

--&gt; beginning-of-line
--&gt; back-char

--&gt; end-of-buffer-extend-selection
--&gt; kill-region
--&gt; yank                #Put text back
--&gt; beginning-of-line

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.668">#Yank from current bracket type to its opposing bracket
#Bind: y%

--&gt; set-silent-mode

--&gt; set-extend-mode
--&gt; match-brackets
--&gt; clear-extend-mode

#Copy to clipboard (copy-text doesn't work in modes)
--&gt; kill-region
--&gt; yank

#Remove highlighting of selection
--&gt; back-char
--&gt; forward-char

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.669">#Yank selected text
#Bind: y&lt;cr&gt;


#Copy to clipboard (copy-text doesn't work in modes)
--&gt; kill-region
--&gt; yank

#Turn off select mode
--&gt; clear-extend-mode

#Remove highlighting of selection
--&gt; back-char
--&gt; forward-char

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.67">class {|{x=cap_name}|}_ScanState:
    '''A class representing the state of the {|{x=name}|} line-oriented scan.'''
    
    def __init__(self, d=None):
        '''{|{x=cap_name}|}_ScanState.__init__'''
        if d:
            prev = d.get('prev')
            self.context = prev.context
            ### Adjust these by hand.
            self.curlies = prev.curlies
        else:
            self.context = ''
            ### Adjust these by hand.
            self.curlies = 0

    def __repr__(self):
        '''{|{x=cap_name}|}_ScanState.__repr__'''
        ### Adjust these by hand.
        return "{|{x=cap_name}|}_ScanState context: %r curlies: %s" % (
            self.context, self.curlies)

    __str__ = __repr__

    @others

</t>
<t tx="yen.20210612081822.670">#Change to end of line
#Bind: C
#Note: If cursor at end of line, command will delete next line and enter insert mode
#      Use 'i' command instead (enter insert mode)

--&gt; set-silent-mode
--&gt; end-of-line-extend-selection
--&gt; kill-region

--&gt; set-insert-state           #Enter insert mode</t>
<t tx="yen.20210612081822.671">#Change &lt;object&gt;
#Bind: c&lt;obj&gt;
#Note: change-to-character not supported.  Can not issue set-insert-state.
      #Leo's zap-to-character must be last command (needs user input)
      #Emulate command by issuing 'dt&lt;char&gt;' followed by 'i'

--&gt; set-silent-mode
#--&gt; mode-help

enter-body-change-selected-mode                     = return #Change selected text(exit select mode)
enter-body-change-line-mode                         = c
enter-body-change-to-end-of-word-mode               = w
enter-body-change-to-beginning-of-word-mode         = b
enter-body-change-to-end-of-sentence-mode           = )
enter-body-change-to-beginning-of-sentence-mode     = (
enter-body-change-to-end-of-paragraph-mode          = }
enter-body-change-to-beginning-of-paragraph-mode    = {
enter-body-change-to-g-object-mode                  = g
enter-body-change-to-end-of-buffer-mode             = Shift-g
enter-body-change-section-mode                      = %

#Change to specified character
#Workaround used until @mode's execute commands after
#command requesting user input.
#follow command with "i" to change the text.
find-character-extend-selection                 = t
backward-find-character-extend-selection        = Shift-t
</t>
<t tx="yen.20210612081822.672">#Change to end of line
#Bind: cc
#Note: Performs body-delete-line followed by a an insert-newline

#Note: Problem deleting empty line. Also deletes line below it.
      #Use Join function instead (key 'J')
#Note: Problem deleting last line.  Also deletes line above it.
      #Invoke undo one time to restore line ('u' key)

--&gt; set-silent-mode
--&gt; beginning-of-line
--&gt; end-of-line-extend-selection    #Select all text on current line and
--&gt; forward-char-extend-selection   #  select the &lt;cr&gt;
--&gt; kill-region                     #Remove text, place in paste buffer

--&gt; set-insert-state</t>
<t tx="yen.20210612081822.673">#Change to end of word
#Bind: cw
#Note: Travels past end of line.
#Note: forward-word-extend-selection not used,
#      it skips non-alphanumeric characters.

--&gt; set-silent-mode
--&gt; split-line
--&gt; kill-word        #Delete to end of word, copies text into paste-buffer
--&gt; back-char        #Restore split line
--&gt; delete-char      #

--&gt; set-insert-state</t>
<t tx="yen.20210612081822.674">#Change to beginning of word
#Bind: cb

--&gt; set-silent-mode
--&gt; split-line
--&gt; back-word        #Problem: doesn't stop at beginning of line
--&gt; kill-word
--&gt; delete-char      #Restore split line

--&gt; set-insert-state</t>
<t tx="yen.20210612081822.675">#Delete to end of sentence
#Bind: d)

--&gt; set-silent-mode
--&gt; forward-sentence-extend-selection
--&gt; kill-region
--&gt; set-insert-state

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.676">#Delete to beginning of sentence
#Bind: d(

--&gt; set-silent-mode
--&gt; back-sentence-extend-selection
--&gt; kill-region
--&gt; set-insert-state

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.677">#Delete to end of paragraph
#Bind: d}

--&gt; set-silent-mode
--&gt; forward-paragraph-extend-selection
--&gt; back-char-extend-selection
--&gt; back-char-extend-selection
--&gt; kill-region
--&gt; set-insert-state

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.678">#Delete to beginning of paragraph
#Bind: d{

--&gt; set-silent-mode
--&gt; back-paragraph-extend-selection
--&gt; forward-char-extend-selection
--&gt; kill-region
--&gt; set-insert-state

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.679">#Change to 'g' type object (ex: gg is 1st line in buffer)
#Bind: cg

enter-body-change-to-beginning-of-buffer-mode     = g
</t>
<t tx="yen.20210612081822.68">def level(self):
    '''{|{x=cap_name}|}_ScanState.level.'''
    return &lt;|self.curlies|&gt;
        ### Examples:
        # self.indent # for python, coffeescript.
        # self.curlies
        # (self, curlies, self.parens)
</t>
<t tx="yen.20210612081822.680">#Change to beginning of buffer
#Bind: cgg

--&gt; set-silent-mode

--&gt; end-of-line
--&gt; forward-char
#--&gt; beginning-of-line

--&gt; beginning-of-buffer-extend-selection
--&gt; kill-region
--&gt; set-insert-state

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.681">#Delete to end of buffer
#Bind: cG

--&gt; set-silent-mode

--&gt; beginning-of-line
--&gt; back-char

--&gt; end-of-buffer-extend-selection
--&gt; kill-region

--&gt; insert-newline   #Enter insert mode

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.682">#Change from current bracket type its matching bracket type
#Bind: c%

--&gt; set-silent-mode

--&gt; set-extend-mode
--&gt; match-brackets
--&gt; clear-extend-mode

--&gt; kill-region
--&gt; yank             #Show what text will be replaced

--&gt; set-insert-state

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.683">#Yank selected text
#Bind: c&lt;cr&gt;


#Delete selected text (keeping copy in paste buffer)
--&gt; kill-region

#Turn off select mode
--&gt; clear-extend-mode

--&gt; set-insert-state

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.684">#Substitute character
#Bind: s

--&gt; set-silent-mode
--&gt; delete-char
--&gt; set-insert-state           #Enter insert mode</t>
<t tx="yen.20210612081822.685">#Substitute line
#Bind: S

--&gt; set-silent-mode
--&gt; kill-line
--&gt; set-insert-state           #Enter insert mode</t>
<t tx="yen.20210612081822.686">#Indent &lt;object&gt;
#Bind: &gt;&lt;obj&gt;

--&gt; set-silent-mode

enter-body-indent-line-mode = greater
enter-body-indent-to-end-of-sentence-mode = )
enter-body-indent-to-beginning-of-sentence-mode = (
enter-body-indent-to-end-of-paragraph-mode = }
enter-body-indent-to-beginning-of-paragraph-mode = {
enter-body-indent-to-beginning-of-buffer-mode = g
enter-body-indent-to-end-of-buffer-mode = Shift-g
</t>
<t tx="yen.20210612081822.687">#Indent line
#Bind: &gt;&gt;

--&gt; set-silent-mode
--&gt; back-to-indentation #cursor to beginning of first word in line
--&gt; forward-char-extend-selection

--&gt; indent-region
--&gt; back-char
--&gt; forward-char
--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.688">#Indent to beginning of sentence
#Bind: &gt;(

--&gt; forward-sentence-extend-selection
--&gt; indent-region
--&gt; back-char
--&gt; forward-char
--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.689">#Indent to beginning of sentence
#Bind: &gt;)

--&gt; back-sentence-extend-selection
--&gt; indent-region
--&gt; back-char
--&gt; forward-char
--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.69">def update(self, data):
    '''
    {|{x=cap_name}|}_ScanState.update

    Update the state using the 6-tuple returned by v2_scan_line.
    Return i = data[1]
    '''
    context, i, delta_c, delta_p, delta_s, bs_nl = data
    # All ScanState classes must have a context ivar.
    self.context = context
    self.curlies += delta_c  
    ### Update {|{x=cap_name}|}_ScanState ivars
    # self.bs_nl = bs_nl
    # self.parens += delta_p
    # self.squares += delta_s
    return i
</t>
<t tx="yen.20210612081822.690">#Indent to end of paragraph
#Bind: &gt;}

--&gt; forward-paragraph-extend-selection
--&gt; back-char-extend-selection
--&gt; indent-region
--&gt; back-char
--&gt; forward-char
--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.691">#Indent to beginning of paragraph
#Bind: &gt;{

--&gt; back-paragraph-extend-selection
--&gt; forward-char-extend-selection
--&gt; indent-region
--&gt; back-char
--&gt; forward-char
--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.692">#Indent to end of buffer
#Bind: &gt;G

--&gt; set-silent-mode
--&gt; beginning-of-buffer-extend-selection
--&gt; indent-region
--&gt; back-char
--&gt; forward-char
--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.693">#Indent to end of buffer
#Bind: &gt;G

--&gt; set-silent-mode
--&gt; end-of-buffer-extend-selection
--&gt; indent-region
--&gt; back-char
--&gt; forward-char
--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.694">#Unindent object
#Bind: &lt;&lt;obj&gt;

--&gt; set-silent-mode

enter-body-unindent-less-mode = less

enter-body-unindent-to-end-of-sentence-mode = )
enter-body-unindent-to-beginning-of-sentence-mode = (
enter-body-unindent-to-end-of-paragraph-mode = }
enter-body-unindent-to-beginning-of-paragraph-mode = {
enter-body-unindent-to-beginning-of-buffer-mode = g
enter-body-unindent-to-end-of-buffer-mode = Shift-g
</t>
<t tx="yen.20210612081822.695">#Unindent current line
#Bind: &lt;&lt;
#Note: Unindents to first column instead of previous tab stop

#--&gt; set-silent-mode
#--&gt; back-to-indentation #cursor to beginning of first word in line

--&gt; unindent-region
#--&gt; delete-indentation
--&gt; back-char
--&gt; forward-char
--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.696">#Indent to end of paragraph
#Bind: &lt;}

--&gt; forward-paragraph-extend-selection
--&gt; back-char-extend-selection
--&gt; unindent-region
--&gt; back-char
--&gt; forward-char
--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.697">#Indent to beginning of paragraph
#Bind: &lt;{

--&gt; back-paragraph-extend-selection
--&gt; forward-char-extend-selection
--&gt; unindent-region
--&gt; back-char
--&gt; forward-char
--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.698">#Indent to end of sentence
#Bind: &lt;)

--&gt; forward-sentence-extend-selection
--&gt; unindent-region
--&gt; back-char
--&gt; forward-char
--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.699">#Indent to beginning of sentence
#Bind: &lt;(

--&gt; back-sentence-extend-selection
--&gt; unindent-region
--&gt; back-char
--&gt; forward-char
--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.7"></t>
<t tx="yen.20210612081822.70"></t>
<t tx="yen.20210612081822.700">#Unindent to end of buffer
#Bind: &lt;G

--&gt; set-silent-mode
--&gt; end-of-buffer-extend-selection
--&gt; unindent-region
--&gt; back-char
--&gt; forward-char
--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.701">#Unindent to end of buffer
#Bind: &lt;G

--&gt; set-silent-mode
--&gt; beginning-of-buffer-extend-selection
--&gt; unindent-region
--&gt; back-char
--&gt; forward-char
--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.702">#Goto first visible charecter on previous line
#Bind: -
#Note: No indent performed, using back-char, forward-word will
#      not skip over blank lines, goes to 2nd word on first line.

--&gt; set-silent-mode
--&gt; beginning-of-line		#Now at beginning of current line.

--&gt; previous-line
# --&gt; back-char
# --&gt; forward-word			#Skips over visible non-alpha-numeric characters


--&gt; exit-named-mode

</t>
<t tx="yen.20210612081822.703">#Go to end of paragraph
#Bind: }

--&gt; set-silent-mode

--&gt; forward-char        #Be sure cursor in a paragraph
--&gt; forward-paragraph
--&gt; back-char

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.704">#Go to beginning of paragraph
#Bind: {

--&gt; set-silent-mode

--&gt; back-char        #Be sure cursor in a paragraph
--&gt; back-paragraph
--&gt; forward-char

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.705">#Join next line to end of current line
#Bind: J

--&gt; set-silent-mode
--&gt; end-of-line      #Delete the &lt;cr&gt;&lt;lf&gt; at the end of the line
--&gt; delete-char

--&gt; exit-named-mode

</t>
<t tx="yen.20210612081822.706">#Goto matching bracket: () [] {}
#Bind: %

--&gt; set-silent-mode
--&gt; match-brackets
--&gt; forward-char
--&gt; back-char

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.707"></t>
<t tx="yen.20210612081822.708">--&gt; focus-to-tree
--&gt; goto-next-visible
--&gt; edit-headline
--&gt; focus-to-body
--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.709">--&gt; focus-to-tree
--&gt; goto-prev-visible
--&gt; edit-headline
--&gt; focus-to-body
--&gt; exit-named-mode
</t>
<t tx="yen.20210612081822.71">&lt;&lt; docstring &gt;&gt;
### From leoSettings.leo
# Created 2017/05/30
@language python
@tabwidth -4
__version__ = '0.0'
&lt;&lt; version history &gt;&gt;
&lt;&lt; imports &gt;&gt;
@others</t>
<t tx="yen.20210612081822.710">--&gt; focus-to-tree
--&gt; expand-and-go-right
--&gt; edit-headline
--&gt; focus-to-body

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.711">--&gt; focus-to-tree
--&gt; contract-or-go-left
--&gt; edit-headline
--&gt; focus-to-body

--&gt; exit-named-mode</t>
<t tx="yen.20210612081822.712">#Window commands
#Bind: Ctrl-w

add-editor           = s   #Open another view to current node
add-editor           = n   #Open another view to current node

cycle-editor-focus   = w   #Vim goes to next below-right window (wraps)
cycle-editor-focus   = p   #Vim goes to previous window with focus
cycle-editor-focus   = k   #Vim goes to window above current window
cycle-editor-focus   = j   #Vim goes to window below current window

delete-editor        = c   #Close current window (if more than one)
delete-editor        = q   #Close current window (if more than one)
</t>
<t tx="yen.20210612081822.713">https://groups.google.com/d/msg/leo-editor/uUZQaO9HYQQ/b9gocdokAgAJ

The OSX shortcuts posted by karstenw at the link below solved all of my keycode problems on a Mac:

https://github.com/karstenw/leo-shortcuts-osx/blob/master/myLeoSettings.leo</t>
<t tx="yen.20210612081822.714"># You can define keyboard shortcuts here of the form:
#
#    some-command Shift-F5

# Now that we know what commands are single-line editing commands,
# Only &lt;return&gt; and arrow keys need per-pane bindings.

# These all cause problems on Ubuntu...

# do-nothing    = Ctrl-PageUp  # 20130210 - TNB - defined for tab-flipping,
# do-nothing    = Ctrl-PageDn  # working in Xfce at least

end-edit-headline           ! tree = Return # Escape is also possible.
# end-edit-headline           ! tree = Escape # May interfere with dismissing dialogs.
insert-newline              ! body = Return
insert-newline              ! text = Insert

back-char                   ! text = LtArrow
forward-char                ! text = RtArrow
next-line                   ! text = DnArrow
previous-line               ! text = UpArrow

back-char-extend-selection      ! text = Shift-LtArrow
forward-char-extend-selection   ! text = Shift-RtArrow
next-line-extend-selection      ! text = Shift-DnArrow
previous-line-extend-selection  ! text = Shift-UpArrow

contract-or-go-left         ! tree = LtArrow
expand-and-go-right         ! tree = RtArrow
goto-next-visible           ! tree = DnArrow
goto-prev-visible           ! tree = UpArrow
move-outline-down           ! tree = Meta-DnArrow
move-outline-left           ! tree = Meta-LtArrow
move-outline-right          ! tree = Meta-RtArrow
move-outline-up             ! tree = Meta-UpArrow

# These cause problems with editing headlines.
# goto-first-visible-node     ! tree= Home
# goto-last-visible-node      ! tree= End

contract-or-go-left         = None
expand-and-go-right         = None
goto-next-visible           = None
goto-prev-visible           = None
move-outline-down           = None
move-outline-left           = None
move-outline-right          = None
move-outline-up             = None

# do-nothing                  ! tree = Meta-DnArrow
# do-nothing                  ! tree = Meta-UpArrow
move-lines-up               ! body = Meta-UpArrow
move-lines-down             ! body = Meta-DnArrow 
  
goto-first-visible-node     = Alt-Home
# goto-last-visible-node    = Alt-End
goto-last-sibling           = Alt-End

back-page                       ! text = PageUp
back-page-extend-selection      ! text = Shift-PageUp
forward-page                    ! text = PageDn
forward-page-extend-selection   ! text = Shift-PageDn

scroll-down-half-page   ! tree = Shift-PageDn
scroll-down-page        ! tree = PageDn
scroll-up-half-page     ! tree = Shift-PageUp
scroll-up-page          ! tree = PageUp         

# cycle-focus                       = None
# cycle-all-focus                   = Ctrl-Shift-tab

back-word                            ! text = Alt-LtArrow
back-word-extend-selection           ! text = Alt-Shift-LtArrow
beginning-of-buffer                  ! text = Ctrl-UpArrow
beginning-of-buffer-extend-selection        = Ctrl-Shift-UpArrow
end-of-buffer                               = Ctrl-DnArrow
end-of-buffer-extend-selection              = Ctrl-Shift-DnArrow

beginning-of-line                   = Ctrl-LtArrow
back-to-home                        = Home
beginning-of-line-extend-selection  = Ctrl-Shift-LtArrow
end-of-line                         = Ctrl-RtArrow
end-of-line-extend-selection        = Ctrl-Shift-RtArrow

###

forward-paragraph                   = Meta-Ctrl-DnArrow
forward-paragraph-extend-selection  = Meta-Ctrl-Shift-DnArrow
forward-sentence                    = Meta-Ctrl-LtArrow
forward-sentence-extend-selection   = Meta-Ctrl-Shift-LtArrow
forward-word                        = Alt-RtArrow
forward-word-extend-selection       = Alt-Shift-RtArrow
goto-global-line                    = Ctrl-j
match-brackets                      = Ctrl-b
move-past-close                     = None
move-past-close-extend-selection    = None
select-all                          = Ctrl-a

###

close-window                = Ctrl-w
#exit-leo                    = Ctrl-q
#new                         = Ctrl-n
#open-outline                = Ctrl-o
#save-file                   = Ctrl-s
write-at-file-nodes         = None
write-dirty-at-file-nodes   = None

###

# Quick finds
backward-find-character                     = None
backward-find-character-extend-selection    = None
find-character                              = None
find-character-extend-selection             = None

# To start finds and changes...
# start-search                        = Ctrl-f
set-replace-string                  = Ctrl-Alt-e
#find-tab-hide                       = None
#find-tab-open                       = None

#clone-find-all                      = None
isearch-backward                    = None
isearch-backward-regexp             = None
isearch-forward                     = None
#isearch-forward-regexp              = None
# query-replace                       = None
# query-replace-regex                 = None
search-backward                     = None
search-forward                      = None
#word-search-backward                = None 
#word-search-forward                 = None

# To coninue finds and changes...
find-next                           = Ctrl-g
find-all                            = None
find-prev                           = Ctrl-Shift-g
replace                              = Ctrl-=
replace-all                         = None  # Not recommended to bind this to a shortcut.
replace-then-find                   = Ctrl-Alt-j

set-find-everywhere                 = None
set-find-node-only                  = None
set-find-suboutline-only            = None
toggle-find-ignore-case-option      = None
toggle-find-in-body-option          = None
toggle-find-in-headline-option      = None
toggle-find-mark-changes-option     = None
toggle-find-mark-finds-option       = None
toggle-find-regex-option            = None
toggle-find-word-option             = None
toggle-find-wrap-around-option      = None

###

# contract-pane       = None
# expand-pane         = None
focus-to-body       = Meta-d
focus-to-tree       = Meta-t
toggle-active-pane  = Ctrl-t
keyboard-quit       = Meta-g

tab-cycle-previous  = Ctrl-Prior
tab-cycle-next      = Ctrl-Next
# tab-cycle-next      = Ctrl-Tab

# keyboard-quit     = Escape # Hard to type, interferes with dismissing dialogs.
# Possible alternatives.
# focus-to-tree     = Ctrl-T

###

start-ipython           = None
push-to-ipython         = None

###

# menu-shortcut = Alt-C # Cmds menu.
# menu-shortcut = Alt-E # Edit menu.
# menu-shortcut = Alt-F # File menu.
# menu-shortcut = Alt-H # Help menu.
# menu-shortcut = Alt-O # Outline menu.
# menu-shortcut = Alt-P # Plugins menu.
# menu-shortcut = Alt-S # Search and Settings menus.
# menu-shortcut = Alt-W # Window menu.

###
do-nothing              = Meta-o
full-command            = Meta-Shift-x
# negative-argument     = None      # Alt-minus conflicts with contract-all.
repeat-complex-command  = None # Ctrl-P
# universal-argument    = Meta-u     # Usually Ctrl-u, conflicts with move-outline-up.

###

auto-complete-force         = Meta-space
auto-complete               = period
debug                       = None
execute-script              = Meta-B
redo                        = Shift-Ctrl-Z

dabbrev-completion  = Meta-Ctrl-slash
dabbrev-expands     = Meta-slash

run-all-unit-tests-externally       = None
run-all-unit-tests-locally          = None
run-marked-unit-tests-externally    = None
run-marked-unit-tests-locally       = None
run-selected-unit-tests-externally  = None
run-selected-unit-tests-locally     = None

show-calltips               = parenleft
show-calltips-force         = None # This command needs work before it is useful. Alt-parenleft
sort-siblings               = Meta-Shift-A
toggle-autocompleter        = Meta-1
toggle-calltips             = Meta-2
toggle-extend-mode          = Meta-3
undo                        = Ctrl-Z

###

clone-node                  = Meta-'
chapter-select              = None
contract-node               = None
copy-node                   = Shift-Ctrl-c
cut-node                    = Shift-Ctrl-x
contract-all                = Alt-Meta--
edit-headline               = Meta-h
delete-node                 !tree = Delete
delete-node                 !tree = BackSpace
#demote                      = Ctrl-}
#demote                      = Ctrl-]
demote                      = None
# demote                      = Tab
expand-next-level           = None
expand-node                 = Meta-]
extract                     = Shift-Ctrl-D
extract-names               = Shift-Ctrl-N
# extract-python-method       = None
# extract-section             = Shift-Ctrl-S
goto-next-clone             = Alt-N
insert-child                = Meta-Insert
insert-node                 = Meta-I
insert-node                 !tree = Insert
insert-node                 = Shift-Insert
mark                        = Meta-M
move-outline-down           = Ctrl-D
move-outline-left           = Ctrl-L
move-outline-right          = Ctrl-R
move-outline-up             = Ctrl-U
paste-node                  = Shift-Ctrl-V
# promote                     = Ctrl-{
# promote                     = Ctrl-[
promote                     = None
# promote                     = Shift-Tab

###

add-comments                        = Ctrl-#
backward-delete-char                !text = BackSpace
backward-delete-char                = Shift-BackSpace
backward-delete-word                = Ctrl-BackSpace
backward-kill-word                  = Alt-BackSpace
copy-text                           = Ctrl-c        # Conflicts with Emacs ctrl-c
cut-text                            = Ctrl-x
delete-char                         = Shift-Delete
delete-char                         !text = Delete
delete-comments                     = None # Ctrl-Shift-#
# delete-comments                   = Shift-Ctrl-0 # Set elsewhere.
delete-word                         = Ctrl-Delete
delete-spaces                       = None
kill-line                           = Meta-k
kill-to-end-of-line                 = None

newline-and-indent                  = None # Ctrl-j # same as tab.
# newline-and-indent                  = Tab
indent-region                       = None
#indent-region                       = Tab
indent-rigidly                      = Tab

paste-text                          = Ctrl-v
reformat-paragraph                  = Shift-Meta-p
split-line                          = None
unformat-paragraph                  = Shift-Meta-u
unindent-region                     = Shift-tab
yank                                = Meta-Y
yank-pop                            = None # Alt-Y
zap-to-character                    = None # Alt-z

## KW added
hoist                               = Ctrl-Shift-h
de-hoist                            = Ctrl-Alt-Shift-h
</t>
<t tx="yen.20210612081822.715"></t>
<t tx="yen.20210612081822.716">abbrev-list                         = None
abort-edit-headline                 = Shift-Esc
about-leo                           = None
add-comments                        = Ctrl-(
abbrev-kill-all                     = None
auto-complete                       = None
back-char                           = Ctrl-b
back-char-extend-selection          = None
back-paragraph                      = Alt-braceleft
back-paragraph-extend-selection     = None
back-sentence                       = Alt-a
back-sentence-extend-selection      = None
back-to-indentation                 = Alt-m
back-word                           = Alt-b          
back-word                           = Ctrl-Left
back-word-extend-selection          = None
backward-delete-char                = Delete
backward-delete-char                = Shift-Delete
backward-kill-paragraph             = None
backward-kill-sentence              = None
backward-kill-word                  = Alt-Delete
beginning-of-buffer                 ! text =  Alt-less
beginning-of-buffer                 ! text = Ctrl-Home
beginning-of-buffer-extend-selection= None
beginning-of-line                   = Alt-Up        
beginning-of-line                   = Ctrl-a
beginning-of-line-extend-selection  = None
capitalize-word                     = Alt-c
cascade-windows                     = None
center-line                         = Alt-s
center-region                       = None
check-outline                       = None
clear-extend-mode                   = None
clear-kill-ring                     = None
clear-recent-files                  = None
clone-node                          = Ctrl-`
close-window                        = Ctrl-F4   # (was Alt-F4) Fixes bug 824087: Alt+F4 is not the same as Alt+F, c
contract-all                        = None      # Alt-- conflicts with negative-arg.
contract-node                       = Alt-[
contract-or-go-left                 = Alt-LtArrow
contract-parent                     = None
convert-all-blanks                  = None
convert-all-tabs                    = None
convert-blanks                      = Shift-Ctrl-B
convert-tabs                        = Shift-Ctrl-J
copy-node                           = Shift-Ctrl-C
copy-text                           = None      # Ctrl-C conflicts with quick-command.
count-region                        = Alt-equal
cut-node                            = Shift-Ctrl-X
cut-text                            = None      # Ctrl-X (possible)
# cycle-focus                         = None
dabbrev-completion                  = Alt-Ctrl-slash
dabbrev-expands                     = Alt-slash
de-hoist                            = None
delete-char                         = Ctrl-d
delete-comments                     = Ctrl-)
delete-indentation                  = Alt-asciicircum
delete-node                         = Shift-Ctrl-BkSp
delete-spaces                       = Alt-backslash
demote                              = Ctrl-}
directory-make                      = None
directory-remove                    = None
downcase-region                     = None
downcase-word                       = Alt-l
dump-outline                        = None
edit-headline                       = Ctrl-H
end-edit-headline                   = None             # Esc conflicts with watch-escape.
end-of-buffer                       ! text = Alt-greater
end-of-buffer                       ! text = Ctrl-End
end-of-buffer-extend-selection      ! text = Ctrl-Shift-End
end-of-line                         = Alt-Down      
end-of-line                         = Ctrl-e
end-of-line-extend-selection        = None
equal-sized-panes                   = Alt-Shift-E
exchange-point-mark                 = None  # Should be Ctrl-X Ctrl-X.
execute-script                      = None             # Ctrl-e conflicts with end-of-line
exit-leo                            = Ctrl-Q
exit-named-mode                     = None
expand-all                          = None
expand-and-go-right                 = None
expand-next-level                   = None
expand-node                         = Alt-]
expand-or-go-right                  = Alt-RtArrow
expand-prev-level                   = None
expand-to-level-1                   = None
expand-to-level-2                   = None
expand-to-level-3                   = None
expand-to-level-4                   = None
expand-to-level-5                   = None
expand-to-level-6                   = None
expand-to-level-7                   = None
expand-to-level-8                   = None
expand-to-level-9                   = None
export-headlines                    = None
extend-to-paragraph                 = Alt-h
extract                             = Shift-Ctrl-D
extract-names                       = Shift-Ctrl-N</t>
<t tx="yen.20210612081822.717">file-delete                         = None
file-diff-files                     = None
file-insert                         = None
fill-paragraph                      = Alt-q
fill-region                         = None
fill-region-as-paragraph            = None
find-tab-hide                       = None
replace                             = Ctrl-=
replace-all                         = None  # Not recommended to bind this to a shortcut.
replace-then-find                   = Ctrl--
find-next                           = F3
find-prev                           = F2
find-tab-open                       = None
flatten-outline                     = None
flush-lines                         = None
focus-to-body                       = None
focus-to-find                       = None
focus-to-log                        = None
focus-to-minibuffer                 = None
focus-to-tree                       = None
forward-char                        = Ctrl-f
forward-char-extend-selection       = None
forward-paragraph                   = Alt-braceright
forward-paragraph-extend-selection  = None
forward-sentence                    = Alt-e
forward-sentence-extend-selection   = None
forward-word                        = Alt-f
forward-word                        = Ctrl-Right
forward-word-extend-selection       = None
full-command                        = Alt-x
go-back                             = None
go-forward                          = None
goto-char                           = None
goto-first-node                     = Alt-Shift-G
goto-first-sibling                  = None
goto-last-node                      = Alt-Shift-H
goto-last-sibling                   = None
goto-last-visible-node              = None
goto-line                           = Alt-g
goto-line                           = None         # Emacs version is less powerful than Leo version
goto-next-changed                   = None         # Alt-D conflicts with kill-word
goto-next-clone                     = None         # Removed Alt-N: not useful enough.
goto-next-marked                    = None         # Alt-M conflicts with back-to-indentation.
goto-next-node                      = Alt-Shift-DnArrow
goto-next-sibling                   = Alt-Shift-S
goto-next-visible                   = None         # Alt-DnArrow conflicts with end-of-line.
goto-parent                         = Alt-Shift-P
goto-prev-node                      = Alt-Shift-UpArrow
goto-prev-sibling                   = Alt-Shift-R
goto-prev-visible                   = None         # Alt-UpArrow conflicts with beginning-of-line.
help-for-minibuffer                 = None
spell-tab-hide                      = None
hoist                               = None
iconify-frame                       = Ctrl-z
import-file                         = None
indent-region                       = Alt-Ctrl-backslash
indent-region                       = Ctrl-]
indent-relative                     = None
indent-rigidly                      = None
indent-to-comment-column            = Alt-semicolon
insert-body-time                    = None         # Removed Shift-Ctrl-G: not useful enough.
insert-child                        = None
insert-headline-time                = None         # Removed Shift-Ctrl-H: not useful enough.
insert-newline                      = Ctrl-o
insert-node                         = Ctrl-I
insert-node                         = Insert
insert-node                         = Shift-Insert
insert-parentheses                  = Alt-parenleft
isearch-backward                    = Ctrl-R
isearch-backward-regexp             = Alt-Ctrl-r
isearch-forward                     = Ctrl-S
isearch-forward-regexp              = Alt-Ctrl-s
keep-lines                          = None
keyboard-quit                       = Ctrl-g
kill-line                           = Ctrl-k
kill-paragraph                      = None
kill-region                         = Ctrl-w
kill-region-save                    = Alt-w
kill-sentence                       = Alt-k
kill-word                           = Alt-d
line-number                         = None
mode-help                           = None
move-past-close-extend-selection    = None</t>
<t tx="yen.20210612081822.718">mark                            = Ctrl-M
mark-changed-items              = None         # Alt-C: now quick-command.
mark-subheads                   = None         # Alt-S conflicts with center-line.
match-brackets                  = None         # Ctrl-K conflicts with kill-line.
minimize-all                    = None
move-outline-down               = None         # Removed Ctrl-D: no point if other moves are not defined.
move-outline-left               = None         # Removed Ctrl-L: no point if other moves are not defined.
move-outline-right              = None         # Ctrl-R conflicts with search-backward.
move-outline-up                 = None         # Ctrl-U confllicts with universal-argument.
move-past-close                 = Alt-parenright
# negative-argument             = Alt-minus
new                             = None         # Ctrl-n conflicts with next-line.
newline-and-indent              = Ctrl-j
next-line                       = Ctrl-n
next-line-extend-selection      = None
open-leo-docs-leo               = None
open-leo-dist-leo               = None
open-leo-settings               = None
open-scripts-leo                = None
open-offline-tutorial           = None
open-online-home                = None
open-outline                    = None         # Ctrl-O conflicts with insert-newline
open-python-window              = None         # Removed Alt-P: not useful enough.
spell-tab-open                  = None
outline-to-cweb                 = None
outline-to-noweb                = None
paste-node                      = Shift-Ctrl-V
paste-retaining-clones          = None
paste-text                      = None      # Ctrl-V conflicts with scroll-down-page
previous-line                   = Ctrl-p
previous-line-extend-selection  = None
show-bindings                   = None
show-commands                   = None
promote                         = Ctrl-{            
quick-command                   = Ctrl-c
re-search-backward              = None
re-search-forward               = None
read-at-file-nodes              = None
read-outline-only               = None         # Removed Shift-Ctrl-R: not useful enough.
redo                            = None         # Ctrl-Z not defined, so Shift-Ctrl-Z less useful.
rectangle-clear                 = None
rectangle-close                 = None
rectangle-delete                = None
rectangle-kill                  = None
rectangle-open                  = None
rectangle-string                = None
rectangle-yank                  = None
reformat-paragraph              = Shift-Ctrl-P
remove-blank-lines              = None
remove-sentinels                = None
repeat-complex-command          = None
resize-to-screen                = None
reverse-region                  = None
revert                          = None
save-buffers-kill-leo           = None # Should be Ctrl-x Ctrl-c
save-file                       = None         # Ctrl-s conflicts with isearch-forward.
save-file-as                    = Shift-Ctrl-S
save-file-to                    = None
scroll-down-half-page           = None
scroll-down-line                = None
scroll-down-page                = Ctrl-v
scroll-up-half-page             = None
scroll-up-line                  = None
scroll-up-page                  = Alt-v
search-backward                 = None
search-forward                  = None
# select-all                    = Ctrl-a # Was beginning-of-line.
set-colors                      = None
set-comment-column              = None
set-extend-mode                 = None
set-fill-column                 = None
set-fill-prefix                 = None
set-find-everywhere                 = None
set-find-node-only                  = None
set-find-suboutline-only            = None
set-font                        = None
set-command-state               = None
set-insert-state                = None
# set-mark-command              = Ctrl-Shift-at
set-overwrite-state             = None
settings                        = None  # Ctrl-Y conflicts with yank.
shell-command                   = Alt-exclam
shell-command-on-region         = Alt-bar
show-color-names                = None
show-color-wheel                = None
show-fonts                      = None
# show-invisibles               = Alt-V
show-invisibles                 = None  # Alt-V conflicts with scroll-up-page .
sort-children                   = None
sort-columns                    = None
sort-fields                     = None
sort-lines                      = None
sort-siblings                   = Shift-Alt-A  # Alt-A conflicts with back-sentence.
spell-change                    = None
spell-change-then-find          = None
spell-find                      = None
spell-ignore                    = None
split-line                      = Alt-Ctrl-o
suspend                         = None
tabify                          = None
tangle                          = None      
tangle-all                      = None
tangle-marked                   = None
toggle-abbrev-mode              = None
toggle-active-pane              = None      # Ctrl-T conflicts with swap-characters.
toggle-angle-brackets           = None
toggle-extend-mode              = None
toggle-find-ignore-case-option      = None
toggle-find-in-body-option          = None
toggle-find-in-headline-option      = None
toggle-find-mark-changes-option     = None
toggle-find-mark-finds-option       = None
toggle-find-regex-option            = None
toggle-find-word-option             = None
toggle-find-wrap-around-option      = None
toggle-split-direction          = None
transpose-chars                 = Ctrl-t
transpose-lines                 = None
transpose-words                 = Alt-t
undo                            = None         # Ctrl-Z conflicts with suspend.
unindent-region                 = None
# universal-argument            = Ctrl-u
unmark-all                      = None         # Alt-U: conflicts with upcase-word.
untabify                        = None
untangle                        = None         # Removed Shift-Ctrl-U: not useful enough
untangle-all                    = None
untangle-marked                 = None
upcase-region                   = None
upcase-word                     = Alt-u
view-lossage                    = None
weave                           = None
what-line                       = None
word-search-backward            = None
word-search-forward             = None
write-at-file-nodes             = Shift-Ctrl-W
write-dirty-at-file-nodes       = None
write-missing-at-file-nodes     = None
write-outline-only              = None 
yank                            = Ctrl-y
yank-pop                        = Alt-y
zap-to-character                = Alt-z
</t>
<t tx="yen.20210612081822.719"></t>
<t tx="yen.20210612081822.72">'''
&lt;|docstring|&gt;
'''
</t>
<t tx="yen.20210612081822.720">do-nothing = Shift-F1
do-nothing = Shift-F2
do-nothing = Shift-F3
do-nothing = Shift-F4
do-nothing = Shift-F5
do-nothing = Shift-F6
do-nothing = Shift-F7
do-nothing = Shift-F8
do-nothing = Shift-F9
do-nothing = Shift-F10
do-nothing = Shift-F11
do-nothing = Shift-F12
</t>
<t tx="yen.20210612081822.721">These are no options for this keyset: we assume other options sets will also be in effect.

**Important**:
    
- With this keyset in effect other binding sets need only specify the commands
that actually have bindings.
    
- These definitions do not interfere with other settings, and do not cause
warnings about duplicate bindings.

- The Check Bindings script only checks for missing bindings in this set.
</t>
<t tx="yen.20210612081822.722">abbrev-kill-all                     = None
abbrev-list                         = None
abort-edit-headline                 = None
about-leo                           = None
activate-cmds-menu                  = None
activate-edit-menu                  = None
activate-file-menu                  = None
activate-help-menu                  = None
activate-outline-menu               = None
activate-plugins-menu               = None
activate-window-menu                = None
add-comments                        = None
add-editor                          = None
add-space-to-lines                  = None
add-tab-to-lines                    = None
auto-complete                       = None
auto-complete-force                 = None
back-char                           = None
back-char-extend-selection          = None
back-page                           = None
back-page-extend-selection          = None
back-paragraph                      = None
back-paragraph-extend-selection     = None
back-sentence                       = None
back-sentence-extend-selection      = None
back-to-home                        = None
back-to-indentation                 = None
back-word                           = None
back-word-extend-selection          = None
backward-delete-char                = None
backward-delete-word                = None
backward-find-character                     = None
backward-find-character-extend-selection    = None
backward-kill-paragraph             = None
backward-kill-sentence              = None
backward-kill-word                  = None
beginning-of-buffer                 = None
beginning-of-buffer-extend-selection= None
beginning-of-line                   = None
beginning-of-line-extend-selection  = None
capitalize-word                     = None
cascade-windows                     = None
center-line                         = None
center-region                       = None
chapter-select                      = None
# check-all-python-code             = None
check-outline                       = None
# check-python-code                 = None
# check-spelling                    = None
clean-all-lines                     = None
clean-lines                         = None
clean-recent-files                  = None
clear-extend-mode                   = None
clear-kill-ring                     = None
clear-recent-files                  = None
clear-selected-text                 = None
click-click-box                     = None
# click-headline                    = None
# click-icon-box                    = None
clone-find-all                      = None
clone-node                          = None
close-window                        = None
# cm-external-editor                  = None
contract-all                        = None
contract-node                       = None
contract-or-go-left                 = None
# contract-body-pane                  = None
# contract-log-pane                   = None
# contract-outline-pane               = None
# contract-pane                       = None
contract-parent                     = None
convert-all-blanks                  = None
convert-all-tabs                    = None
convert-blanks                      = None
convert-tabs                        = None
copy-node                           = None
copy-text                           = None
# copy-to-buffer                      = None
count-region                        = None
cut-node                            = None
cut-text                            = None
# cycle-all-focus                     = None
# cycle-focus                         = None
# cycle-editor-focus                  = None
dabbrev-completion                  = None
dabbrev-expands                     = None
debug                               = None
de-hoist                            = None
delete-char                         = None
delete-comments                     = None
delete-editor                       = None
delete-first-icon                   = None
delete-indentation                  = None
delete-last-icon                    = None
delete-node                         = None
delete-spaces                       = None
delete-word                         = None
demote                              = None
directory-make                      = None
directory-remove                    = None
disable-autocompleter               = None
disable-calltips                    = None
do-nothing                          = None
downcase-region                     = None
downcase-word                       = None
# double-click-headline             = None
double-click-icon-box               = None
dump-outline                        = None
edit-headline                       = None
edit-setting                        = None
enable-autocompleter                = None
enable-calltips                     = None
end-edit-headline                   = None
# end-kbd-macro                     = None
end-of-buffer                       = None
end-of-buffer-extend-selection      = None
end-of-line                         = None
end-of-line-extend-selection        = None
equal-sized-panes                   = None
exchange-point-mark                 = None
push-to-ipython                     = None
execute-script                      = None
exit-leo                            = None
exit-named-mode                     = None
expand-all                          = None
expand-and-go-right                 = None
expand-next-level                   = None
expand-node                         = None
expand-or-go-right                  = None
# expand-body-pane                    = None
# expand-log-pane                     = None
# expand-outline-pane                 = None
# expand-pane                         = None
expand-prev-level                   = None
# expand-region-abbrevs             = None
expand-to-level-1                   = None
expand-to-level-2                   = None
expand-to-level-3                   = None
expand-to-level-4                   = None
expand-to-level-5                   = None
expand-to-level-6                   = None
expand-to-level-7                   = None
expand-to-level-8                   = None
expand-to-level-9                   = None
export-headlines                    = None
extend-to-line                      = None
extend-to-paragraph                 = None
extend-to-sentence                  = None
extend-to-word                      = None
extract                             = None
extract-names                       = None
# extract-python-method               = None
# extract-section                     = None
</t>
<t tx="yen.20210612081822.723">file-delete                         = None
file-diff-files                     = None
file-insert                         = None
fill-paragraph                      = None
fill-region                         = None
fill-region-as-paragraph            = None
find-character                      = None
find-character-extend-selection     = None
find-clone-all                      = None
find-next-clone                     = None
find-next                           = None
find-all                            = None
find-prev                           = None
find-quick-selected                 = None
find-tab-hide                       = None
find-tab-open                       = None
find-word                           = None
find-word-in-line                   = None
flatten-outline                     = None
flush-lines                         = None
focus-to-body                       = None
focus-to-log                        = None
focus-to-find                       = None
focus-to-minibuffer                 = None
focus-to-tree                       = None
forward-char                        = None
forward-char-extend-selection       = None
forward-end-word                    = None
forward-end-word-extend-selection   = None
forward-page                        = None
forward-page-extend-selection       = None
forward-paragraph                   = None
forward-paragraph-extend-selection  = None
forward-sentence                    = None
forward-sentence-extend-selection   = None
forward-word                        = None
forward-word-extend-selection       = None
full-command                        = None
# fully-expand-body-pane              = None
# fully-expand-log-pane               = None
# fully-expand-outline-pane           = None
# fully-expand-pane                   = None
gc-collect-garbage                  = None
gc-dump-all-objects                 = None
gc-dump-new-objects                 = None
gc-dump-objects-verbose             = None
gc-show-summary                     = None
# gc-trace-disable                  = None
# gc-trace-enable                   = None
get-ipython-results                 = None
go-back                             = None
go-forward                          = None
goto-char                           = None
goto-first-node                     = None
goto-first-visible-node             = None
goto-first-sibling                  = None
goto-global-line                    = None
goto-last-node                      = None
goto-last-sibling                   = None
goto-last-visible-node              = None
goto-line                           = None # Leo's goto-line is better.
goto-next-changed                   = None
goto-next-clone                     = None
goto-next-marked                    = None
goto-next-node                      = None
goto-next-sibling                   = None
goto-next-visible                   = None
goto-parent                         = None
goto-prev-node                      = None
goto-prev-sibling                   = None
goto-prev-visible                   = None
group-operations-clear-marked       = None
group-operations-mark-for-clone     = None
group-operations-mark-for-copy      = None
group-operations-mark-for-move      = None
group-operations-mark-target        = None
group-operations-operate-on-marked  = None
group-operations-transfer           = None
toggle-input-state                  = None
help                                = None
help-for-autocompletion             = None
help-for-bindings                   = None
help-for-command                    = None
help-for-find-commands              = None
help-for-minibuffer                 = None
help-for-python                     = None
# hide-body-pane                      = None
# hide-log-pane                       = None
# hide-pane                           = None
# hide-outline-pane                   = None
spell-tab-hide                      = None
hoist                               = None
iconify-frame                       = None
import-file                         = None
# import-at-file                      = None
# import-at-root                      = None
# import-cweb-files                   = None
# import-derived-file                 = None
# import-flattened-outline            = None
# import-noweb-files                  = None
indent-region                       = None
indent-relative                     = None
indent-rigidly                      = None
indent-to-comment-column            = None
insert-body-time                    = None
insert-child                        = None
insert-icon                         = None
insert-headline-time                = None
# insert-kbd-macro                  = None
insert-newline                      = None
insert-node                         = None
insert-parentheses                  = None
# insert-to-buffer                  = None
isearch-backward                    = None
isearch-backward-regexp             = None
isearch-forward                     = None
isearch-forward-regexp              = None
keep-lines                          = None
keyboard-quit                       = None
kill-line                           = None
kill-paragraph                      = None
kill-region                         = None
kill-region-save                    = None
kill-sentence                       = None
kill-to-end-of-line                 = None
kill-word                           = None
line-number                         = None
mark                                = None
mark-changed-items                  = None
mark-subheads                       = None
match-brackets                      = None
menu-shortcut                       = None
minimize-all                        = None
mode-help                           = None
move-lines-down                     = None
move-lines-up                       = None
move-outline-down                   = None
move-outline-left                   = None
move-outline-right                  = None
move-outline-up                     = None
move-past-close                     = None
move-past-close-extend-selection    = None
</t>
<t tx="yen.20210612081822.724"># negative-argument                   = None
new                                 = None
newline-and-indent                  = None
next-line                           = None
next-line-extend-selection          = None
next-or-end-of-line                 = None # ! text = Down      # Brian Theado
next-or-end-of-line-extend-selection= None #! text = Shift-Down # Brian Theado
open-leo-docs-leo                   = None
open-leo-dist-leo                   = None
open-leo-settings                   = None
open-scripts-leo                    = None
open-offline-tutorial               = None
open-online-home                    = None
open-outline                        = None
open-python-window                  = None
spell-tab-open                      = None
outline-to-cweb                     = None
outline-to-noweb                    = None
paste-node                          = None
paste-retaining-clones              = None
paste-text                          = None
previous-line                       = None
previous-line-extend-selection      = None
previous-or-beginning-of-line                   = None # ! text = Up        # Brian Theado
previous-or-beginning-of-line-extend-selection  = None # ! text = Shift-Up  # Brian Theado
show-bindings                       = None
show-commands                       = None
show-focus                          = None
promote                             = None
quick-command                       = None
re-search-backward                  = None
re-search-forward                   = None
read-at-file-nodes                  = None
read-outline-only                   = None
rectangle-clear                     = None
rectangle-close                     = None
rectangle-delete                    = None
rectangle-kill                      = None
rectangle-open                      = None
rectangle-string                    = None
rectangle-yank                      = None
redo                                = None
reformat-paragraph                  = None
remove-blank-lines                  = None
remove-sentinels                    = None
remove-space-from-lines             = None
remove-tab-from-lines               = None
repeat-complex-command              = None
replace                             = None
replace-all                         = None
# replace-string                    = None
replace-then-find                   = None
resize-to-screen                    = None
reverse-region                      = None
reverse-sort-lines                  = None
reverse-sort-lines-ignoring-case    = None
revert                              = None
run-all-unit-tests-externally       = None
run-all-unit-tests-locally          = None
run-marked-unit-tests-externally    = None
run-marked-unit-tests-locally       = None
run-selected-unit-tests-externally  = None
run-selected-unit-tests-locally     = None
save-buffers-kill-leo               = None
save-file                           = None
save-file-as                        = None
save-file-to                        = None
# scan-for-autocompleter            = None
scroll-down-half-page               = None
scroll-down-line                    = None
scroll-down-page                    = None
scroll-outline-down-line            = None
scroll-outline-down-page            = None
scroll-outline-left                 = None
scroll-outline-right                = None
scroll-outline-up-line              = None
scroll-outline-up-page              = None
scroll-up-half-page                 = None
scroll-up-line                      = None
scroll-up-page                      = None
search-backward                     = None
search-forward                      = None
search-return-to-origin             = None
select-all                          = None
set-colors                          = None
set-comment-column                  = None
set-extend-mode                     = None
set-fill-column                     = None
set-fill-prefix                     = None
set-find-everywhere                 = None
set-find-node-only                  = None
set-find-suboutline-only            = None
set-font                            = None
set-command-state                   = None
set-insert-state                    = None
# set-mark-command                  = None
set-overwrite-state                 = None
set-replace-string                  = None
settings                            = None
shell-command                       = None
shell-command-on-region             = None
show-calltips                       = None
show-calltips-force                 = None
show-color-names                    = None
show-color-wheel                    = None
show-find-options                   = None
show-fonts                          = None
show-invisibles                     = None
# simulate-begin-drag               = None
# simulate-end-drag                 = None
sort-children                       = None
sort-columns                        = None
sort-fields                         = None
sort-lines                          = None
sort-lines-ignoring-case            = None
sort-recent-files                   = None
sort-siblings                       = None
spell-change                        = None
spell-change-then-find              = None
spell-find                          = None
spell-ignore                        = None
split-line                          = None
start-ipython                       = None
start-search                        = None
suspend                             = None
tab-cycle-next                      = None
tab-cycle-previous                  = None
tabify                              = None
tangle                              = None
tangle-all                          = None
tangle-marked                       = None
toggle-abbrev-mode                  = None
toggle-active-pane                  = None
toggle-angle-brackets               = None
toggle-autocompleter                = None
toggle-calltips                     = None
toggle-extend-mode                  = None
toggle-find-ignore-case-option      = None
toggle-find-in-body-option          = None
toggle-find-in-headline-option      = None
toggle-find-mark-changes-option     = None
toggle-find-mark-finds-option       = None
toggle-find-regex-option            = None
toggle-find-word-option             = None
toggle-find-wrap-around-option      = None
toggle-split-direction              = None
transpose-chars                     = None
transpose-lines                     = None
transpose-words                     = None
undo                                = None
unformat-paragraph                  = None
unindent-region                     = None
# universal-argument                  = None
unmark-all                          = None
untabify                            = None
untangle                            = None
untangle-all                        = None
untangle-marked                     = None
upcase-region                       = None
upcase-word                         = None
view-lossage                        = None
vr-toggle                           = None
weave                               = None
what-line                           = None
word-search-backward                = None
word-search-forward                 = None
write-at-file-nodes                 = None
write-dirty-at-file-nodes           = None
write-missing-at-file-nodes         = None
write-outline-only                  = None
yank                                = None
yank-pop                            = None
zap-to-character                    = None</t>
<t tx="yen.20210612081822.725">do-nothing = Shift-F1
do-nothing = Shift-F2
do-nothing = Shift-F3
do-nothing = Shift-F4
do-nothing = Shift-F5
do-nothing = Shift-F6
do-nothing = Shift-F7
do-nothing = Shift-F8
do-nothing = Shift-F9
do-nothing = Shift-F10
do-nothing = Shift-F11
do-nothing = Shift-F12
</t>
<t tx="yen.20210612081822.726"></t>
<t tx="yen.20210612081822.727">The page width for wrapping doc parts in external files.

Valid values: any nonzero positive integer.</t>
<t tx="yen.20210612081822.728">The width of tabs on the screen.  This setting is also used when writing doc parts.

Valid values: Any nonzero integer.

Negative tab widths (recommended) cause Leo to convert tabs to blanks when typing.</t>
<t tx="yen.20210612081822.729">Leo creates its menus using @menus trees. Within @menus trees,
@menu nodes create menus and @item nodes create menu items.

Notes:

- The menu name always follows @menu. If the menu name is 'Plugins', Leo will
create the Plugins menu and populate the menu by calling the
'create-optional-menus' hook. This creates the Plugins menu as usual.

- Nested @menu nodes contain submenus.

- The command name follows @item. If the body text of an @item node exists, this
body text is the menu name. Otherwise, the menu name is the command name.
However, if the command name starts with a '*', hyphens are removed from the
menu name.

- Menu names and command names may contain a single ampersand (&amp;). If present,
the following character is underlined in the name.

- If the command name in an @item node is just a hyphen (-), the item represents
a menu separator.</t>
<t tx="yen.20210612081822.73">@
Put notes about each version here.
&lt;|Initial version notes|&gt;</t>
<t tx="yen.20210612081822.730">文件</t>
<t tx="yen.20210612081822.731">新建</t>
<t tx="yen.20210612081822.732">打开</t>
<t tx="yen.20210612081822.733"></t>
<t tx="yen.20210612081822.734"></t>
<t tx="yen.20210612081822.735"></t>
<t tx="yen.20210612081822.736"></t>
<t tx="yen.20210612081822.737"></t>
<t tx="yen.20210612081822.738"></t>
<t tx="yen.20210612081822.739"></t>
<t tx="yen.20210612081822.74">import leo.core.leoGlobals as g

&lt;|imports|&gt;</t>
<t tx="yen.20210612081822.740"></t>
<t tx="yen.20210612081822.741"></t>
<t tx="yen.20210612081822.742">&amp;CheatSheet.leo</t>
<t tx="yen.20210612081822.743">Leo&amp;Docs.leo</t>
<t tx="yen.20210612081822.744">Leo&amp;Dist.leo</t>
<t tx="yen.20210612081822.745">leoP&amp;y.leo</t>
<t tx="yen.20210612081822.746">leoPy&amp;Ref.leo
</t>
<t tx="yen.20210612081822.747">&amp;myLeoSettings.leo
</t>
<t tx="yen.20210612081822.748">&amp;quickstart.leo</t>
<t tx="yen.20210612081822.749">scr&amp;ipts.leo</t>
<t tx="yen.20210612081822.75">def init ():
        
    ok = g.app.gui.guiName() in ('qt','qttabs')
    if ok:
        if 1: # Create the commander class *before* the frame is created.
            g.registerHandler('before-create-leo-frame',onCreate)
        else: # Create the commander class *after* the frame is created.
            g.registerHandler('after-create-leo-frame',onCreate)
        g.plugin_signon(__name__)   
    return ok
</t>
<t tx="yen.20210612081822.750">leo&amp;Settings.leo</t>
<t tx="yen.20210612081822.751">&amp;unittest.leo</t>
<t tx="yen.20210612081822.752"># 文件
# The first non-blank, non-comment body line is an alternate menu name.
#
# A placeholder for the actual menu.
# Leo's init code populates this menu as a special case.</t>
<t tx="yen.20210612081822.753"></t>
<t tx="yen.20210612081822.754">&amp;Save...</t>
<t tx="yen.20210612081822.755">Save &amp;As...</t>
<t tx="yen.20210612081822.756">Save As &amp;Unzipped...</t>
<t tx="yen.20210612081822.757">Save As &amp;Zipped...</t>
<t tx="yen.20210612081822.758">Save &amp;To...</t>
<t tx="yen.20210612081822.759"></t>
<t tx="yen.20210612081822.76">def onCreate (tag, keys):
    
    c = keys.get('c')
    if c:
        thePluginController = pluginController(c)
</t>
<t tx="yen.20210612081822.760"></t>
<t tx="yen.20210612081822.761"></t>
<t tx="yen.20210612081822.762"></t>
<t tx="yen.20210612081822.763"></t>
<t tx="yen.20210612081822.764"></t>
<t tx="yen.20210612081822.765"></t>
<t tx="yen.20210612081822.766"></t>
<t tx="yen.20210612081822.767"></t>
<t tx="yen.20210612081822.768"></t>
<t tx="yen.20210612081822.769"></t>
<t tx="yen.20210612081822.77">class &lt;|Controller Class Name|&gt;:
    
    @others</t>
<t tx="yen.20210612081822.770"></t>
<t tx="yen.20210612081822.771"></t>
<t tx="yen.20210612081822.772">&amp;Compare Leo Files...</t>
<t tx="yen.20210612081822.773"></t>
<t tx="yen.20210612081822.774"></t>
<t tx="yen.20210612081822.775"></t>
<t tx="yen.20210612081822.776">Read @auto Nodes</t>
<t tx="yen.20210612081822.777">Read @&lt;file&gt; Nodes</t>
<t tx="yen.20210612081822.778">Read @shadow Nodes</t>
<t tx="yen.20210612081822.779"></t>
<t tx="yen.20210612081822.78">def __init__ (self,c):
    
    self.c = c
    # Warning: hook handlers must use keywords.get('c'), NOT self.c.
    &lt;|ivars|&gt;</t>
<t tx="yen.20210612081822.780"></t>
<t tx="yen.20210612081822.781"></t>
<t tx="yen.20210612081822.782">Write @auto Nodes</t>
<t tx="yen.20210612081822.783">Write @&lt;file&gt; Nodes</t>
<t tx="yen.20210612081822.784">Write @shadow Nodes</t>
<t tx="yen.20210612081822.785"></t>
<t tx="yen.20210612081822.786">Write Dirty @auto Nodes</t>
<t tx="yen.20210612081822.787">Write Dirty @&lt;file&gt; Nodes</t>
<t tx="yen.20210612081822.788">Write Dirty @shadow Nodes</t>
<t tx="yen.20210612081822.789">Write Missing @&lt;file&gt; Nodes</t>
<t tx="yen.20210612081822.79"></t>
<t tx="yen.20210612081822.790"></t>
<t tx="yen.20210612081822.791">Import &amp;Any File...</t>
<t tx="yen.20210612081822.792">Import &amp;FreeMind Files...</t>
<t tx="yen.20210612081822.793">Import &amp;MindJet Files...</t>
<t tx="yen.20210612081822.794">Import M&amp;ORE Files...</t>
<t tx="yen.20210612081822.795">Import &amp;Jupyter Notebook...</t>
<t tx="yen.20210612081822.796">Import &amp;Tabbed File...</t>
<t tx="yen.20210612081822.797">Import &amp;Zim Folder...</t>
<t tx="yen.20210612081822.798"></t>
<t tx="yen.20210612081822.799">Export &amp;Outline...</t>
<t tx="yen.20210612081822.8"></t>
<t tx="yen.20210612081822.80">'''
A template for demonstrations based on plugins/demo.py.
The demo;; abbreviation will create this tree.
'''
&lt;&lt; imports &gt;&gt;
@others
# Use the *same* command/key binding for demo-start and demo.next.
try:
    if getattr(g.app, 'demo', None):
        g.app.demo.next()
    else:
        g.cls()
        print('starting demo')
        demo = MyDemo(c, trace=False)
        demo.bind('callout', callout)
        demo.bind('title', title)
        demo.start(script_string=script_string)
except Exception:
    g.app.demo = None
    raise
</t>
<t tx="yen.20210612081822.800">Export &amp;Jupyter Notebook</t>
<t tx="yen.20210612081822.801">&amp;Flatten Selected Outline...</t>
<t tx="yen.20210612081822.802">Outline To &amp;CWEB...</t>
<t tx="yen.20210612081822.803">Outline To &amp;Noweb...</t>
<t tx="yen.20210612081822.804">&amp;Remove Sentinels...</t>
<t tx="yen.20210612081822.805">&amp;Weave...</t>
<t tx="yen.20210612081822.806"></t>
<t tx="yen.20210612081822.807"></t>
<t tx="yen.20210612081822.808"></t>
<t tx="yen.20210612081822.809"></t>
<t tx="yen.20210612081822.81">if c.isChanged(): c.save()
import imp
from leo.core.leoQt import QtGui
import leo.plugins.demo as demo_module
imp.reload(demo_module)</t>
<t tx="yen.20210612081822.810"></t>
<t tx="yen.20210612081822.811"></t>
<t tx="yen.20210612081822.812"></t>
<t tx="yen.20210612081822.813"></t>
<t tx="yen.20210612081822.814"></t>
<t tx="yen.20210612081822.815"></t>
<t tx="yen.20210612081822.816"></t>
<t tx="yen.20210612081822.817"></t>
<t tx="yen.20210612081822.818"></t>
<t tx="yen.20210612081822.819"></t>
<t tx="yen.20210612081822.82"># A short example. Change as needed.
script_string = '''\
callout('Callout 1 centered')
title('This is title 1')
###
callout('Callout 2 (700, 200)', position=[700, 200])
title('This is title 2')
demo.next()
'''
</t>
<t tx="yen.20210612081822.820"></t>
<t tx="yen.20210612081822.821"></t>
<t tx="yen.20210612081822.822"></t>
<t tx="yen.20210612081822.823"></t>
<t tx="yen.20210612081822.824"></t>
<t tx="yen.20210612081822.825"></t>
<t tx="yen.20210612081822.826"></t>
<t tx="yen.20210612081822.827"></t>
<t tx="yen.20210612081822.828"></t>
<t tx="yen.20210612081822.829"></t>
<t tx="yen.20210612081822.83">class MyDemo (demo_module.Demo):
    
    def setup_script(self):
        '''Delete all previously shown widgets.'''
        self.delete_widgets()</t>
<t tx="yen.20210612081822.830"></t>
<t tx="yen.20210612081822.831"></t>
<t tx="yen.20210612081822.832"></t>
<t tx="yen.20210612081822.833"></t>
<t tx="yen.20210612081822.834"></t>
<t tx="yen.20210612081822.835"></t>
<t tx="yen.20210612081822.836"></t>
<t tx="yen.20210612081822.837">&amp;Refresh From Disk</t>
<t tx="yen.20210612081822.838">&amp;Revert To Saved</t>
<t tx="yen.20210612081822.839"></t>
<t tx="yen.20210612081822.84">def callout(text, **keys):
    w = demo_module.Callout(text, **keys)
    
def title(text, **keys):
    w = demo_module.Title(text, **keys)
</t>
<t tx="yen.20210612081822.840">E&amp;xit</t>
<t tx="yen.20210612081822.841"></t>
<t tx="yen.20210612081822.842">Can't Undo</t>
<t tx="yen.20210612081822.843">Can't Redo</t>
<t tx="yen.20210612081822.844"></t>
<t tx="yen.20210612081822.845">Cu&amp;t</t>
<t tx="yen.20210612081822.846">Cop&amp;y</t>
<t tx="yen.20210612081822.847">&amp;Paste</t>
<t tx="yen.20210612081822.848">Select &amp;All</t>
<t tx="yen.20210612081822.849"></t>
<t tx="yen.20210612081822.85">The end of a placeholder for template expansions, e.g.
`|&gt;`. See @string abbreviations-place-start.</t>
<t tx="yen.20210612081822.850"></t>
<t tx="yen.20210612081822.851"></t>
<t tx="yen.20210612081822.852"></t>
<t tx="yen.20210612081822.853"></t>
<t tx="yen.20210612081822.854"></t>
<t tx="yen.20210612081822.855"></t>
<t tx="yen.20210612081822.856"></t>
<t tx="yen.20210612081822.857"></t>
<t tx="yen.20210612081822.858"></t>
<t tx="yen.20210612081822.859"></t>
<t tx="yen.20210612081822.86">Start of a placeholder for template expansions.  E.g.
the ``&lt;|`` in::

    w;;=while &lt;|condition|&gt;:
    \:    &lt;|code|&gt;

This would expand with the ``&lt;|condition|&gt;`` selected, and ``,,``,
if that's an abbreviation linked to next_place(), see 
``@@data abbreviations examples``, would select ``&lt;|code|&gt;``.</t>
<t tx="yen.20210612081822.860"></t>
<t tx="yen.20210612081822.861"></t>
<t tx="yen.20210612081822.862"></t>
<t tx="yen.20210612081822.863"></t>
<t tx="yen.20210612081822.864"></t>
<t tx="yen.20210612081822.865"></t>
<t tx="yen.20210612081822.866"></t>
<t tx="yen.20210612081822.867"></t>
<t tx="yen.20210612081822.868"></t>
<t tx="yen.20210612081822.869"></t>
<t tx="yen.20210612081822.87">See abbreviations-subst-start.  This setting,
abbreviations-subst-end, has no effect if
abbreviations-subst-start is not set.</t>
<t tx="yen.20210612081822.870"></t>
<t tx="yen.20210612081822.871"></t>
<t tx="yen.20210612081822.872"></t>
<t tx="yen.20210612081822.873"></t>
<t tx="yen.20210612081822.874"></t>
<t tx="yen.20210612081822.875"></t>
<t tx="yen.20210612081822.876"></t>
<t tx="yen.20210612081822.877"></t>
<t tx="yen.20210612081822.878"></t>
<t tx="yen.20210612081822.879"></t>
<t tx="yen.20210612081822.88">If this @string is set to something other than None, *and*
@bool scripting-at-script-nodes = True, then substitutions
will be made when abbreviations are inserted.  For example
set abbreviations-subst-start to ``{|{`` and
abbreviations-subst-end to ``}|}`` and an abbreviation
like::

    date;;={|{import time;x=time.asctime()}|}

will expand to something like "Mon Aug 20 22:00:40 2012"

See also abbreviations-subst-env.
</t>
<t tx="yen.20210612081822.880"></t>
<t tx="yen.20210612081822.881"></t>
<t tx="yen.20210612081822.882"></t>
<t tx="yen.20210612081822.883"></t>
<t tx="yen.20210612081822.884"></t>
<t tx="yen.20210612081822.885">Show In&amp;visibles</t>
<t tx="yen.20210612081822.886"></t>
<t tx="yen.20210612081822.887"></t>
<t tx="yen.20210612081822.888"></t>
<t tx="yen.20210612081822.889"></t>
<t tx="yen.20210612081822.89">"Abbreviation" to trigger the selection of the next placeholder,
i.e. typing ,, will select the next &lt;|placeholder|&gt; text, after
removing the &lt;| and |&gt;</t>
<t tx="yen.20210612081822.890"></t>
<t tx="yen.20210612081822.891"></t>
<t tx="yen.20210612081822.892"></t>
<t tx="yen.20210612081822.893"></t>
<t tx="yen.20210612081822.894"></t>
<t tx="yen.20210612081822.895"></t>
<t tx="yen.20210612081822.896"></t>
<t tx="yen.20210612081822.897"></t>
<t tx="yen.20210612081822.898"></t>
<t tx="yen.20210612081822.899"></t>
<t tx="yen.20210612081822.9"></t>
<t tx="yen.20210612081822.90">The children of this node determine how Leo looks.</t>
<t tx="yen.20210612081822.900"></t>
<t tx="yen.20210612081822.901"></t>
<t tx="yen.20210612081822.902"></t>
<t tx="yen.20210612081822.903"></t>
<t tx="yen.20210612081822.904"></t>
<t tx="yen.20210612081822.905"></t>
<t tx="yen.20210612081822.906"></t>
<t tx="yen.20210612081822.907"></t>
<t tx="yen.20210612081822.908"></t>
<t tx="yen.20210612081822.909"></t>
<t tx="yen.20210612081822.91">@language rest
@wrap

This tree contains settings that are inserted style sheets. For example,
given the setting::

    @color body-bg = white
    
Leo will substitute "white" everywhere that "@body-bg" appears in the following two trees:

    @data qt-gui-plugin-style-sheet
    @data qt-gui-user-style-sheet

Many users will want to change the settings in the Fonts section, especially these:

- @string font-size:
  The base font size, the largest of the font-size settings.
- @string medium-font-size:
  An intermediate font sized used by default in the Find Panel.
- @string small-font-size:
  A small font size used in buttons.
</t>
<t tx="yen.20210612081822.910"></t>
<t tx="yen.20210612081822.911"></t>
<t tx="yen.20210612081822.912"></t>
<t tx="yen.20210612081822.913"></t>
<t tx="yen.20210612081822.914"></t>
<t tx="yen.20210612081822.915"></t>
<t tx="yen.20210612081822.916"></t>
<t tx="yen.20210612081822.917"></t>
<t tx="yen.20210612081822.918"></t>
<t tx="yen.20210612081822.919"></t>
<t tx="yen.20210612081822.92"></t>
<t tx="yen.20210612081822.920"></t>
<t tx="yen.20210612081822.921"></t>
<t tx="yen.20210612081822.922"></t>
<t tx="yen.20210612081822.923"></t>
<t tx="yen.20210612081822.924"></t>
<t tx="yen.20210612081822.925"></t>
<t tx="yen.20210612081822.926"></t>
<t tx="yen.20210612081822.927"></t>
<t tx="yen.20210612081822.928"></t>
<t tx="yen.20210612081822.929"></t>
<t tx="yen.20210612081822.93"></t>
<t tx="yen.20210612081822.930"></t>
<t tx="yen.20210612081822.931"></t>
<t tx="yen.20210612081822.932"></t>
<t tx="yen.20210612081822.933"></t>
<t tx="yen.20210612081822.934"></t>
<t tx="yen.20210612081822.935"></t>
<t tx="yen.20210612081822.936"></t>
<t tx="yen.20210612081822.937"></t>
<t tx="yen.20210612081822.938"></t>
<t tx="yen.20210612081822.939"></t>
<t tx="yen.20210612081822.94"></t>
<t tx="yen.20210612081822.940"></t>
<t tx="yen.20210612081822.941"></t>
<t tx="yen.20210612081822.942"></t>
<t tx="yen.20210612081822.943"></t>
<t tx="yen.20210612081822.944"></t>
<t tx="yen.20210612081822.945"></t>
<t tx="yen.20210612081822.946"></t>
<t tx="yen.20210612081822.947"></t>
<t tx="yen.20210612081822.948"></t>
<t tx="yen.20210612081822.949"></t>
<t tx="yen.20210612081822.95"></t>
<t tx="yen.20210612081822.950"></t>
<t tx="yen.20210612081822.951"></t>
<t tx="yen.20210612081822.952"></t>
<t tx="yen.20210612081822.953"></t>
<t tx="yen.20210612081822.954"></t>
<t tx="yen.20210612081822.955"></t>
<t tx="yen.20210612081822.956"></t>
<t tx="yen.20210612081822.957"></t>
<t tx="yen.20210612081822.958"></t>
<t tx="yen.20210612081822.959"></t>
<t tx="yen.20210612081822.96"></t>
<t tx="yen.20210612081822.960"></t>
<t tx="yen.20210612081822.961"></t>
<t tx="yen.20210612081822.962"></t>
<t tx="yen.20210612081822.963"></t>
<t tx="yen.20210612081822.964"></t>
<t tx="yen.20210612081822.965"></t>
<t tx="yen.20210612081822.966"></t>
<t tx="yen.20210612081822.967"></t>
<t tx="yen.20210612081822.968"></t>
<t tx="yen.20210612081822.969"></t>
<t tx="yen.20210612081822.97"></t>
<t tx="yen.20210612081822.970"></t>
<t tx="yen.20210612081822.971"></t>
<t tx="yen.20210612081822.972"></t>
<t tx="yen.20210612081822.973"></t>
<t tx="yen.20210612081822.974"></t>
<t tx="yen.20210612081822.975"></t>
<t tx="yen.20210612081822.976"></t>
<t tx="yen.20210612081822.977"></t>
<t tx="yen.20210612081822.978"></t>
<t tx="yen.20210612081822.979"></t>
<t tx="yen.20210612081822.98"></t>
<t tx="yen.20210612081822.980"></t>
<t tx="yen.20210612081822.981"></t>
<t tx="yen.20210612081822.982"></t>
<t tx="yen.20210612081822.983"></t>
<t tx="yen.20210612081822.984"></t>
<t tx="yen.20210612081822.985"></t>
<t tx="yen.20210612081822.986"></t>
<t tx="yen.20210612081822.987"></t>
<t tx="yen.20210612081822.988"></t>
<t tx="yen.20210612081822.989"></t>
<t tx="yen.20210612081822.99"></t>
<t tx="yen.20210612081822.990"></t>
<t tx="yen.20210612081822.991"></t>
<t tx="yen.20210612081822.992"></t>
<t tx="yen.20210612081822.993"></t>
<t tx="yen.20210612081822.994"></t>
<t tx="yen.20210612081822.995"># Alt+Ctrl+E set-find-everywhere
# Alt+Ctrl+N set-find-node-only
# Alt+Ctrl+S set-find-suboutline-only
</t>
<t tx="yen.20210612081822.996"></t>
<t tx="yen.20210612081822.997"></t>
<t tx="yen.20210612081822.998"></t>
<t tx="yen.20210612081822.999"></t>
</tnodes>
</leo_file>
