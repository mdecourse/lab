<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>mde.tw/lab 網誌 - Github</title><link href="./" rel="alternate"></link><link href="./feeds/github.atom.xml" rel="self"></link><id>./</id><updated>2021-02-10T06:45:00+08:00</updated><entry><title>倉儲資料維護與管理</title><link href="./manage-your-cmsimde-site.html" rel="alternate"></link><published>2020-05-11T11:00:00+08:00</published><updated>2021-02-10T06:45:00+08:00</updated><author><name>yen</name></author><id>tag:None,2020-05-11:./manage-your-cmsimde-site.html</id><summary type="html">&lt;p&gt;&lt;a href="http://mde.tw/cd2020"&gt;cd2020&lt;/a&gt; 是 2020 春季協同產品設計實習的課程網站, 而 &lt;a href="http://mde.tw/cd2020pj1"&gt;cd2020pj1&lt;/a&gt; 則是與協同設計課程相關的程式專案, 兩者都採用 &lt;a href="https://github.com/mdecourse/cmsimde"&gt;CMSiMDE&lt;/a&gt; 建立網站. 其中 &lt;a href="http://mde.tw/cd2020"&gt;cd2020&lt;/a&gt; 是典型的動態與網站架構, 而 &lt;a href="http://mde.tw/cd2020pj1"&gt;cd2020pj1&lt;/a&gt; 則除了網站還包含 Flask 協同產品設計程式的開發.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="http://mde.tw/cd2020"&gt;cd2020&lt;/a&gt; 是 2020 春季協同產品設計實習的課程網站, 而 &lt;a href="http://mde.tw/cd2020pj1"&gt;cd2020pj1&lt;/a&gt; 則是與協同設計課程相關的程式專案, 兩者都採用 &lt;a href="https://github.com/mdecourse/cmsimde"&gt;CMSiMDE&lt;/a&gt; 建立網站. 其中 &lt;a href="http://mde.tw/cd2020"&gt;cd2020&lt;/a&gt; 是典型的動態與網站架構, 而 &lt;a href="http://mde.tw/cd2020pj1"&gt;cd2020pj1&lt;/a&gt; 則除了網站還包含 Flask 協同產品設計程式的開發.&lt;/p&gt;


&lt;p&gt;當要從遠端 git clone &lt;a href="http://mde.tw/cd2020"&gt;cd2020&lt;/a&gt; 倉儲時, 牽涉到系統使用何種協定連線, https 或 ssh?&lt;/p&gt;
&lt;p&gt;因為不同的連線協定有不同的設定檔案, 而且預計連線的主機並不一定就能提供服務, 因此能否順利完成 git clone 牽涉許多細節. 而這些細節並非一成不變, 而必須按照邏輯順序, 一一查驗才能得到期望中的結果.&lt;/p&gt;
&lt;p&gt;首先, 因為 &lt;a href="http://mde.tw/cd2020"&gt;cd2020&lt;/a&gt; 網站的倉儲位於 https://github.com/mdecourse/cd2020.git, 其中帶有 cmsimde 子模組, 因此若要將此倉儲從遠端 git clone 到近端作為工作目錄, 最好的方式就是透過 --recurse-submodules 參數, 將子模組一起 clone 到近端.&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
git clone --recurse-submodules https://github.com/mdecourse/cd2020.git
&lt;/pre&gt;

&lt;p&gt;由於 KMOLab 的課程鼓勵學員在 Windows 10 操作系統中, 使用隨身程式系統, 而不要被微軟綁定, 因為使用者必須了解所開發的程式必須能在 Mac OS X 與許多 Linux 操作系統執行, Windows 10 不應該是工程師唯一的操作系統.&lt;/p&gt;
&lt;p&gt;因此, 從隨身系統中的 start.bat 啟動後, Windows 10 就只是機械設計工程師的暫時宿主, 隨時都要準備離開, 所以啟動後必須注意所處的網路連線環境, 假如是在 IPv4 網路環境, 可以直接對 github.com 連線, 但是身處純 IPv6 網路環境中, 目前仍必須透過支援 IPv4 與 IPv6 的網路代理主機, 才能利用 git 或 ssh 對 github.com 連線.&lt;/p&gt;
&lt;p&gt;以 https 對 github.com 連線, 代理主機的設定是透過:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
git config --global http.proxy=http://[2001::_your_ipv6_proxy]:3128
&lt;/pre&gt;

&lt;p&gt;假如採 ssh 對 github.com 連線, 則代理主機的設定必須檢查 putty.exe 中 github.com session 中 Connections - Proxy 的代理主機設定.&lt;/p&gt;
&lt;p&gt;一旦完成 &lt;a href="http://mde.tw/cd2020"&gt;cd2020&lt;/a&gt; 網站倉儲的 git clone, 使用者就可以使用隨身系統中的命令列視窗, 進入 &lt;a href="http://mde.tw/cd2020"&gt;cd2020&lt;/a&gt; 倉儲中的 cmsimde 目錄, 以:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
python wsgi.py
&lt;/pre&gt;

&lt;p&gt;開啟動態網站系統, 並利用瀏覽器連線到 https://localhost:9443 進行動態網站內容的維護, 完成後再利用 generate pages 按鈕將動態網站中的 config/content.htm 轉為 content 目錄中的靜態網頁, 之後再新增, 提交, 推送到遠端, 以完成倉儲改版的流程.&lt;/p&gt;</content><category term="Github"></category><category term="CMSiMDE"></category></entry><entry><title>CMSiMDE 部署</title><link href="./2020-lab-get-started.html" rel="alternate"></link><published>2020-05-09T11:00:00+08:00</published><updated>2021-02-10T06:45:00+08:00</updated><author><name>yen</name></author><id>tag:None,2020-05-09:./2020-lab-get-started.html</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/mdecourse/cmsimde"&gt;CMSiMDE&lt;/a&gt; 所能伺服的內容包含網站, 網誌與簡報, 而網站又分為動態系統與靜態系統, 動態網站建置主要的目的在方便進行 html 文件的編輯, 而靜態網站系統則主要為了能在一般的 WWW 伺服器上進行部署. &lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="https://github.com/mdecourse/cmsimde"&gt;CMSiMDE&lt;/a&gt; 所能伺服的內容包含網站, 網誌與簡報, 而網站又分為動態系統與靜態系統, 動態網站建置主要的目的在方便進行 html 文件的編輯, 而靜態網站系統則主要為了能在一般的 WWW 伺服器上進行部署. &lt;/p&gt;


&lt;h2&gt;網站&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecourse/cmsimde"&gt;CMSiMDE&lt;/a&gt; 的網站編輯採用 Flask 框架編寫, 目前所需要的模組包含 flask, flask_cors, lxml, bs4 與 markdown. 使用者可以選擇將 &lt;a href="https://github.com/mdecourse/cmsimde"&gt;CMSiMDE&lt;/a&gt; 當作 submodule 或者單獨部署在倉儲內容中的 cmsimde 目錄後, 再將 cmsimde 目錄中的 up_dir 目錄內容複製到倉儲主目錄即可.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecourse/cmsimde"&gt;CMSiMDE&lt;/a&gt; 倉儲資料包含引擎內容 (也就是 cmsimde 中的資料) 與使用者內容 (也就是 up_dir 中的資料) 等兩類, 許多的網際功能都是配合歷年上課時敲敲打打修改而成, 因此整體架構相當鬆散, 就所謂的網際內容管理功能而言, 只能算勉強堪用, 還有很大的修改空間.&lt;/p&gt;
&lt;h2&gt;網誌&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecourse/cmsimde"&gt;CMSiMDE&lt;/a&gt; 的網誌系統採用 &lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt;, 編輯網誌的架構採用 &lt;a href="https://github.com/leo-editor/leo-editor"&gt;Leo Editor&lt;/a&gt; 管理, 而網誌專案檔位於 config 目錄中的 pelican.leo.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/leo-editor/leo-editor"&gt;Leo Editor&lt;/a&gt; 其實是一套值得大力推廣的整合開發系統與文件編輯器, 但可能因為曲高因此和寡, 真正能夠運用上手的全球用戶, 數量始終偏低. 但是其大綱編輯模式非常適合處理複雜的工程設計流程所產生的各種文字資料, 因此非常希望 Python 新手能夠以看懂 &lt;a href="https://github.com/leo-editor/leo-editor"&gt;Leo Editor&lt;/a&gt; 的設計架構與處理問題的細節作為遠大的目標.&lt;/p&gt;
&lt;h2&gt;簡報&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecourse/cmsimde"&gt;CMSiMDE&lt;/a&gt; 的網誌簡報採用 &lt;a href="https://github.com/hakimel/reveal.js/"&gt;reveal.js&lt;/a&gt;. 而簡報的編輯檔案也是採用 &lt;a href="https://github.com/leo-editor/leo-editor"&gt;Leo Editor&lt;/a&gt;, 簡報專案位於 config 目錄中的 reveal.leo.&lt;/p&gt;
&lt;h2&gt;網站建構流程&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecourse/cmsimde"&gt;CMSiMDE&lt;/a&gt; 的網站建構流程, 可以從建立初始的 &lt;a href="https://github.com"&gt;Github&lt;/a&gt; 倉儲開始. 亦即在 &lt;a href="https://github.com"&gt;Github&lt;/a&gt; 建立一個僅含 README.md 檔案的倉儲, 然後 git clone 該倉儲到近端後, 以命令列進入該倉儲後再以 &lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
git submodule add https://github.com/mdecourse/cmsimde.git cmsimde
&lt;/pre&gt;

&lt;p&gt;將 &lt;a href="https://github.com/mdecourse/cmsimde"&gt;CMSiMDE&lt;/a&gt; 倉儲內容納為子模組, 且命名為 cmsimde 目錄. 接下來將 cmsimde 目錄中, 名稱為 up_dir 的目錄內容, 複製到倉儲的根目錄中. 若近端隨身系統或操作系統已經安裝 Python3 與相應的 flask, flask_cors, lxml, bs4, markdown 等模組後, 就可以在命令列中, 進入 cmsimde 子目錄, 以:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
python wsgi.py
&lt;/pre&gt;

&lt;p&gt;假如是在 OS X 或 Linux 操作系統, 則必須使用 Python 3 指令:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
python3 wsgi.py
&lt;/pre&gt;

&lt;p&gt;在近端啟動動態網站, 以瀏覽器 https://localhost:9443 開啟.&lt;/p&gt;
&lt;h2&gt;網站內容管理&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecourse/cmsimde"&gt;CMSiMDE&lt;/a&gt; 的動態網際內容管理, 將所有網頁內容存入 config 目錄中的 content.htm 檔案, 而在每一次使用者儲存新檔案之前,  會將舊版的 content.htm 複製至 content_backup.htm, 之所以如此是因為 &lt;a href="https://github.com/mdecourse/cmsimde"&gt;CMSiMDE&lt;/a&gt; 採用 &lt;a href="https://pypi.org/project/beautifulsoup4/"&gt;bs4&lt;/a&gt;, 對 config/content.htm 內容進行分頁, 而分頁是依據 content.htm 由上到下的 h1, h2 與 h3 標註內容而定. 並在將動態網站內容 content.htm 以動態編輯器中的 generate pages 功能 (使用 &lt;a href="https://pypi.org/project/lxml/"&gt;lxml&lt;/a&gt; 模組功能) 轉為 content 目錄中的各分頁內容時, 可能因分頁失敗而讓整個 content.htm 內容丟失 (這就是非常需要改進的地方之一), 所以才設計 content_backup.htm 的複製進行及時補救.&lt;/p&gt;
&lt;p&gt;另外, 在 &lt;a href="https://github.com/mdecourse/cmsimde"&gt;CMSiMDE&lt;/a&gt; 將操作系統不允許作為檔案名稱的特殊符號自動移除之前 (例如 ":" 號), 使用者應該避免在 h1, h2 與 h3 等標題中使用特殊符號.&lt;/p&gt;
&lt;h2&gt;Github Pages&lt;/h2&gt;
&lt;p&gt;將 &lt;a href="https://github.com/mdecourse/cmsimde"&gt;CMSiMDE&lt;/a&gt; 的動態系統轉為靜態後, 所有靜態頁面的內容存入 content 目錄, 使用者可以將此目錄內容部署到 &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; 上, 或其他能夠伺服 WWW html 檔案的系統即可完成網站的建立.&lt;/p&gt;
&lt;p&gt;但是一般為了方便, 通常將包含動態系統與靜態網站內容的整個倉儲資料, 直接交由 &lt;a href="https://github.com"&gt;Github&lt;/a&gt; 管理.  只要將倉儲的 master 分支設為 &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; 的根目錄, 就可以交由 &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;, 由倉儲主分支倉儲中的 index.html 進行網站導引.&lt;/p&gt;
&lt;p&gt;假如使用者將近端的動態網頁內容轉為靜態後, 希望在近端檢視靜態網站內容, 可以在近端倉儲根目錄利用:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
python http-server.py
&lt;/pre&gt;

&lt;p&gt;或在 OS X 及 Linux 操作系統中以:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
python3 http-server.py
&lt;/pre&gt;

&lt;p&gt;啟動 https://localhost:8444 近端的靜態網頁伺服系統.&lt;/p&gt;
&lt;h2&gt;Ubuntu 20.04 自架主機&lt;/h2&gt;
&lt;p&gt;上述利用 &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; 伺服 &lt;a href="https://github.com/mdecourse/cmsimde"&gt;CMSiMDE&lt;/a&gt; 靜態網頁內容的配置流程非常簡單, 但若是要將 &lt;a href="https://github.com/mdecourse/cmsimde"&gt;CMSiMDE&lt;/a&gt; 靜態網頁與動態網站系統部署在自架的 Ubuntu 20.04 主機, 則操作系統除了要安裝前述的 python3, flask, flask_cors, bs4, lxml, markdown 之外, 還需要運用 &lt;a href="https://nginx.org/en/"&gt;nginx&lt;/a&gt;, &lt;a href="https://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html"&gt;uwsgi&lt;/a&gt;, &lt;a href="https://www.openssl.org/"&gt;openssl&lt;/a&gt; 進行配置.&lt;/p&gt;
&lt;p&gt;其中, &lt;a href="https://www.openssl.org/"&gt;openssl&lt;/a&gt; 用來建立網站認證用的 key 與 certificate, &lt;a href="https://nginx.org/en/"&gt;nginx&lt;/a&gt; 負責建立 WWW 伺服, 而 &lt;a href="https://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html"&gt;uwsgi&lt;/a&gt; 則負責用來開機執行 &lt;a href="https://github.com/mdecourse/cmsimde"&gt;CMSiMDE&lt;/a&gt; 中的 wsgi.py 伺服程式.&lt;/p&gt;
&lt;p&gt;利用 &lt;a href="https://www.openssl.org/"&gt;openssl&lt;/a&gt; 建立 cmsimde.key 與 cmsimde.crt 的指令如下:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout cmsimde.key -out cmsimde.crt
&lt;/pre&gt;

&lt;p&gt;與 &lt;a href="https://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html"&gt;uwsgi&lt;/a&gt; 有關的 Ubuntu 系統安裝則包括:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
// 安裝 pip3
sudo apt install python3-pip
// 安裝 python 編譯開發系統
sudo apt install build-essential python3-dev
// 安裝 uwsgi 模組
sudo pip3 install uwsgi
// 安裝 nginx 伺服套件與 uwsgi python3 plugin 程式庫
sudo apt install nginx uwsgi-plugin-python3
&lt;/pre&gt;

&lt;p&gt;/etc/nginx/sites-available/default&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
# for lab.mde.tw static site, use nginx to serve
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    root /home/user_account/labmdetw;
    index index.html index.htm;
    server_name _;

    location /static {
            alias /home/user_account/labmdetw/cmsimde/static/;
        }
        location /downloads {
            alias /home/user_account/labmdetw/downloads/;
        }

        location /images {
            alias /home/user_account/labmdetw/images/;
        }

        location /blog {
            alias /home/user_account/labmdetw/blog/;
        }

        location /reveal {
            alias /home/user_account/labmdetw/reveal/;
        }

    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        try_files $uri $uri/ =404;
    }

}

# https://lab.mde.tw use nginx to serve
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    root /home/user_account/labmdetw;
    index index.html index.htm;
    server_name _;

    location /static {
            alias /home/user_account/labmdetw/cmsimde/static/;
        }
        location /downloads {
            alias /home/user_account/labmdetw/downloads/;
        }

        location /images {
            alias /home/user_account/labmdetw/images/;
        }

        location /blog {
            alias /home/user_account/labmdetw/blog/;
        }

        location /reveal {
            alias /home/user_account/labmdetw/reveal/;
        }

    location / {
    # First attempt to serve request as file, then
    # as directory, then fall back to displaying a 404.
    try_files $uri $uri/ =404;
    }

    ssl_certificate /etc/nginx/nginx.crt;
    ssl_certificate_key /etc/nginx/nginx.key;
    ssl_session_timeout 5m;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
    ssl_prefer_server_ciphers on;
    try_files $uri $uri/ =404;
}

# dynamic https://lab.mde.tw:7443 use nginx for ssl and uwsgi for wsgi serving
server {

    listen 7443 ssl;
    listen [::]:7443 ssl;

    location /static {
        alias /home/user_account/labmdetw/cmsimde/static/;
    }

    location / {
        include uwsgi_params;
        uwsgi_pass  127.0.0.1:9443;
    }

    ssl_certificate /etc/nginx/nginx.crt;
    ssl_certificate_key /etc/nginx/nginx.key;
    ssl_session_timeout 5m;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
    ssl_prefer_server_ciphers on;
    try_files $uri $uri/ =404;
}
&lt;/pre&gt;

&lt;p&gt;uwsgi_ini/uwsgi.ini&lt;/p&gt;
&lt;pre class="brush:js;auto-links:false"&gt;
[uwsgi]
socket = 127.0.0.1:9443
uid = user_account
gid = user_account
plugins-dir = /usr/lib/uwsgi/plugins/
plugin = python3
master = true
process = 4
threads = 2
chdir = /home/user_account/labmdetw/cmsimde
wsgi-file = /home/user_account/labmdetw/cmsimde/wsgi.py
&lt;/pre&gt;

&lt;p&gt;啟動 uwsgi 指令, 將會逐一啟動 wsgi_ini 目錄中個別 .ini 檔案:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo /usr/bin/uwsgi --emperor /home/user_account/wsgi_ini
&lt;/pre&gt;

&lt;p&gt;最後則設定 Ubuntu 系統服務, 用來啟動 uwsgi:&lt;/p&gt;
&lt;p&gt;/etc/systemd/system 的 cmsimde.service 服務啟動檔案內容:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
[Unit]
Description=uWSGI to serve CMSiMDE
After=network.target

[Service]
User=user_account
Group=user_account
WorkingDirectory=/home/user_account/uwsgi_ini
ExecStart=/usr/local/bin/uwsgi --emperor /home/user_account/uwsgi_ini

[Install]
WantedBy=multi-user.target
&lt;/pre&gt;

&lt;p&gt;接著將 cmsimde 服務設為隨系統開機啟動:&lt;/p&gt;
&lt;p&gt;sudo systemctl enable cmsimde&lt;/p&gt;
&lt;p&gt;若要取消 cmsimde 服務隨系統開機啟動:&lt;/p&gt;
&lt;p&gt;sudo systemctl disable cmsimde&lt;/p&gt;
&lt;p&gt;手動啟動 cmsimde.service 服務&lt;/p&gt;
&lt;p&gt;sudo systemctl start cmsimde&lt;/p&gt;
&lt;p&gt;手動停止 cmsimde.service 服務&lt;/p&gt;
&lt;p&gt;sudo systemctl stop cmsimde&lt;/p&gt;</content><category term="Github"></category><category term="Deployment"></category></entry></feed>