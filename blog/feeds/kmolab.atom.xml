<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>mde.tw/lab 網誌 - KMOLab</title><link href="./" rel="alternate"></link><link href="./feeds/kmolab.atom.xml" rel="self"></link><id>./</id><updated>2021-07-11T12:00:00+08:00</updated><entry><title>注意程式間的細節</title><link href="./2021-kmol-notice-the-detail-difference-between-programs.html" rel="alternate"></link><published>2021-07-11T12:00:00+08:00</published><updated>2021-07-11T12:00:00+08:00</updated><author><name>yen</name></author><id>tag:None,2021-07-11:./2021-kmol-notice-the-detail-difference-between-programs.html</id><summary type="html">&lt;p&gt;已經使用 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 超過十年, 但是最近幾個月因為一直在 Mac 上工作, 而 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 在 Mac 上的操作細節與 Windows 及 Linux 上有所差異. 感覺在 Windows 上操作非常順手之後, 到了 Mac 即便是自認對 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 非常熟悉, 但是卻連一個簡單的字串替換都沒有辦法完成......&lt;/p&gt;
</summary><content type="html">&lt;p&gt;已經使用 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 超過十年, 但是最近幾個月因為一直在 Mac 上工作, 而 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 在 Mac 上的操作細節與 Windows 及 Linux 上有所差異. 感覺在 Windows 上操作非常順手之後, 到了 Mac 即便是自認對 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 非常熟悉, 但是卻連一個簡單的字串替換都沒有辦法完成......&lt;/p&gt;


&lt;h2&gt;Leo Editor 的 replace-all&lt;/h2&gt;
&lt;p&gt;無法在  Mac 如 Windows 上順利操作 replace-all 的原因是,  Mac 平台上無法使用如 Windows 版的 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt;, 直接在 Find Tab 上的表單操作, 而必須使用 Minibuffer, 以指令與特定按鍵順序操作.&lt;/p&gt;
&lt;p&gt;在 Mac 的 replace-all 操作順序必須採:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;將滑鼠停在 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 下方的 Minibuffer 欄位處, 表示要執行 Minibuffer 指令.&lt;/li&gt;
&lt;li&gt;滑鼠停在 Minibuffer 區域後, 欄位區會跳出 "full-command:", 表示使用者要執行指令.&lt;/li&gt;
&lt;li&gt;接著輸入 "replace-all" 後按下 enter, 這時 Minibuffer 欄位區會轉為 "Search:", 表示要使用者輸入搜尋字串.&lt;/li&gt;
&lt;li&gt;等使用者輸入所要搜尋的輸入字串後, 就到了最重要的關鍵, 這時若按下 enter, 表示要搜尋該字串, 但是若使用者在輸入搜尋字串後, 並非按下 enter, 而是按下 tab 鍵, 表示 replace-all 所需要的輸入流程尚未完成, 也就是除了給定搜尋字串之外, 還要輸入替換字串.&lt;/li&gt;
&lt;li&gt;當輸入搜尋字串後, 再按下 tab , Minibuffer 欄位區會轉為 "Replace String: 搜尋字串 with", 這時就可以輸入"替換字串"後, 再按下 enter, &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 就會根據 Find tab 中所勾選的設定來替換字串.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Leo Editro 操作系統間的差異&lt;/h2&gt;
&lt;p&gt;由於 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 的開發者堅持要讓 Python2 與 Python3 的用戶都能使用, 而且大多數開發者都只使用英文輸入介面, 目前已知在 Windows 操作系統, 若輸入停留在中文環境, 就會因為無法建立 .leo/.leoID.txt 而無法通過首次開啟流程, 造成無法正常使用. 應對方法就是在 Windows 首次開啟 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 時, 必須先將環境選擇英文輸入, 才能正常建立 .leo/leoID.txt.&lt;/p&gt;
&lt;p&gt;而且 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 在 Windows 與 Mac 的操作表單也不完全相同, 不知是否因為 Mac 操作系統內仍有 Python2, 且 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 的 Exit 必須透過 Python 下拉式表單的 Quit Python 操作, Mac File 下拉式功能表中並沒有 Exit.&lt;/p&gt;
&lt;h2&gt;Leo Editor 的設定檔&lt;/h2&gt;
&lt;p&gt;根據 &lt;a href="https://www.leoeditor.com/customizing.html"&gt;Leo Editor settings&lt;/a&gt; 中的說明, &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 共有四種設定檔案: &lt;/p&gt;
&lt;p&gt;&lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 的設定存在 @settings 節點指令中, 開啟 .leo 檔案時,  &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 不僅會在檔案中的節點樹尋找 @settings, 也會在 leoSettings.leo 檔案中搜尋相關設定. 主要的設定包括:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每一操作系統中或特定安裝時所選擇的設定.&lt;/li&gt;
&lt;li&gt;每位用戶所選擇的設定.&lt;/li&gt;
&lt;li&gt;每個目錄所選擇的設定.&lt;/li&gt;
&lt;li&gt;每個檔案所選擇的設定.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此, &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 合計共有四種設定檔案:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;名稱為 leoSettings.leo 的內建設定檔案.&lt;/li&gt;
&lt;li&gt;名稱為 myLeoSettings.leo 的個人設定檔案.&lt;/li&gt;
&lt;li&gt;名稱為 LeoSettings.leo, 可以位於各相關目錄的機器設定檔案.&lt;/li&gt;
&lt;li&gt;名稱為 .leo 且內容包含 stylesheets 與其他顯示設定相關設定的主題檔案..&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而各設定檔案則分別存在:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;設定檔案儲存目錄為各用戶目錄中的 .leo 子目錄.&lt;/li&gt;
&lt;li&gt;leo 安裝目錄下的 config 目錄.&lt;/li&gt;
&lt;li&gt;各用戶目錄中 .leo 目錄中的 MACHINE 目錄, 而此 MACHINE 可以是電腦的主機名稱.&lt;/li&gt;
&lt;li&gt;主題設定檔案則可以儲存在任何存放 .leo 的目錄中.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;當使用者開啟 .leo 檔案時, 系統所採用的設定檔案將會顯示在 log 區域.&lt;/p&gt;
&lt;p&gt;而目前已經知道, 在 Mac 中, 若 leoSettings.leo 或 myLeoSettings.leo 中的 @settings 沒有設定, 開啟 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 後將會只有 Python 下拉式功能表, 但並不會顯示任何與 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 有關的其他功能表.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 設定讀取順序&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 讀取設定檔案的順序將從系統安裝目錄下的 config 開始搜尋讀取, 各設定檔案的搜尋順序都相同. 亦即, 若在 leo/config 與使用者 .leo 目錄中各有一個 leoSettings.leo, 則 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 會先讀取系統的設定後, 再讀取使用者目錄下 .leo 目錄中的同名設定, 而且若兩個檔案皆有相同節點設定, 該節點的設定將以較後讀取的設定為主.&lt;/p&gt;
&lt;h2&gt;閱讀 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 原始碼&lt;/h2&gt;
&lt;p&gt;由於 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 的開發歷程已經超過 25 年 (1995 至今), 從早期的 C++ 版本到 Python Tkinter, 直到現在採用 PyQT 的版本, 過程中有許多轉折與考量, 因此原始碼中有許多學習的地方, 所以設法利用 recursive importer 展開, 希望逐一摘要出相關重點.&lt;/p&gt;
&lt;p&gt;所使用的 recursive importer:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
'''Recursively import all python files in a directory and clean the result.'''

c.recursiveImport(
    dir_ = r'./',
    kind = '@clean', # The new best practice.
    safe_at_file = True,
    theTypes = ['.py']
)
&lt;/pre&gt;

&lt;p&gt;上述的 c 是 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 程式碼中的 commander. 只要透過 c 物件中的 recursiveImport() 就可以採遞迴的方式, 將所需的檔案導入節點內容中. 而此一功能位於 &lt;a href="https://github.com/leo-editor/leo-editor/blob/e46e9315f61a1c378900d3ba7fbadf39c5d9fb5b/leo/core/leoCommands.py#L3787"&gt;core/leoCommands.py 中的 recursiveImport() 方法&lt;/a&gt;中. 而 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 不僅可以採用 @clean 直接將物件與方法逐一展為樹狀節點, 可以用 @edit 展開全部檔案內容, 或者在導入後將節點編輯指令前加入 @@ 令其只存在 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 節點中, 而切斷與外部檔案的連結, 專門充作研究註解用. 其他還有 clone 節點的功能, 能夠針對同一個節點內容, 同步出現在不同的節點位置中.&lt;/p&gt;
&lt;p&gt;而 g 則是 core/leoGlobals.py 的簡稱, 其中 &lt;a href="https://github.com/leo-editor/leo-editor/blob/e46e9315f61a1c378900d3ba7fbadf39c5d9fb5b/leo/core/leoGlobals.py#L6390"&gt;core/leoGlobals.py 中的 es 方法&lt;/a&gt; 就是 g.es() 中的由來, 也是 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 中的 echo string 方法.&lt;/p&gt;
&lt;h2&gt;為何要研究 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt;?&lt;/h2&gt;
&lt;p&gt;假如您仔細了解 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 創建的初衷, 是源自於實現 &lt;a href="https://en.wikipedia.org/wiki/Donald_Knuth"&gt;Donald Knuth&lt;/a&gt; 教授所提出的 &lt;a href="https://en.wikipedia.org/wiki/Literate_programming"&gt;Literate Programming&lt;/a&gt; 概念, 也就是希望能夠讓計算機程式的編寫, 可採用自然語言並穿插巨集段落與傳統原始碼的方式來解說邏輯. 而且從中可以產生能編譯的程式碼.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Literate_programming"&gt;Literate Programming&lt;/a&gt; 的目的, 就是希望程式師在操控電腦的過程能夠更加人性化, 使用一般人方便了解的方式建構, 除了有助於多人協同, 方便流傳延續, 也能避開電腦硬體快速變遷所帶來的知識障礙.&lt;/p&gt;
&lt;p&gt;這樣的概念, 假如再加上&lt;a href="https://arxiv.org/pdf/2105.02769.pdf"&gt;Computer-aided Design as Language&lt;/a&gt; 論文的加持, 為何研究 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 應該就不難找出答案! 因為在 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 上工作, 就是依賴許多 Python 巨集程式在進行知識管理, 而且是採用電腦容易解讀, 具有邏輯結構意義的 XML 樹狀圖在描述所創建的知識. &lt;/p&gt;
&lt;p&gt;若有朝一日, 真可透過機械設計工程師的討論言說來進行電腦輔助設計, 最近這幾年科技的進展, 就是為了此一目標在努力.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://arxiv.org/pdf/2105.02769.pdf"&gt;Computer-aided Design as Language&lt;/a&gt;  目前是透過 Google 提出的 &lt;a href="https://opensource.google/projects/protobuf"&gt;Protobuf&lt;/a&gt; 格式, 儲存電腦深度學習辨識 2D 設計圖所得到的結果. 其實所謂的機械設計工程圖, 主要邏輯就是在設計目標的驅使下, 由許多繪圖元件加上各種約束條件所組成, 而 &lt;a href="https://deepmind.com/"&gt;DeepMind&lt;/a&gt; 與 &lt;a href="https://onshape.com"&gt;Onshape&lt;/a&gt; 這兩個公司提出了一種能夠自動生成產品設計工程圖的機器學習模型. 最終所得到的結果 &lt;a href="https://opensource.google/projects/protobuf"&gt;Protobuf&lt;/a&gt; 就是 XML.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mde.tw"&gt;KMOlab&lt;/a&gt; 目前想做的其實只有一個小小的目標, 就是讓 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 當作 MCAD (Mechanical Computer Aided Design] 套件與  [CoppeliaSim] 中的資料轉換工具, 可以用來解讀或建立相關機電整合系統模型. 能夠派上用場的 MCAD 是開源的 &lt;a href="https://solvespace.com"&gt;Solvespace&lt;/a&gt;, 而 [CoppeliaSim] 與 &lt;a href="https://cyberbotics.com/"&gt;Webots&lt;/a&gt; 可以採用 XML 格式建立模型的特性正好可以與 &lt;a href="https://solvespace.com"&gt;Solvespace&lt;/a&gt; 結合應用.&lt;/p&gt;
&lt;p&gt;理想的狀況下, 產品設計師利用 &lt;a href="https://github.com/lark-parser/lark"&gt;lark&lt;/a&gt; 自行定義基本的 2D 或 3D 產品描述語言, 經由 &lt;a href="https://solvespace.com"&gt;Solvespace&lt;/a&gt; 建立所需的零組件後, 將檔案轉為 &lt;a href="https://en.wikipedia.org/wiki/STL_(file_format)"&gt;STL&lt;/a&gt; 或 &lt;a href="http://wiki.ros.org/urdf"&gt;URDF&lt;/a&gt; , 接著再由 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 居中引入零組件檔案, 並組合成能夠直接由 [CoppeliaSim] 及 &lt;a href="https://cyberbotics.com/"&gt;Webots&lt;/a&gt; 使用的機電整合模型後, 再進行後續的控制系統設計與模擬.&lt;/p&gt;</content><category term="KMOLab"></category><category term="202107"></category></entry><entry><title>cmsimde 修改</title><link href="./2021-kmol-cmsimde-modification.html" rel="alternate"></link><published>2021-07-08T12:00:00+08:00</published><updated>2021-07-08T12:00:00+08:00</updated><author><name>yen</name></author><id>tag:None,2021-07-08:./2021-kmol-cmsimde-modification.html</id><summary type="html">&lt;p&gt;過去使用 &lt;a href="https://www.cmsimple.org/"&gt;CMSimple&lt;/a&gt; 與 &lt;a href="https://www.cmsimple-xh.org/"&gt;CMSimple XH&lt;/a&gt; 當作網際內容管理系統好長一段時間, 主要看重的是它不需要資料庫系統, 只利用 Ｈ1, H2 與 H3 等三個 html 標註進行分頁, 架構非常簡單. 之後用 Python 與 &lt;a href="https://github.com/cherrypy/cherrypy"&gt;CherryPy&lt;/a&gt; 改寫後, 又用了一陣子, 直到框架換成 &lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;Flask&lt;/a&gt;, 並且納入 [Pelican] Blog 與 &lt;a href="https://revealjs.com/"&gt;Reveal.js&lt;/a&gt; 後, 改為目前的 &lt;a href="https://github.com/mdecourse/cmsimde"&gt;cmsimde&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;過去使用 &lt;a href="https://www.cmsimple.org/"&gt;CMSimple&lt;/a&gt; 與 &lt;a href="https://www.cmsimple-xh.org/"&gt;CMSimple XH&lt;/a&gt; 當作網際內容管理系統好長一段時間, 主要看重的是它不需要資料庫系統, 只利用 Ｈ1, H2 與 H3 等三個 html 標註進行分頁, 架構非常簡單. 之後用 Python 與 &lt;a href="https://github.com/cherrypy/cherrypy"&gt;CherryPy&lt;/a&gt; 改寫後, 又用了一陣子, 直到框架換成 &lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;Flask&lt;/a&gt;, 並且納入 [Pelican] Blog 與 &lt;a href="https://revealjs.com/"&gt;Reveal.js&lt;/a&gt; 後, 改為目前的 &lt;a href="https://github.com/mdecourse/cmsimde"&gt;cmsimde&lt;/a&gt;.&lt;/p&gt;


&lt;h2&gt;與 bug 共存&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecourse/cmsimde"&gt;cmsimde&lt;/a&gt; 中採用 Tinymce 4.X 作為網際編輯器, 目前雖然已經修改為能夠與 IPv6 網際環境相容, 但是其中的 plugin 已經與最新的 Tinymce 5.X 不相容, 亦即, 假如這些 Javascript 套件發生問題, 就必須自己動手修改. 已經沒有官方原始碼或 cdn 可以引用. 但由於當年所使用的 Javascript, 有些是 minimized 過的版本, 所以某些情況下, 無法進入修正的部分, 就必須設法與 bug 共存.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecourse/cmsimde"&gt;cmsimde&lt;/a&gt; 是在 2013 年 Fall, 一行一行從無到有刻出來的, 照理說每一個程式功能都可以任意修改, 但在今天想要讓三個倉儲的動態網頁同時利用不同的埠號開啟, 卻吃了閉門羹. 該不會這裡又存在另外一個 bug.&lt;/p&gt;
&lt;h2&gt;確實沒有完全弄清楚&lt;/h2&gt;
&lt;p&gt;經常掛在嘴邊的是: 對技術越熟的所謂專家, 其實大多都是非常謙虛的. 因為每天幾乎都碰到許多暫時無解的問題. 何況現在科技日新月異, 真相撲朔迷離, 而且網路上的垃圾比有用的資料多上許多, 因此各行業所謂專家的有效期都非常短. 不管上不上台唱歌, 稍有不慎, 就會從神壇跌落.&lt;/p&gt;
&lt;p&gt;好了, &lt;a href="https://github.com/mdecourse/cmsimde"&gt;cmsimde&lt;/a&gt; 在今天改版之前, 只要同時在一個瀏覽器上啟動兩個以上的動態網頁, 其中一個網站的登入狀態, 會因為另外一個不同埠號的 &lt;a href="https://github.com/mdecourse/cmsimde"&gt;cmsimde&lt;/a&gt; 登入而退出. 追查原因, 是瀏覽器中名稱為 session 的 cookie 值改變, 讓其先前已經登入的  &lt;a href="https://github.com/mdecourse/cmsimde"&gt;cmsimde&lt;/a&gt; 因近端的登入 cookie 值改變而自動 logout.&lt;/p&gt;
&lt;p&gt;第一個想到的是, 在近端與遠端同一端的情況下, 會不會只要將登入後對應 session 的 key 附加一個隨機字串, 或可達到多 &lt;a href="https://github.com/mdecourse/cmsimde"&gt;cmsimde&lt;/a&gt; 同時登入編輯模式的目標. 但是, 卻行不通. 無論如何更改 key 的值, 仍然第二套動態 &lt;a href="https://github.com/mdecourse/cmsimde"&gt;cmsimde&lt;/a&gt; 登入, 該 session 值就會變更, 導致同時只能一套 &lt;a href="https://github.com/mdecourse/cmsimde"&gt;cmsimde&lt;/a&gt; 保持在登入狀態.&lt;/p&gt;
&lt;h2&gt;session 與 cookie 的實況&lt;/h2&gt;
&lt;p&gt;為了設法達到上述多個 &lt;a href="https://github.com/mdecourse/cmsimde"&gt;cmsimde&lt;/a&gt; 可以同時保持登入狀態的功能, 只能重新讀了 &lt;a href="https://www.valentinog.com/blog/cookies/"&gt;re-introduction to HTTP-cookie&lt;/a&gt; 以及 &lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;Flask&lt;/a&gt; 原始碼. 想要找到這個名稱為 session 的 cookie 到底從何而來.&lt;/p&gt;
&lt;p&gt;終於在 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; recursive importer 的協助下, 找到 &lt;a href="https://github.com/pallets/flask/blob/7a73171edc3bcffef96ef6367977ab3ae9af9350/src/flask/app.py#L335"&gt;Flask app.py 第 335 行&lt;/a&gt; 中確實有個名稱為 session 的 cookie. 接下來則是要找看看, 到底這個  cookie 是如何設定.&lt;/p&gt;
&lt;p&gt;而 &lt;a href="https://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 中的 recursive importer 是這樣寫的:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
'''Recursively import all python files in a directory and clean the result.'''

c.recursiveImport(
    dir_ = r'./',
    kind = '@clean', # The new best practice.
    safe_at_file = True,
    theTypes = ['.py']
)
&lt;/pre&gt;

&lt;p&gt;搜尋 Flask 程式碼, 也可以發現 &lt;a href="https://github.com/pallets/flask/blob/7a73171edc3bcffef96ef6367977ab3ae9af9350/src/flask/sessions.py#L98"&gt;Flask session.py 第 98 行&lt;/a&gt; 明確寫著, 假如沒有設定 secret_key, 網際系統的 session 就無法產生. 從 &lt;a href="https://github.com/pallets/flask/blob/7a73171edc3bcffef96ef6367977ab3ae9af9350/src/flask/sessions.py#L353"&gt;Flask session.py 第 353 行&lt;/a&gt; 也可以發現 session 的值來自 get_signing_serializer(app), 而 &lt;a href="https://github.com/pallets/flask/blob/7a73171edc3bcffef96ef6367977ab3ae9af9350/src/flask/sessions.py#L335"&gt;Flask session.py 第 335 行&lt;/a&gt; 則清楚標示, 原來 cookie key 為 session 的 value 取決於 secret_key.&lt;/p&gt;
&lt;p&gt;經過上述的搜尋, 只要將 cmsimde 的 secret_key 在近端需要同時開啟多個動態網頁時, 給予定值, 就可以達到目的. 但是若在遠端執行時, 則仍必須回復動態值如下, 以保障伺服器與客戶端資料傳輸的安全性.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
secret_key = os.urandom(24).hex()
app.secret_key = secret_key
&lt;/pre&gt;</content><category term="KMOLab"></category><category term="202107"></category></entry><entry><title>2021 Spring</title><link href="./2021-kmol-2021-spring.html" rel="alternate"></link><published>2021-07-08T11:00:00+08:00</published><updated>2021-07-08T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:None,2021-07-08:./2021-kmol-2021-spring.html</id><summary type="html">&lt;p&gt;2021 年 5 月中開始, 由於疫情緊張, 台灣各大學陸續課程宣布採線上教學, 當時正是 W13 開端, 距離 Spring 學期結束, 還有六週.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2021 年 5 月中開始, 由於疫情緊張, 台灣各大學陸續課程宣布採線上教學, 當時正是 W13 開端, 距離 Spring 學期結束, 還有六週.&lt;/p&gt;


&lt;h2&gt;疫情帶來的考驗&lt;/h2&gt;
&lt;p&gt;當時, Github 與 Gitlab 正遭到數位挖礦者的濫用, 而大舉透過程式 flag 許多上課用戶, 因為多年來大一上課第一週, 都會要求學生以學號當作帳號, 申請 Github account, 沒想到因此讓查驗程式誤判為一人申請多帳號, 而遭到禁用.&lt;/p&gt;
&lt;p&gt;由於 &lt;a href="https://mde.tw"&gt;KMOLab&lt;/a&gt; 所有的課程都能全部在線上進行, 課程也沒有考試, 評量主要依據來自學員 Github 提交歷程, 分組專題貢獻度, 以及參考同儕互評. 因此即便突然由實體上課轉為線上, 就授課的部分而言, 沒有任何問題.&lt;/p&gt;
&lt;p&gt;但是不少學員的 Github 帳號遭 flag, 以及突然讓學生在寄宿地或回到家裡進行線上課程, 就會是一個大問題. 因為實體上課, 每週會有 3-4 堂課在綜合第一工程館八樓的電腦輔助設計室上課, 每個學生都有相同的電腦硬體與網路環境, 無論是執行倉儲改版, 程式編寫, 或者機電系統的配置與控制, 學習機會與環境均等, 但貿然將實體課程轉為線上, 每位學員實際的電腦硬體與網路環境的情況都不相同, 這時課程的評量就面臨考驗.&lt;/p&gt;
&lt;h2&gt;緊急因應&lt;/h2&gt;
&lt;p&gt;2020 年的台灣是全球防疫優等生, 但是潛藏在每個角落的失心, 在疫情緊急下, 問題一一浮現.  其實去年 Spring, 前後就有三個禮拜, &lt;a href="https://mde.tw"&gt;KMOLab&lt;/a&gt; 就已經實施線上課程的演練, 當時就特別要求每位同學要同時申請 Github, Gitlab 與 Heroku 帳號, 而且也告知每一位學員必須要徹底了解家裡或住宿地的網路連線情況, 必須要準備堪用的電腦麥克風與 webcam, 可能的話也要爭取學校宿舍網路的使用環境, 能與電腦輔助設計室相同, 使用純 IPv6 上網, 而且能正確擷取所需使用軟體套件的網路授權, 其中包含學校必須提供 IPv6 協定下的 Windows 10 認證. 但時至今日, 這樣的基本要求仍無法達成.&lt;/p&gt;
&lt;p&gt;於是, 就想起大約十年前, 曾經提出每年擁有超過 500 名新生入學的工學院, 若能在入學階段就輔導學員, “配發"一台堪用四年的筆電, 其中安裝各階段課程會使用到的軟體套件, 如此各電腦教室只需要少量的伺服器與拆機測試用的桌機與筆電, 剩下來的就只要將學校的網路環境安裝與配置, 設法推廣到宿舍與外部學生寄宿地, 所謂的數位延伸校園一旦成形, 後續許多課程內外事務的推動, 將可事半功倍......&lt;/p&gt;
&lt;p&gt;當然, 這樣的夢想早就落空, 每一屆的新生每年都還是問: 要不要買電腦? 買什麼電腦? 筆電還是桌機? 要不要事先安裝什麼 XX 軟體......&lt;/p&gt;
&lt;h2&gt;疫情下的教育&lt;/h2&gt;
&lt;p&gt;2021 年不只經常被笑是紙紮屋的 X 國, 整棟大樓會應聲倒下, 幾乎每位歷任總統都下獄的 X 韓也會, 世界強國的渡假區海邊, 蓋在濕地上的大樓, 也無法倖免. 世界各地一個月前的旱災, 轉眼就可能變成水災......&lt;/p&gt;
&lt;p&gt;假如稍有年紀的世代, 看到許多國家年輕一輩視疫情如無物, 終日把飲料盡歡, 其實也無需過度苛責, 因為大家在全球情勢彼此牽動, 大自然反撲, 貧富如此懸殊的社會, 能夠順心過完一天, 就應該算是幸福的. &lt;/p&gt;
&lt;p&gt;年長一輩的頂多只能勸說, 希望大家能夠設身處地, 互相換位思考, 在群體中的任何一個份子, 都應該有當負起的責任, 其中包括掃下不稱職的民意代表與制度. 並且勇於解決問題, 因為歷史上從來就不會有當權者願意主動放棄既得利益, 疫情下的教育, 是教會年輕的世代, 要積極爭取屬於自己的權益.&lt;/p&gt;</content><category term="KMOLab"></category><category term="202107"></category></entry></feed>